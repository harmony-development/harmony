// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/localuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/session"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// LocalUserCreate is the builder for creating a LocalUser entity.
type LocalUserCreate struct {
	config
	mutation *LocalUserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (luc *LocalUserCreate) SetEmail(s string) *LocalUserCreate {
	luc.mutation.SetEmail(s)
	return luc
}

// SetPassword sets the "password" field.
func (luc *LocalUserCreate) SetPassword(b []byte) *LocalUserCreate {
	luc.mutation.SetPassword(b)
	return luc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (luc *LocalUserCreate) SetUserID(id uint64) *LocalUserCreate {
	luc.mutation.SetUserID(id)
	return luc
}

// SetUser sets the "user" edge to the User entity.
func (luc *LocalUserCreate) SetUser(u *User) *LocalUserCreate {
	return luc.SetUserID(u.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (luc *LocalUserCreate) AddSessionIDs(ids ...int) *LocalUserCreate {
	luc.mutation.AddSessionIDs(ids...)
	return luc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (luc *LocalUserCreate) AddSessions(s ...*Session) *LocalUserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luc.AddSessionIDs(ids...)
}

// Mutation returns the LocalUserMutation object of the builder.
func (luc *LocalUserCreate) Mutation() *LocalUserMutation {
	return luc.mutation
}

// Save creates the LocalUser in the database.
func (luc *LocalUserCreate) Save(ctx context.Context) (*LocalUser, error) {
	var (
		err  error
		node *LocalUser
	)
	if len(luc.hooks) == 0 {
		if err = luc.check(); err != nil {
			return nil, err
		}
		node, err = luc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LocalUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luc.check(); err != nil {
				return nil, err
			}
			luc.mutation = mutation
			node, err = luc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luc.hooks) - 1; i >= 0; i-- {
			mut = luc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (luc *LocalUserCreate) SaveX(ctx context.Context) *LocalUser {
	v, err := luc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (luc *LocalUserCreate) check() error {
	if _, ok := luc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New("entgen: missing required field \"email\"")}
	}
	if v, ok := luc.mutation.Email(); ok {
		if err := localuser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf("entgen: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := luc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New("entgen: missing required field \"password\"")}
	}
	if _, ok := luc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("entgen: missing required edge \"user\"")}
	}
	return nil
}

func (luc *LocalUserCreate) sqlSave(ctx context.Context) (*LocalUser, error) {
	_node, _spec := luc.createSpec()
	if err := sqlgraph.CreateNode(ctx, luc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (luc *LocalUserCreate) createSpec() (*LocalUser, *sqlgraph.CreateSpec) {
	var (
		_node = &LocalUser{config: luc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: localuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: localuser.FieldID,
			},
		}
	)
	if value, ok := luc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: localuser.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := luc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: localuser.FieldPassword,
		})
		_node.Password = value
	}
	if nodes := luc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   localuser.UserTable,
			Columns: []string{localuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_local_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := luc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   localuser.SessionsTable,
			Columns: []string{localuser.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LocalUserCreateBulk is the builder for creating many LocalUser entities in bulk.
type LocalUserCreateBulk struct {
	config
	builders []*LocalUserCreate
}

// Save creates the LocalUser entities in the database.
func (lucb *LocalUserCreateBulk) Save(ctx context.Context) ([]*LocalUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lucb.builders))
	nodes := make([]*LocalUser, len(lucb.builders))
	mutators := make([]Mutator, len(lucb.builders))
	for i := range lucb.builders {
		func(i int, root context.Context) {
			builder := lucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocalUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lucb *LocalUserCreateBulk) SaveX(ctx context.Context) []*LocalUser {
	v, err := lucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
