// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sync/v1/sync.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _sync_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Kind.(type) {

	case *Event_UserRemovedFromGuild_:

		if v, ok := interface{}(m.GetUserRemovedFromGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "UserRemovedFromGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_UserAddedToGuild_:

		if v, ok := interface{}(m.GetUserAddedToGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "UserAddedToGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on PostEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PostEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PostEventRequestValidationError is the validation error returned by
// PostEventRequest.Validate if the designated constraints aren't met.
type PostEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostEventRequestValidationError) ErrorName() string { return "PostEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostEventRequestValidationError{}

// Validate checks the field values on Ack with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Ack) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventId

	return nil
}

// AckValidationError is the validation error returned by Ack.Validate if the
// designated constraints aren't met.
type AckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AckValidationError) ErrorName() string { return "AckValidationError" }

// Error satisfies the builtin error interface
func (e AckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AckValidationError{}

// Validate checks the field values on Syn with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Syn) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventId

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SynValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SynValidationError is the validation error returned by Syn.Validate if the
// designated constraints aren't met.
type SynValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SynValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SynValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SynValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SynValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SynValidationError) ErrorName() string { return "SynValidationError" }

// Error satisfies the builtin error interface
func (e SynValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SynValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SynValidationError{}

// Validate checks the field values on Event_UserRemovedFromGuild with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_UserRemovedFromGuild) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for GuildId

	return nil
}

// Event_UserRemovedFromGuildValidationError is the validation error returned
// by Event_UserRemovedFromGuild.Validate if the designated constraints aren't met.
type Event_UserRemovedFromGuildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_UserRemovedFromGuildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_UserRemovedFromGuildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_UserRemovedFromGuildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_UserRemovedFromGuildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_UserRemovedFromGuildValidationError) ErrorName() string {
	return "Event_UserRemovedFromGuildValidationError"
}

// Error satisfies the builtin error interface
func (e Event_UserRemovedFromGuildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_UserRemovedFromGuild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_UserRemovedFromGuildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_UserRemovedFromGuildValidationError{}

// Validate checks the field values on Event_UserAddedToGuild with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_UserAddedToGuild) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for GuildId

	return nil
}

// Event_UserAddedToGuildValidationError is the validation error returned by
// Event_UserAddedToGuild.Validate if the designated constraints aren't met.
type Event_UserAddedToGuildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_UserAddedToGuildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_UserAddedToGuildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_UserAddedToGuildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_UserAddedToGuildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_UserAddedToGuildValidationError) ErrorName() string {
	return "Event_UserAddedToGuildValidationError"
}

// Error satisfies the builtin error interface
func (e Event_UserAddedToGuildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_UserAddedToGuild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_UserAddedToGuildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_UserAddedToGuildValidationError{}
