// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/actionbutton"
	"github.com/harmony-development/legato/server/db/ent/entgen/actiondropdown"
	"github.com/harmony-development/legato/server/db/ent/entgen/actioninput"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedaction"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// EmbedActionUpdate is the builder for updating EmbedAction entities.
type EmbedActionUpdate struct {
	config
	hooks    []Hook
	mutation *EmbedActionMutation
}

// Where adds a new predicate for the EmbedActionUpdate builder.
func (eau *EmbedActionUpdate) Where(ps ...predicate.EmbedAction) *EmbedActionUpdate {
	eau.mutation.predicates = append(eau.mutation.predicates, ps...)
	return eau
}

// SetActionID sets the "action_id" field.
func (eau *EmbedActionUpdate) SetActionID(s string) *EmbedActionUpdate {
	eau.mutation.SetActionID(s)
	return eau
}

// SetActionType sets the "action_type" field.
func (eau *EmbedActionUpdate) SetActionType(i int8) *EmbedActionUpdate {
	eau.mutation.ResetActionType()
	eau.mutation.SetActionType(i)
	return eau
}

// AddActionType adds i to the "action_type" field.
func (eau *EmbedActionUpdate) AddActionType(i int8) *EmbedActionUpdate {
	eau.mutation.AddActionType(i)
	return eau
}

// SetButtonID sets the "button" edge to the ActionButton entity by ID.
func (eau *EmbedActionUpdate) SetButtonID(id int) *EmbedActionUpdate {
	eau.mutation.SetButtonID(id)
	return eau
}

// SetNillableButtonID sets the "button" edge to the ActionButton entity by ID if the given value is not nil.
func (eau *EmbedActionUpdate) SetNillableButtonID(id *int) *EmbedActionUpdate {
	if id != nil {
		eau = eau.SetButtonID(*id)
	}
	return eau
}

// SetButton sets the "button" edge to the ActionButton entity.
func (eau *EmbedActionUpdate) SetButton(a *ActionButton) *EmbedActionUpdate {
	return eau.SetButtonID(a.ID)
}

// SetDropdownID sets the "dropdown" edge to the ActionDropdown entity by ID.
func (eau *EmbedActionUpdate) SetDropdownID(id int) *EmbedActionUpdate {
	eau.mutation.SetDropdownID(id)
	return eau
}

// SetNillableDropdownID sets the "dropdown" edge to the ActionDropdown entity by ID if the given value is not nil.
func (eau *EmbedActionUpdate) SetNillableDropdownID(id *int) *EmbedActionUpdate {
	if id != nil {
		eau = eau.SetDropdownID(*id)
	}
	return eau
}

// SetDropdown sets the "dropdown" edge to the ActionDropdown entity.
func (eau *EmbedActionUpdate) SetDropdown(a *ActionDropdown) *EmbedActionUpdate {
	return eau.SetDropdownID(a.ID)
}

// SetInputID sets the "input" edge to the ActionInput entity by ID.
func (eau *EmbedActionUpdate) SetInputID(id int) *EmbedActionUpdate {
	eau.mutation.SetInputID(id)
	return eau
}

// SetNillableInputID sets the "input" edge to the ActionInput entity by ID if the given value is not nil.
func (eau *EmbedActionUpdate) SetNillableInputID(id *int) *EmbedActionUpdate {
	if id != nil {
		eau = eau.SetInputID(*id)
	}
	return eau
}

// SetInput sets the "input" edge to the ActionInput entity.
func (eau *EmbedActionUpdate) SetInput(a *ActionInput) *EmbedActionUpdate {
	return eau.SetInputID(a.ID)
}

// Mutation returns the EmbedActionMutation object of the builder.
func (eau *EmbedActionUpdate) Mutation() *EmbedActionMutation {
	return eau.mutation
}

// ClearButton clears the "button" edge to the ActionButton entity.
func (eau *EmbedActionUpdate) ClearButton() *EmbedActionUpdate {
	eau.mutation.ClearButton()
	return eau
}

// ClearDropdown clears the "dropdown" edge to the ActionDropdown entity.
func (eau *EmbedActionUpdate) ClearDropdown() *EmbedActionUpdate {
	eau.mutation.ClearDropdown()
	return eau
}

// ClearInput clears the "input" edge to the ActionInput entity.
func (eau *EmbedActionUpdate) ClearInput() *EmbedActionUpdate {
	eau.mutation.ClearInput()
	return eau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EmbedActionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eau.hooks) == 0 {
		affected, err = eau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eau.mutation = mutation
			affected, err = eau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eau.hooks) - 1; i >= 0; i-- {
			mut = eau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EmbedActionUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EmbedActionUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EmbedActionUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eau *EmbedActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedaction.Table,
			Columns: embedaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedaction.FieldID,
			},
		},
	}
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.ActionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedaction.FieldActionID,
		})
	}
	if value, ok := eau.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedaction.FieldActionType,
		})
	}
	if value, ok := eau.mutation.AddedActionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedaction.FieldActionType,
		})
	}
	if eau.mutation.ButtonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.ButtonTable,
			Columns: []string{embedaction.ButtonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actionbutton.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.ButtonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.ButtonTable,
			Columns: []string{embedaction.ButtonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actionbutton.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.DropdownCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.DropdownTable,
			Columns: []string{embedaction.DropdownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actiondropdown.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.DropdownIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.DropdownTable,
			Columns: []string{embedaction.DropdownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actiondropdown.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.InputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.InputTable,
			Columns: []string{embedaction.InputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actioninput.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.InputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.InputTable,
			Columns: []string{embedaction.InputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actioninput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmbedActionUpdateOne is the builder for updating a single EmbedAction entity.
type EmbedActionUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmbedActionMutation
}

// SetActionID sets the "action_id" field.
func (eauo *EmbedActionUpdateOne) SetActionID(s string) *EmbedActionUpdateOne {
	eauo.mutation.SetActionID(s)
	return eauo
}

// SetActionType sets the "action_type" field.
func (eauo *EmbedActionUpdateOne) SetActionType(i int8) *EmbedActionUpdateOne {
	eauo.mutation.ResetActionType()
	eauo.mutation.SetActionType(i)
	return eauo
}

// AddActionType adds i to the "action_type" field.
func (eauo *EmbedActionUpdateOne) AddActionType(i int8) *EmbedActionUpdateOne {
	eauo.mutation.AddActionType(i)
	return eauo
}

// SetButtonID sets the "button" edge to the ActionButton entity by ID.
func (eauo *EmbedActionUpdateOne) SetButtonID(id int) *EmbedActionUpdateOne {
	eauo.mutation.SetButtonID(id)
	return eauo
}

// SetNillableButtonID sets the "button" edge to the ActionButton entity by ID if the given value is not nil.
func (eauo *EmbedActionUpdateOne) SetNillableButtonID(id *int) *EmbedActionUpdateOne {
	if id != nil {
		eauo = eauo.SetButtonID(*id)
	}
	return eauo
}

// SetButton sets the "button" edge to the ActionButton entity.
func (eauo *EmbedActionUpdateOne) SetButton(a *ActionButton) *EmbedActionUpdateOne {
	return eauo.SetButtonID(a.ID)
}

// SetDropdownID sets the "dropdown" edge to the ActionDropdown entity by ID.
func (eauo *EmbedActionUpdateOne) SetDropdownID(id int) *EmbedActionUpdateOne {
	eauo.mutation.SetDropdownID(id)
	return eauo
}

// SetNillableDropdownID sets the "dropdown" edge to the ActionDropdown entity by ID if the given value is not nil.
func (eauo *EmbedActionUpdateOne) SetNillableDropdownID(id *int) *EmbedActionUpdateOne {
	if id != nil {
		eauo = eauo.SetDropdownID(*id)
	}
	return eauo
}

// SetDropdown sets the "dropdown" edge to the ActionDropdown entity.
func (eauo *EmbedActionUpdateOne) SetDropdown(a *ActionDropdown) *EmbedActionUpdateOne {
	return eauo.SetDropdownID(a.ID)
}

// SetInputID sets the "input" edge to the ActionInput entity by ID.
func (eauo *EmbedActionUpdateOne) SetInputID(id int) *EmbedActionUpdateOne {
	eauo.mutation.SetInputID(id)
	return eauo
}

// SetNillableInputID sets the "input" edge to the ActionInput entity by ID if the given value is not nil.
func (eauo *EmbedActionUpdateOne) SetNillableInputID(id *int) *EmbedActionUpdateOne {
	if id != nil {
		eauo = eauo.SetInputID(*id)
	}
	return eauo
}

// SetInput sets the "input" edge to the ActionInput entity.
func (eauo *EmbedActionUpdateOne) SetInput(a *ActionInput) *EmbedActionUpdateOne {
	return eauo.SetInputID(a.ID)
}

// Mutation returns the EmbedActionMutation object of the builder.
func (eauo *EmbedActionUpdateOne) Mutation() *EmbedActionMutation {
	return eauo.mutation
}

// ClearButton clears the "button" edge to the ActionButton entity.
func (eauo *EmbedActionUpdateOne) ClearButton() *EmbedActionUpdateOne {
	eauo.mutation.ClearButton()
	return eauo
}

// ClearDropdown clears the "dropdown" edge to the ActionDropdown entity.
func (eauo *EmbedActionUpdateOne) ClearDropdown() *EmbedActionUpdateOne {
	eauo.mutation.ClearDropdown()
	return eauo
}

// ClearInput clears the "input" edge to the ActionInput entity.
func (eauo *EmbedActionUpdateOne) ClearInput() *EmbedActionUpdateOne {
	eauo.mutation.ClearInput()
	return eauo
}

// Save executes the query and returns the updated EmbedAction entity.
func (eauo *EmbedActionUpdateOne) Save(ctx context.Context) (*EmbedAction, error) {
	var (
		err  error
		node *EmbedAction
	)
	if len(eauo.hooks) == 0 {
		node, err = eauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eauo.mutation = mutation
			node, err = eauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eauo.hooks) - 1; i >= 0; i-- {
			mut = eauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EmbedActionUpdateOne) SaveX(ctx context.Context) *EmbedAction {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EmbedActionUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EmbedActionUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eauo *EmbedActionUpdateOne) sqlSave(ctx context.Context) (_node *EmbedAction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedaction.Table,
			Columns: embedaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedaction.FieldID,
			},
		},
	}
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EmbedAction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.ActionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedaction.FieldActionID,
		})
	}
	if value, ok := eauo.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedaction.FieldActionType,
		})
	}
	if value, ok := eauo.mutation.AddedActionType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedaction.FieldActionType,
		})
	}
	if eauo.mutation.ButtonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.ButtonTable,
			Columns: []string{embedaction.ButtonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actionbutton.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.ButtonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.ButtonTable,
			Columns: []string{embedaction.ButtonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actionbutton.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.DropdownCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.DropdownTable,
			Columns: []string{embedaction.DropdownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actiondropdown.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.DropdownIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.DropdownTable,
			Columns: []string{embedaction.DropdownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actiondropdown.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.InputCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.InputTable,
			Columns: []string{embedaction.InputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actioninput.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.InputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.InputTable,
			Columns: []string{embedaction.InputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actioninput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmbedAction{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
