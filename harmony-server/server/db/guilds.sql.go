// Code generated by sqlc. DO NOT EDIT.
// source: guilds.sql

package db

import (
	"context"
	"database/sql"
)

const addUserToGuild = `-- name: AddUserToGuild :exec
INSERT INTO Guild_Members (
    User_ID, Guild_ID
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type AddUserToGuildParams struct {
	UserID  string `json:"user_id"`
	GuildID int64  `json:"guild_id"`
}

func (q *Queries) AddUserToGuild(ctx context.Context, arg AddUserToGuildParams) error {
	_, err := q.exec(ctx, q.addUserToGuildStmt, addUserToGuild, arg.UserID, arg.GuildID)
	return err
}

const createChannel = `-- name: CreateChannel :one
INSERT INTO Channels (
    Guild_ID, Channel_Name
) VALUES (
    $1, $2
)
RETURNING channel_id, guild_id, channel_name
`

type CreateChannelParams struct {
	GuildID     sql.NullInt64 `json:"guild_id"`
	ChannelName string        `json:"channel_name"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.queryRow(ctx, q.createChannelStmt, createChannel, arg.GuildID, arg.ChannelName)
	var i Channel
	err := row.Scan(&i.ChannelID, &i.GuildID, &i.ChannelName)
	return i, err
}

const createGuild = `-- name: CreateGuild :one
INSERT INTO Guilds (
    Owner_ID, Guild_Name, Picture_URL
) VALUES (
    $1, $2, $3
)
RETURNING guild_id, owner_id, guild_name, picture_url
`

type CreateGuildParams struct {
	OwnerID    string `json:"owner_id"`
	GuildName  string `json:"guild_name"`
	PictureUrl string `json:"picture_url"`
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (Guild, error) {
	row := q.queryRow(ctx, q.createGuildStmt, createGuild, arg.OwnerID, arg.GuildName, arg.PictureUrl)
	var i Guild
	err := row.Scan(
		&i.GuildID,
		&i.OwnerID,
		&i.GuildName,
		&i.PictureUrl,
	)
	return i, err
}
