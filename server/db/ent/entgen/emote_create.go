// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/file"
)

// EmoteCreate is the builder for creating a Emote entity.
type EmoteCreate struct {
	config
	mutation *EmoteMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *EmoteCreate) SetName(s string) *EmoteCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetEmotepackID sets the "emotepack" edge to the EmotePack entity by ID.
func (ec *EmoteCreate) SetEmotepackID(id uint64) *EmoteCreate {
	ec.mutation.SetEmotepackID(id)
	return ec
}

// SetNillableEmotepackID sets the "emotepack" edge to the EmotePack entity by ID if the given value is not nil.
func (ec *EmoteCreate) SetNillableEmotepackID(id *uint64) *EmoteCreate {
	if id != nil {
		ec = ec.SetEmotepackID(*id)
	}
	return ec
}

// SetEmotepack sets the "emotepack" edge to the EmotePack entity.
func (ec *EmoteCreate) SetEmotepack(e *EmotePack) *EmoteCreate {
	return ec.SetEmotepackID(e.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (ec *EmoteCreate) SetFileID(id string) *EmoteCreate {
	ec.mutation.SetFileID(id)
	return ec
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (ec *EmoteCreate) SetNillableFileID(id *string) *EmoteCreate {
	if id != nil {
		ec = ec.SetFileID(*id)
	}
	return ec
}

// SetFile sets the "file" edge to the File entity.
func (ec *EmoteCreate) SetFile(f *File) *EmoteCreate {
	return ec.SetFileID(f.ID)
}

// Mutation returns the EmoteMutation object of the builder.
func (ec *EmoteCreate) Mutation() *EmoteMutation {
	return ec.mutation
}

// Save creates the Emote in the database.
func (ec *EmoteCreate) Save(ctx context.Context) (*Emote, error) {
	var (
		err  error
		node *Emote
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmoteCreate) SaveX(ctx context.Context) *Emote {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmoteCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("entgen: missing required field \"name\"")}
	}
	return nil
}

func (ec *EmoteCreate) sqlSave(ctx context.Context) (*Emote, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EmoteCreate) createSpec() (*Emote, *sqlgraph.CreateSpec) {
	var (
		_node = &Emote{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emote.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: emote.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emote.FieldName,
		})
		_node.Name = value
	}
	if nodes := ec.mutation.EmotepackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emote.EmotepackTable,
			Columns: []string{emote.EmotepackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: emotepack.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.emote_pack_emote = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emote.FileTable,
			Columns: []string{emote.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmoteCreateBulk is the builder for creating many Emote entities in bulk.
type EmoteCreateBulk struct {
	config
	builders []*EmoteCreate
}

// Save creates the Emote entities in the database.
func (ecb *EmoteCreateBulk) Save(ctx context.Context) ([]*Emote, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Emote, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmoteCreateBulk) SaveX(ctx context.Context) []*Emote {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
