// Code generated by sqlc. DO NOT EDIT.
// source: foreign_sessions.sql

package queries

import (
	"context"
)

const addForeignSession = `-- name: AddForeignSession :exec
INSERT INTO Foreign_Sessions
(User_ID,
 Home_Server,
 Session,
 Expiration)
VALUES ($1, $2, $3, $4)
`

type AddForeignSessionParams struct {
	UserID     uint64 `json:"user_id"`
	HomeServer string `json:"home_server"`
	Session    string `json:"session"`
	Expiration int64  `json:"expiration"`
}

func (q *Queries) AddForeignSession(ctx context.Context, arg AddForeignSessionParams) error {
	_, err := q.exec(ctx, q.addForeignSessionStmt, addForeignSession,
		arg.UserID,
		arg.HomeServer,
		arg.Session,
		arg.Expiration,
	)
	return err
}

const expireForeignSessions = `-- name: ExpireForeignSessions :exec
DELETE
FROM Foreign_Sessions
WHERE Expiration <= $1
`

func (q *Queries) ExpireForeignSessions(ctx context.Context, expiration int64) error {
	_, err := q.exec(ctx, q.expireForeignSessionsStmt, expireForeignSessions, expiration)
	return err
}

const foreignSessionToUserID = `-- name: ForeignSessionToUserID :one
SELECT User_ID
FROM Foreign_Sessions
WHERE Session = $1
`

func (q *Queries) ForeignSessionToUserID(ctx context.Context, session string) (uint64, error) {
	row := q.queryRow(ctx, q.foreignSessionToUserIDStmt, foreignSessionToUserID, session)
	var user_id uint64
	err := row.Scan(&user_id)
	return user_id, err
}
