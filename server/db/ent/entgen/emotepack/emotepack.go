// Code generated by entc, DO NOT EDIT.

package emotepack

const (
	// Label holds the string label denoting the emotepack type in the database.
	Label = "emote_pack"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeEmote holds the string denoting the emote edge name in mutations.
	EdgeEmote = "emote"
	// Table holds the table name of the emotepack in the database.
	Table = "emote_packs"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "emote_packs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_emotepack"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "emote_packs"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_createdpacks"
	// EmoteTable is the table the holds the emote relation/edge.
	EmoteTable = "emotes"
	// EmoteInverseTable is the table name for the Emote entity.
	// It exists in this package in order to avoid circular dependency with the "emote" package.
	EmoteInverseTable = "emotes"
	// EmoteColumn is the table column denoting the emote relation/edge.
	EmoteColumn = "emote_pack_emote"
)

// Columns holds all SQL columns for emotepack fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "emote_packs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_emotepack",
	"user_createdpacks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
