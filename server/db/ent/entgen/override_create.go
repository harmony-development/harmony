// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/override"
)

// OverrideCreate is the builder for creating a Override entity.
type OverrideCreate struct {
	config
	mutation *OverrideMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (oc *OverrideCreate) SetUsername(s string) *OverrideCreate {
	oc.mutation.SetUsername(s)
	return oc
}

// SetAvatar sets the "avatar" field.
func (oc *OverrideCreate) SetAvatar(s string) *OverrideCreate {
	oc.mutation.SetAvatar(s)
	return oc
}

// SetReason sets the "reason" field.
func (oc *OverrideCreate) SetReason(i int64) *OverrideCreate {
	oc.mutation.SetReason(i)
	return oc
}

// AddMessageIDs adds the "message" edge to the Message entity by IDs.
func (oc *OverrideCreate) AddMessageIDs(ids ...uint64) *OverrideCreate {
	oc.mutation.AddMessageIDs(ids...)
	return oc
}

// AddMessage adds the "message" edges to the Message entity.
func (oc *OverrideCreate) AddMessage(m ...*Message) *OverrideCreate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return oc.AddMessageIDs(ids...)
}

// Mutation returns the OverrideMutation object of the builder.
func (oc *OverrideCreate) Mutation() *OverrideMutation {
	return oc.mutation
}

// Save creates the Override in the database.
func (oc *OverrideCreate) Save(ctx context.Context) (*Override, error) {
	var (
		err  error
		node *Override
	)
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OverrideMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OverrideCreate) SaveX(ctx context.Context) *Override {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (oc *OverrideCreate) check() error {
	if _, ok := oc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New("entgen: missing required field \"username\"")}
	}
	if _, ok := oc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New("entgen: missing required field \"avatar\"")}
	}
	if _, ok := oc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("entgen: missing required field \"reason\"")}
	}
	return nil
}

func (oc *OverrideCreate) sqlSave(ctx context.Context) (*Override, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OverrideCreate) createSpec() (*Override, *sqlgraph.CreateSpec) {
	var (
		_node = &Override{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: override.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: override.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: override.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := oc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: override.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := oc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: override.FieldReason,
		})
		_node.Reason = value
	}
	if nodes := oc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   override.MessageTable,
			Columns: override.MessagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OverrideCreateBulk is the builder for creating many Override entities in bulk.
type OverrideCreateBulk struct {
	config
	builders []*OverrideCreate
}

// Save creates the Override entities in the database.
func (ocb *OverrideCreateBulk) Save(ctx context.Context) ([]*Override, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Override, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OverrideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OverrideCreateBulk) SaveX(ctx context.Context) []*Override {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
