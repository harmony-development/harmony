// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/filemessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// FileMessageQuery is the builder for querying FileMessage entities.
type FileMessageQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.FileMessage
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FileMessageQuery builder.
func (fmq *FileMessageQuery) Where(ps ...predicate.FileMessage) *FileMessageQuery {
	fmq.predicates = append(fmq.predicates, ps...)
	return fmq
}

// Limit adds a limit step to the query.
func (fmq *FileMessageQuery) Limit(limit int) *FileMessageQuery {
	fmq.limit = &limit
	return fmq
}

// Offset adds an offset step to the query.
func (fmq *FileMessageQuery) Offset(offset int) *FileMessageQuery {
	fmq.offset = &offset
	return fmq
}

// Order adds an order step to the query.
func (fmq *FileMessageQuery) Order(o ...OrderFunc) *FileMessageQuery {
	fmq.order = append(fmq.order, o...)
	return fmq
}

// First returns the first FileMessage entity from the query.
// Returns a *NotFoundError when no FileMessage was found.
func (fmq *FileMessageQuery) First(ctx context.Context) (*FileMessage, error) {
	nodes, err := fmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{filemessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fmq *FileMessageQuery) FirstX(ctx context.Context) *FileMessage {
	node, err := fmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FileMessage ID from the query.
// Returns a *NotFoundError when no FileMessage ID was found.
func (fmq *FileMessageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{filemessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fmq *FileMessageQuery) FirstIDX(ctx context.Context) int {
	id, err := fmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FileMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one FileMessage entity is not found.
// Returns a *NotFoundError when no FileMessage entities are found.
func (fmq *FileMessageQuery) Only(ctx context.Context) (*FileMessage, error) {
	nodes, err := fmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{filemessage.Label}
	default:
		return nil, &NotSingularError{filemessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fmq *FileMessageQuery) OnlyX(ctx context.Context) *FileMessage {
	node, err := fmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FileMessage ID in the query.
// Returns a *NotSingularError when exactly one FileMessage ID is not found.
// Returns a *NotFoundError when no entities are found.
func (fmq *FileMessageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = &NotSingularError{filemessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fmq *FileMessageQuery) OnlyIDX(ctx context.Context) int {
	id, err := fmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FileMessages.
func (fmq *FileMessageQuery) All(ctx context.Context) ([]*FileMessage, error) {
	if err := fmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fmq *FileMessageQuery) AllX(ctx context.Context) []*FileMessage {
	nodes, err := fmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FileMessage IDs.
func (fmq *FileMessageQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := fmq.Select(filemessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fmq *FileMessageQuery) IDsX(ctx context.Context) []int {
	ids, err := fmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fmq *FileMessageQuery) Count(ctx context.Context) (int, error) {
	if err := fmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fmq *FileMessageQuery) CountX(ctx context.Context) int {
	count, err := fmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fmq *FileMessageQuery) Exist(ctx context.Context) (bool, error) {
	if err := fmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fmq *FileMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := fmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FileMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fmq *FileMessageQuery) Clone() *FileMessageQuery {
	if fmq == nil {
		return nil
	}
	return &FileMessageQuery{
		config:     fmq.config,
		limit:      fmq.limit,
		offset:     fmq.offset,
		order:      append([]OrderFunc{}, fmq.order...),
		predicates: append([]predicate.FileMessage{}, fmq.predicates...),
		// clone intermediate query.
		sql:  fmq.sql.Clone(),
		path: fmq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (fmq *FileMessageQuery) GroupBy(field string, fields ...string) *FileMessageGroupBy {
	group := &FileMessageGroupBy{config: fmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (fmq *FileMessageQuery) Select(field string, fields ...string) *FileMessageSelect {
	fmq.fields = append([]string{field}, fields...)
	return &FileMessageSelect{FileMessageQuery: fmq}
}

func (fmq *FileMessageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range fmq.fields {
		if !filemessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if fmq.path != nil {
		prev, err := fmq.path(ctx)
		if err != nil {
			return err
		}
		fmq.sql = prev
	}
	return nil
}

func (fmq *FileMessageQuery) sqlAll(ctx context.Context) ([]*FileMessage, error) {
	var (
		nodes = []*FileMessage{}
		_spec = fmq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &FileMessage{config: fmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("entgen: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, fmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (fmq *FileMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fmq.querySpec()
	return sqlgraph.CountNodes(ctx, fmq.driver, _spec)
}

func (fmq *FileMessageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := fmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("entgen: check existence: %w", err)
	}
	return n > 0, nil
}

func (fmq *FileMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filemessage.Table,
			Columns: filemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filemessage.FieldID,
			},
		},
		From:   fmq.sql,
		Unique: true,
	}
	if fields := fmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filemessage.FieldID)
		for i := range fields {
			if fields[i] != filemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, filemessage.ValidColumn)
			}
		}
	}
	return _spec
}

func (fmq *FileMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fmq.driver.Dialect())
	t1 := builder.Table(filemessage.Table)
	selector := builder.Select(t1.Columns(filemessage.Columns...)...).From(t1)
	if fmq.sql != nil {
		selector = fmq.sql
		selector.Select(selector.Columns(filemessage.Columns...)...)
	}
	for _, p := range fmq.predicates {
		p(selector)
	}
	for _, p := range fmq.order {
		p(selector, filemessage.ValidColumn)
	}
	if offset := fmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FileMessageGroupBy is the group-by builder for FileMessage entities.
type FileMessageGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fmgb *FileMessageGroupBy) Aggregate(fns ...AggregateFunc) *FileMessageGroupBy {
	fmgb.fns = append(fmgb.fns, fns...)
	return fmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (fmgb *FileMessageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := fmgb.path(ctx)
	if err != nil {
		return err
	}
	fmgb.sql = query
	return fmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := fmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(fmgb.fields) > 1 {
		return nil, errors.New("entgen: FileMessageGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := fmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) StringsX(ctx context.Context) []string {
	v, err := fmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) StringX(ctx context.Context) string {
	v, err := fmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(fmgb.fields) > 1 {
		return nil, errors.New("entgen: FileMessageGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := fmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) IntsX(ctx context.Context) []int {
	v, err := fmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) IntX(ctx context.Context) int {
	v, err := fmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(fmgb.fields) > 1 {
		return nil, errors.New("entgen: FileMessageGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := fmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := fmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) Float64X(ctx context.Context) float64 {
	v, err := fmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(fmgb.fields) > 1 {
		return nil, errors.New("entgen: FileMessageGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := fmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := fmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (fmgb *FileMessageGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fmgb *FileMessageGroupBy) BoolX(ctx context.Context) bool {
	v, err := fmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fmgb *FileMessageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range fmgb.fields {
		if !filemessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fmgb *FileMessageGroupBy) sqlQuery() *sql.Selector {
	selector := fmgb.sql
	columns := make([]string, 0, len(fmgb.fields)+len(fmgb.fns))
	columns = append(columns, fmgb.fields...)
	for _, fn := range fmgb.fns {
		columns = append(columns, fn(selector, filemessage.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(fmgb.fields...)
}

// FileMessageSelect is the builder for selecting fields of FileMessage entities.
type FileMessageSelect struct {
	*FileMessageQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (fms *FileMessageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := fms.prepareQuery(ctx); err != nil {
		return err
	}
	fms.sql = fms.FileMessageQuery.sqlQuery(ctx)
	return fms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (fms *FileMessageSelect) ScanX(ctx context.Context, v interface{}) {
	if err := fms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Strings(ctx context.Context) ([]string, error) {
	if len(fms.fields) > 1 {
		return nil, errors.New("entgen: FileMessageSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := fms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (fms *FileMessageSelect) StringsX(ctx context.Context) []string {
	v, err := fms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = fms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (fms *FileMessageSelect) StringX(ctx context.Context) string {
	v, err := fms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Ints(ctx context.Context) ([]int, error) {
	if len(fms.fields) > 1 {
		return nil, errors.New("entgen: FileMessageSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := fms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (fms *FileMessageSelect) IntsX(ctx context.Context) []int {
	v, err := fms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = fms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (fms *FileMessageSelect) IntX(ctx context.Context) int {
	v, err := fms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(fms.fields) > 1 {
		return nil, errors.New("entgen: FileMessageSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := fms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (fms *FileMessageSelect) Float64sX(ctx context.Context) []float64 {
	v, err := fms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = fms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (fms *FileMessageSelect) Float64X(ctx context.Context) float64 {
	v, err := fms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(fms.fields) > 1 {
		return nil, errors.New("entgen: FileMessageSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := fms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (fms *FileMessageSelect) BoolsX(ctx context.Context) []bool {
	v, err := fms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (fms *FileMessageSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = fms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{filemessage.Label}
	default:
		err = fmt.Errorf("entgen: FileMessageSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (fms *FileMessageSelect) BoolX(ctx context.Context) bool {
	v, err := fms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fms *FileMessageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := fms.sqlQuery().Query()
	if err := fms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fms *FileMessageSelect) sqlQuery() sql.Querier {
	selector := fms.sql
	selector.Select(selector.Columns(fms.fields...)...)
	return selector
}
