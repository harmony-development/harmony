// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/permissionnode"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/role"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where adds a new predicate for the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetColor sets the "color" field.
func (ru *RoleUpdate) SetColor(i int) *RoleUpdate {
	ru.mutation.ResetColor()
	ru.mutation.SetColor(i)
	return ru
}

// AddColor adds i to the "color" field.
func (ru *RoleUpdate) AddColor(i int) *RoleUpdate {
	ru.mutation.AddColor(i)
	return ru
}

// SetHoist sets the "hoist" field.
func (ru *RoleUpdate) SetHoist(b bool) *RoleUpdate {
	ru.mutation.SetHoist(b)
	return ru
}

// SetPingable sets the "pingable" field.
func (ru *RoleUpdate) SetPingable(b bool) *RoleUpdate {
	ru.mutation.SetPingable(b)
	return ru
}

// SetPosition sets the "position" field.
func (ru *RoleUpdate) SetPosition(s string) *RoleUpdate {
	ru.mutation.SetPosition(s)
	return ru
}

// AddGuildIDs adds the "guild" edge to the Guild entity by IDs.
func (ru *RoleUpdate) AddGuildIDs(ids ...uint64) *RoleUpdate {
	ru.mutation.AddGuildIDs(ids...)
	return ru
}

// AddGuild adds the "guild" edges to the Guild entity.
func (ru *RoleUpdate) AddGuild(g ...*Guild) *RoleUpdate {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.AddGuildIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (ru *RoleUpdate) AddMemberIDs(ids ...uint64) *RoleUpdate {
	ru.mutation.AddMemberIDs(ids...)
	return ru
}

// AddMembers adds the "members" edges to the User entity.
func (ru *RoleUpdate) AddMembers(u ...*User) *RoleUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddMemberIDs(ids...)
}

// AddPermissionNodeIDs adds the "permission_node" edge to the PermissionNode entity by IDs.
func (ru *RoleUpdate) AddPermissionNodeIDs(ids ...int) *RoleUpdate {
	ru.mutation.AddPermissionNodeIDs(ids...)
	return ru
}

// AddPermissionNode adds the "permission_node" edges to the PermissionNode entity.
func (ru *RoleUpdate) AddPermissionNode(p ...*PermissionNode) *RoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPermissionNodeIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// ClearGuild clears all "guild" edges to the Guild entity.
func (ru *RoleUpdate) ClearGuild() *RoleUpdate {
	ru.mutation.ClearGuild()
	return ru
}

// RemoveGuildIDs removes the "guild" edge to Guild entities by IDs.
func (ru *RoleUpdate) RemoveGuildIDs(ids ...uint64) *RoleUpdate {
	ru.mutation.RemoveGuildIDs(ids...)
	return ru
}

// RemoveGuild removes "guild" edges to Guild entities.
func (ru *RoleUpdate) RemoveGuild(g ...*Guild) *RoleUpdate {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.RemoveGuildIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (ru *RoleUpdate) ClearMembers() *RoleUpdate {
	ru.mutation.ClearMembers()
	return ru
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (ru *RoleUpdate) RemoveMemberIDs(ids ...uint64) *RoleUpdate {
	ru.mutation.RemoveMemberIDs(ids...)
	return ru
}

// RemoveMembers removes "members" edges to User entities.
func (ru *RoleUpdate) RemoveMembers(u ...*User) *RoleUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveMemberIDs(ids...)
}

// ClearPermissionNode clears all "permission_node" edges to the PermissionNode entity.
func (ru *RoleUpdate) ClearPermissionNode() *RoleUpdate {
	ru.mutation.ClearPermissionNode()
	return ru
}

// RemovePermissionNodeIDs removes the "permission_node" edge to PermissionNode entities by IDs.
func (ru *RoleUpdate) RemovePermissionNodeIDs(ids ...int) *RoleUpdate {
	ru.mutation.RemovePermissionNodeIDs(ids...)
	return ru
}

// RemovePermissionNode removes "permission_node" edges to PermissionNode entities.
func (ru *RoleUpdate) RemovePermissionNode(p ...*PermissionNode) *RoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePermissionNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: role.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldName,
		})
	}
	if value, ok := ru.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: role.FieldColor,
		})
	}
	if value, ok := ru.mutation.AddedColor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: role.FieldColor,
		})
	}
	if value, ok := ru.mutation.Hoist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: role.FieldHoist,
		})
	}
	if value, ok := ru.mutation.Pingable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: role.FieldPingable,
		})
	}
	if value, ok := ru.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldPosition,
		})
	}
	if ru.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.GuildTable,
			Columns: role.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedGuildIDs(); len(nodes) > 0 && !ru.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.GuildTable,
			Columns: role.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.GuildTable,
			Columns: role.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MembersTable,
			Columns: role.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MembersTable,
			Columns: role.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MembersTable,
			Columns: role.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PermissionNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.PermissionNodeTable,
			Columns: []string{role.PermissionNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionnode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPermissionNodeIDs(); len(nodes) > 0 && !ru.mutation.PermissionNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.PermissionNodeTable,
			Columns: []string{role.PermissionNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionnode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PermissionNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.PermissionNodeTable,
			Columns: []string{role.PermissionNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionnode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetColor sets the "color" field.
func (ruo *RoleUpdateOne) SetColor(i int) *RoleUpdateOne {
	ruo.mutation.ResetColor()
	ruo.mutation.SetColor(i)
	return ruo
}

// AddColor adds i to the "color" field.
func (ruo *RoleUpdateOne) AddColor(i int) *RoleUpdateOne {
	ruo.mutation.AddColor(i)
	return ruo
}

// SetHoist sets the "hoist" field.
func (ruo *RoleUpdateOne) SetHoist(b bool) *RoleUpdateOne {
	ruo.mutation.SetHoist(b)
	return ruo
}

// SetPingable sets the "pingable" field.
func (ruo *RoleUpdateOne) SetPingable(b bool) *RoleUpdateOne {
	ruo.mutation.SetPingable(b)
	return ruo
}

// SetPosition sets the "position" field.
func (ruo *RoleUpdateOne) SetPosition(s string) *RoleUpdateOne {
	ruo.mutation.SetPosition(s)
	return ruo
}

// AddGuildIDs adds the "guild" edge to the Guild entity by IDs.
func (ruo *RoleUpdateOne) AddGuildIDs(ids ...uint64) *RoleUpdateOne {
	ruo.mutation.AddGuildIDs(ids...)
	return ruo
}

// AddGuild adds the "guild" edges to the Guild entity.
func (ruo *RoleUpdateOne) AddGuild(g ...*Guild) *RoleUpdateOne {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.AddGuildIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (ruo *RoleUpdateOne) AddMemberIDs(ids ...uint64) *RoleUpdateOne {
	ruo.mutation.AddMemberIDs(ids...)
	return ruo
}

// AddMembers adds the "members" edges to the User entity.
func (ruo *RoleUpdateOne) AddMembers(u ...*User) *RoleUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddMemberIDs(ids...)
}

// AddPermissionNodeIDs adds the "permission_node" edge to the PermissionNode entity by IDs.
func (ruo *RoleUpdateOne) AddPermissionNodeIDs(ids ...int) *RoleUpdateOne {
	ruo.mutation.AddPermissionNodeIDs(ids...)
	return ruo
}

// AddPermissionNode adds the "permission_node" edges to the PermissionNode entity.
func (ruo *RoleUpdateOne) AddPermissionNode(p ...*PermissionNode) *RoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPermissionNodeIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// ClearGuild clears all "guild" edges to the Guild entity.
func (ruo *RoleUpdateOne) ClearGuild() *RoleUpdateOne {
	ruo.mutation.ClearGuild()
	return ruo
}

// RemoveGuildIDs removes the "guild" edge to Guild entities by IDs.
func (ruo *RoleUpdateOne) RemoveGuildIDs(ids ...uint64) *RoleUpdateOne {
	ruo.mutation.RemoveGuildIDs(ids...)
	return ruo
}

// RemoveGuild removes "guild" edges to Guild entities.
func (ruo *RoleUpdateOne) RemoveGuild(g ...*Guild) *RoleUpdateOne {
	ids := make([]uint64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.RemoveGuildIDs(ids...)
}

// ClearMembers clears all "members" edges to the User entity.
func (ruo *RoleUpdateOne) ClearMembers() *RoleUpdateOne {
	ruo.mutation.ClearMembers()
	return ruo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (ruo *RoleUpdateOne) RemoveMemberIDs(ids ...uint64) *RoleUpdateOne {
	ruo.mutation.RemoveMemberIDs(ids...)
	return ruo
}

// RemoveMembers removes "members" edges to User entities.
func (ruo *RoleUpdateOne) RemoveMembers(u ...*User) *RoleUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveMemberIDs(ids...)
}

// ClearPermissionNode clears all "permission_node" edges to the PermissionNode entity.
func (ruo *RoleUpdateOne) ClearPermissionNode() *RoleUpdateOne {
	ruo.mutation.ClearPermissionNode()
	return ruo
}

// RemovePermissionNodeIDs removes the "permission_node" edge to PermissionNode entities by IDs.
func (ruo *RoleUpdateOne) RemovePermissionNodeIDs(ids ...int) *RoleUpdateOne {
	ruo.mutation.RemovePermissionNodeIDs(ids...)
	return ruo
}

// RemovePermissionNode removes "permission_node" edges to PermissionNode entities.
func (ruo *RoleUpdateOne) RemovePermissionNode(p ...*PermissionNode) *RoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePermissionNodeIDs(ids...)
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	var (
		err  error
		node *Role
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: role.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Role.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldName,
		})
	}
	if value, ok := ruo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: role.FieldColor,
		})
	}
	if value, ok := ruo.mutation.AddedColor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: role.FieldColor,
		})
	}
	if value, ok := ruo.mutation.Hoist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: role.FieldHoist,
		})
	}
	if value, ok := ruo.mutation.Pingable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: role.FieldPingable,
		})
	}
	if value, ok := ruo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: role.FieldPosition,
		})
	}
	if ruo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.GuildTable,
			Columns: role.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedGuildIDs(); len(nodes) > 0 && !ruo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.GuildTable,
			Columns: role.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.GuildTable,
			Columns: role.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MembersTable,
			Columns: role.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MembersTable,
			Columns: role.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MembersTable,
			Columns: role.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PermissionNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.PermissionNodeTable,
			Columns: []string{role.PermissionNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionnode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPermissionNodeIDs(); len(nodes) > 0 && !ruo.mutation.PermissionNodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.PermissionNodeTable,
			Columns: []string{role.PermissionNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionnode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PermissionNodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.PermissionNodeTable,
			Columns: []string{role.PermissionNodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionnode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
