// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/invite"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	hooks    []Hook
	mutation *GuildMutation
}

// Where adds a new predicate for the GuildUpdate builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.mutation.predicates = append(gu.mutation.predicates, ps...)
	return gu
}

// SetOwner sets the "owner" field.
func (gu *GuildUpdate) SetOwner(u uint64) *GuildUpdate {
	gu.mutation.ResetOwner()
	gu.mutation.SetOwner(u)
	return gu
}

// AddOwner adds u to the "owner" field.
func (gu *GuildUpdate) AddOwner(u uint64) *GuildUpdate {
	gu.mutation.AddOwner(u)
	return gu
}

// SetName sets the "name" field.
func (gu *GuildUpdate) SetName(s string) *GuildUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetPicture sets the "picture" field.
func (gu *GuildUpdate) SetPicture(s string) *GuildUpdate {
	gu.mutation.SetPicture(s)
	return gu
}

// SetMetadata sets the "metadata" field.
func (gu *GuildUpdate) SetMetadata(b []byte) *GuildUpdate {
	gu.mutation.SetMetadata(b)
	return gu
}

// AddInviteIDs adds the "invite" edge to the Invite entity by IDs.
func (gu *GuildUpdate) AddInviteIDs(ids ...int) *GuildUpdate {
	gu.mutation.AddInviteIDs(ids...)
	return gu
}

// AddInvite adds the "invite" edges to the Invite entity.
func (gu *GuildUpdate) AddInvite(i ...*Invite) *GuildUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddInviteIDs(ids...)
}

// AddBanIDs adds the "bans" edge to the User entity by IDs.
func (gu *GuildUpdate) AddBanIDs(ids ...uint64) *GuildUpdate {
	gu.mutation.AddBanIDs(ids...)
	return gu
}

// AddBans adds the "bans" edges to the User entity.
func (gu *GuildUpdate) AddBans(u ...*User) *GuildUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddBanIDs(ids...)
}

// AddChannelIDs adds the "channel" edge to the Channel entity by IDs.
func (gu *GuildUpdate) AddChannelIDs(ids ...uint64) *GuildUpdate {
	gu.mutation.AddChannelIDs(ids...)
	return gu
}

// AddChannel adds the "channel" edges to the Channel entity.
func (gu *GuildUpdate) AddChannel(c ...*Channel) *GuildUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.AddChannelIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (gu *GuildUpdate) AddUserIDs(ids ...uint64) *GuildUpdate {
	gu.mutation.AddUserIDs(ids...)
	return gu
}

// AddUser adds the "user" edges to the User entity.
func (gu *GuildUpdate) AddUser(u ...*User) *GuildUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (gu *GuildUpdate) Mutation() *GuildMutation {
	return gu.mutation
}

// ClearInvite clears all "invite" edges to the Invite entity.
func (gu *GuildUpdate) ClearInvite() *GuildUpdate {
	gu.mutation.ClearInvite()
	return gu
}

// RemoveInviteIDs removes the "invite" edge to Invite entities by IDs.
func (gu *GuildUpdate) RemoveInviteIDs(ids ...int) *GuildUpdate {
	gu.mutation.RemoveInviteIDs(ids...)
	return gu
}

// RemoveInvite removes "invite" edges to Invite entities.
func (gu *GuildUpdate) RemoveInvite(i ...*Invite) *GuildUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveInviteIDs(ids...)
}

// ClearBans clears all "bans" edges to the User entity.
func (gu *GuildUpdate) ClearBans() *GuildUpdate {
	gu.mutation.ClearBans()
	return gu
}

// RemoveBanIDs removes the "bans" edge to User entities by IDs.
func (gu *GuildUpdate) RemoveBanIDs(ids ...uint64) *GuildUpdate {
	gu.mutation.RemoveBanIDs(ids...)
	return gu
}

// RemoveBans removes "bans" edges to User entities.
func (gu *GuildUpdate) RemoveBans(u ...*User) *GuildUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveBanIDs(ids...)
}

// ClearChannel clears all "channel" edges to the Channel entity.
func (gu *GuildUpdate) ClearChannel() *GuildUpdate {
	gu.mutation.ClearChannel()
	return gu
}

// RemoveChannelIDs removes the "channel" edge to Channel entities by IDs.
func (gu *GuildUpdate) RemoveChannelIDs(ids ...uint64) *GuildUpdate {
	gu.mutation.RemoveChannelIDs(ids...)
	return gu
}

// RemoveChannel removes "channel" edges to Channel entities.
func (gu *GuildUpdate) RemoveChannel(c ...*Channel) *GuildUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gu.RemoveChannelIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (gu *GuildUpdate) ClearUser() *GuildUpdate {
	gu.mutation.ClearUser()
	return gu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (gu *GuildUpdate) RemoveUserIDs(ids ...uint64) *GuildUpdate {
	gu.mutation.RemoveUserIDs(ids...)
	return gu
}

// RemoveUser removes "user" edges to User entities.
func (gu *GuildUpdate) RemoveUser(u ...*User) *GuildUpdate {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guild.Table,
			Columns: guild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: guild.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldOwner,
		})
	}
	if value, ok := gu.mutation.AddedOwner(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldOwner,
		})
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldName,
		})
	}
	if value, ok := gu.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldPicture,
		})
	}
	if value, ok := gu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: guild.FieldMetadata,
		})
	}
	if gu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.InviteTable,
			Columns: []string{guild.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedInviteIDs(); len(nodes) > 0 && !gu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.InviteTable,
			Columns: []string{guild.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.InviteTable,
			Columns: []string{guild.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.BansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.BansTable,
			Columns: []string{guild.BansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedBansIDs(); len(nodes) > 0 && !gu.mutation.BansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.BansTable,
			Columns: []string{guild.BansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.BansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.BansTable,
			Columns: []string{guild.BansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.ChannelTable,
			Columns: []string{guild.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedChannelIDs(); len(nodes) > 0 && !gu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.ChannelTable,
			Columns: []string{guild.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.ChannelTable,
			Columns: []string{guild.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.UserTable,
			Columns: guild.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUserIDs(); len(nodes) > 0 && !gu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.UserTable,
			Columns: guild.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.UserTable,
			Columns: guild.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	hooks    []Hook
	mutation *GuildMutation
}

// SetOwner sets the "owner" field.
func (guo *GuildUpdateOne) SetOwner(u uint64) *GuildUpdateOne {
	guo.mutation.ResetOwner()
	guo.mutation.SetOwner(u)
	return guo
}

// AddOwner adds u to the "owner" field.
func (guo *GuildUpdateOne) AddOwner(u uint64) *GuildUpdateOne {
	guo.mutation.AddOwner(u)
	return guo
}

// SetName sets the "name" field.
func (guo *GuildUpdateOne) SetName(s string) *GuildUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetPicture sets the "picture" field.
func (guo *GuildUpdateOne) SetPicture(s string) *GuildUpdateOne {
	guo.mutation.SetPicture(s)
	return guo
}

// SetMetadata sets the "metadata" field.
func (guo *GuildUpdateOne) SetMetadata(b []byte) *GuildUpdateOne {
	guo.mutation.SetMetadata(b)
	return guo
}

// AddInviteIDs adds the "invite" edge to the Invite entity by IDs.
func (guo *GuildUpdateOne) AddInviteIDs(ids ...int) *GuildUpdateOne {
	guo.mutation.AddInviteIDs(ids...)
	return guo
}

// AddInvite adds the "invite" edges to the Invite entity.
func (guo *GuildUpdateOne) AddInvite(i ...*Invite) *GuildUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddInviteIDs(ids...)
}

// AddBanIDs adds the "bans" edge to the User entity by IDs.
func (guo *GuildUpdateOne) AddBanIDs(ids ...uint64) *GuildUpdateOne {
	guo.mutation.AddBanIDs(ids...)
	return guo
}

// AddBans adds the "bans" edges to the User entity.
func (guo *GuildUpdateOne) AddBans(u ...*User) *GuildUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddBanIDs(ids...)
}

// AddChannelIDs adds the "channel" edge to the Channel entity by IDs.
func (guo *GuildUpdateOne) AddChannelIDs(ids ...uint64) *GuildUpdateOne {
	guo.mutation.AddChannelIDs(ids...)
	return guo
}

// AddChannel adds the "channel" edges to the Channel entity.
func (guo *GuildUpdateOne) AddChannel(c ...*Channel) *GuildUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.AddChannelIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (guo *GuildUpdateOne) AddUserIDs(ids ...uint64) *GuildUpdateOne {
	guo.mutation.AddUserIDs(ids...)
	return guo
}

// AddUser adds the "user" edges to the User entity.
func (guo *GuildUpdateOne) AddUser(u ...*User) *GuildUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (guo *GuildUpdateOne) Mutation() *GuildMutation {
	return guo.mutation
}

// ClearInvite clears all "invite" edges to the Invite entity.
func (guo *GuildUpdateOne) ClearInvite() *GuildUpdateOne {
	guo.mutation.ClearInvite()
	return guo
}

// RemoveInviteIDs removes the "invite" edge to Invite entities by IDs.
func (guo *GuildUpdateOne) RemoveInviteIDs(ids ...int) *GuildUpdateOne {
	guo.mutation.RemoveInviteIDs(ids...)
	return guo
}

// RemoveInvite removes "invite" edges to Invite entities.
func (guo *GuildUpdateOne) RemoveInvite(i ...*Invite) *GuildUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveInviteIDs(ids...)
}

// ClearBans clears all "bans" edges to the User entity.
func (guo *GuildUpdateOne) ClearBans() *GuildUpdateOne {
	guo.mutation.ClearBans()
	return guo
}

// RemoveBanIDs removes the "bans" edge to User entities by IDs.
func (guo *GuildUpdateOne) RemoveBanIDs(ids ...uint64) *GuildUpdateOne {
	guo.mutation.RemoveBanIDs(ids...)
	return guo
}

// RemoveBans removes "bans" edges to User entities.
func (guo *GuildUpdateOne) RemoveBans(u ...*User) *GuildUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveBanIDs(ids...)
}

// ClearChannel clears all "channel" edges to the Channel entity.
func (guo *GuildUpdateOne) ClearChannel() *GuildUpdateOne {
	guo.mutation.ClearChannel()
	return guo
}

// RemoveChannelIDs removes the "channel" edge to Channel entities by IDs.
func (guo *GuildUpdateOne) RemoveChannelIDs(ids ...uint64) *GuildUpdateOne {
	guo.mutation.RemoveChannelIDs(ids...)
	return guo
}

// RemoveChannel removes "channel" edges to Channel entities.
func (guo *GuildUpdateOne) RemoveChannel(c ...*Channel) *GuildUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return guo.RemoveChannelIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (guo *GuildUpdateOne) ClearUser() *GuildUpdateOne {
	guo.mutation.ClearUser()
	return guo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (guo *GuildUpdateOne) RemoveUserIDs(ids ...uint64) *GuildUpdateOne {
	guo.mutation.RemoveUserIDs(ids...)
	return guo
}

// RemoveUser removes "user" edges to User entities.
func (guo *GuildUpdateOne) RemoveUser(u ...*User) *GuildUpdateOne {
	ids := make([]uint64, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserIDs(ids...)
}

// Save executes the query and returns the updated Guild entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	var (
		err  error
		node *Guild
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (_node *Guild, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guild.Table,
			Columns: guild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: guild.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Guild.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldOwner,
		})
	}
	if value, ok := guo.mutation.AddedOwner(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldOwner,
		})
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldName,
		})
	}
	if value, ok := guo.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldPicture,
		})
	}
	if value, ok := guo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: guild.FieldMetadata,
		})
	}
	if guo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.InviteTable,
			Columns: []string{guild.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedInviteIDs(); len(nodes) > 0 && !guo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.InviteTable,
			Columns: []string{guild.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.InviteTable,
			Columns: []string{guild.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: invite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.BansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.BansTable,
			Columns: []string{guild.BansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedBansIDs(); len(nodes) > 0 && !guo.mutation.BansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.BansTable,
			Columns: []string{guild.BansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.BansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.BansTable,
			Columns: []string{guild.BansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.ChannelTable,
			Columns: []string{guild.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedChannelIDs(); len(nodes) > 0 && !guo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.ChannelTable,
			Columns: []string{guild.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.ChannelTable,
			Columns: []string{guild.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.UserTable,
			Columns: guild.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUserIDs(); len(nodes) > 0 && !guo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.UserTable,
			Columns: guild.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.UserTable,
			Columns: guild.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guild{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
