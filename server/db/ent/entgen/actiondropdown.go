// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/actiondropdown"
)

// ActionDropdown is the model entity for the ActionDropdown schema.
type ActionDropdown struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Options holds the value of the "options" field.
	Options []string `json:"options,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionDropdown) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case actiondropdown.FieldOptions:
			values[i] = &[]byte{}
		case actiondropdown.FieldID:
			values[i] = &sql.NullInt64{}
		case actiondropdown.FieldText:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ActionDropdown", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionDropdown fields.
func (ad *ActionDropdown) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actiondropdown.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ad.ID = int(value.Int64)
		case actiondropdown.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ad.Text = value.String
			}
		case actiondropdown.FieldOptions:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ad.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ActionDropdown.
// Note that you need to call ActionDropdown.Unwrap() before calling this method if this ActionDropdown
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *ActionDropdown) Update() *ActionDropdownUpdateOne {
	return (&ActionDropdownClient{config: ad.config}).UpdateOne(ad)
}

// Unwrap unwraps the ActionDropdown entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *ActionDropdown) Unwrap() *ActionDropdown {
	tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("entgen: ActionDropdown is not a transactional entity")
	}
	ad.config.driver = tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *ActionDropdown) String() string {
	var builder strings.Builder
	builder.WriteString("ActionDropdown(")
	builder.WriteString(fmt.Sprintf("id=%v", ad.ID))
	builder.WriteString(", text=")
	builder.WriteString(ad.Text)
	builder.WriteString(", options=")
	builder.WriteString(fmt.Sprintf("%v", ad.Options))
	builder.WriteByte(')')
	return builder.String()
}

// ActionDropdowns is a parsable slice of ActionDropdown.
type ActionDropdowns []*ActionDropdown

func (ad ActionDropdowns) config(cfg config) {
	for _i := range ad {
		ad[_i].config = cfg
	}
}
