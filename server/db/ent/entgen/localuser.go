// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/localuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// LocalUser is the model entity for the LocalUser schema.
type LocalUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password []byte `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocalUserQuery when eager-loading is set.
	Edges           LocalUserEdges `json:"edges"`
	user_local_user *uint64
}

// LocalUserEdges holds the relations/edges for other nodes in the graph.
type LocalUserEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocalUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e LocalUserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LocalUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case localuser.FieldPassword:
			values[i] = new([]byte)
		case localuser.FieldID:
			values[i] = new(sql.NullInt64)
		case localuser.FieldEmail:
			values[i] = new(sql.NullString)
		case localuser.ForeignKeys[0]: // user_local_user
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LocalUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LocalUser fields.
func (lu *LocalUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case localuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lu.ID = int(value.Int64)
		case localuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				lu.Email = value.String
			}
		case localuser.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				lu.Password = *value
			}
		case localuser.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_local_user", value)
			} else if value.Valid {
				lu.user_local_user = new(uint64)
				*lu.user_local_user = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the LocalUser entity.
func (lu *LocalUser) QueryUser() *UserQuery {
	return (&LocalUserClient{config: lu.config}).QueryUser(lu)
}

// QuerySessions queries the "sessions" edge of the LocalUser entity.
func (lu *LocalUser) QuerySessions() *SessionQuery {
	return (&LocalUserClient{config: lu.config}).QuerySessions(lu)
}

// Update returns a builder for updating this LocalUser.
// Note that you need to call LocalUser.Unwrap() before calling this method if this LocalUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (lu *LocalUser) Update() *LocalUserUpdateOne {
	return (&LocalUserClient{config: lu.config}).UpdateOne(lu)
}

// Unwrap unwraps the LocalUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lu *LocalUser) Unwrap() *LocalUser {
	tx, ok := lu.config.driver.(*txDriver)
	if !ok {
		panic("entgen: LocalUser is not a transactional entity")
	}
	lu.config.driver = tx.drv
	return lu
}

// String implements the fmt.Stringer.
func (lu *LocalUser) String() string {
	var builder strings.Builder
	builder.WriteString("LocalUser(")
	builder.WriteString(fmt.Sprintf("id=%v", lu.ID))
	builder.WriteString(", email=")
	builder.WriteString(lu.Email)
	builder.WriteString(", password=")
	builder.WriteString(fmt.Sprintf("%v", lu.Password))
	builder.WriteByte(')')
	return builder.String()
}

// LocalUsers is a parsable slice of LocalUser.
type LocalUsers []*LocalUser

func (lu LocalUsers) config(cfg config) {
	for _i := range lu {
		lu[_i].config = cfg
	}
}
