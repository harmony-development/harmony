// Code generated by sqlc. DO NOT EDIT.
// source: invites.sql

package queries

import (
	"context"
	"database/sql"
)

const createGuildInvite = `-- name: CreateGuildInvite :one
INSERT INTO Invites (
    Name, Possible_Uses, Guild_ID
) VALUES (
    $1, $2, $3
)
RETURNING invite_id, name, uses, possible_uses, guild_id
`

type CreateGuildInviteParams struct {
	Name         string        `json:"name"`
	PossibleUses sql.NullInt32 `json:"possible_uses"`
	GuildID      uint64        `json:"guild_id"`
}

func (q *Queries) CreateGuildInvite(ctx context.Context, arg CreateGuildInviteParams) (Invite, error) {
	row := q.queryRow(ctx, q.createGuildInviteStmt, createGuildInvite, arg.Name, arg.PossibleUses, arg.GuildID)
	var i Invite
	err := row.Scan(
		&i.InviteID,
		&i.Name,
		&i.Uses,
		&i.PossibleUses,
		&i.GuildID,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :execrows
DELETE FROM Invites
    WHERE Invite_ID = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, inviteID uint64) (int64, error) {
	result, err := q.exec(ctx, q.deleteInviteStmt, deleteInvite, inviteID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const incrementInvite = `-- name: IncrementInvite :exec
UPDATE Invites
    SET Uses=Uses + 1
    WHERE Invite_ID = $1
`

func (q *Queries) IncrementInvite(ctx context.Context, inviteID uint64) error {
	_, err := q.exec(ctx, q.incrementInviteStmt, incrementInvite, inviteID)
	return err
}

const openInvites = `-- name: OpenInvites :many
SELECT invite_id, name, uses, possible_uses, guild_id FROM Invites
    WHERE Guild_ID = $1
    AND ( Uses < Possible_Uses OR Possible_Uses = -1)
`

func (q *Queries) OpenInvites(ctx context.Context, guildID uint64) ([]Invite, error) {
	rows, err := q.query(ctx, q.openInvitesStmt, openInvites, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.InviteID,
			&i.Name,
			&i.Uses,
			&i.PossibleUses,
			&i.GuildID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveGuildID = `-- name: ResolveGuildID :one
SELECT Guild_ID FROM Invites
    WHERE Invite_ID = $1
`

func (q *Queries) ResolveGuildID(ctx context.Context, inviteID uint64) (uint64, error) {
	row := q.queryRow(ctx, q.resolveGuildIDStmt, resolveGuildID, inviteID)
	var guild_id uint64
	err := row.Scan(&guild_id)
	return guild_id, err
}
