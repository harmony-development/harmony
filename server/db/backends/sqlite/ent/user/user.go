// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"

	// EdgeLocalUser holds the string denoting the local_user edge name in mutations.
	EdgeLocalUser = "local_user"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"

	// Table holds the table name of the user in the database.
	Table = "users"
	// LocalUserTable is the table the holds the local_user relation/edge.
	LocalUserTable = "users"
	// LocalUserInverseTable is the table name for the LocalUser entity.
	// It exists in this package in order to avoid circular dependency with the "localuser" package.
	LocalUserInverseTable = "local_users"
	// LocalUserColumn is the table column denoting the local_user relation/edge.
	LocalUserColumn = "local_user_user"
	// ProfileTable is the table the holds the profile relation/edge.
	ProfileTable = "profiles"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "user_profile"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"local_user_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
