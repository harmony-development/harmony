// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package queries

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :exec
INSERT INTO Users (User_ID, Email, Username, Avatar, Password)
VALUES ($1, $2, $3, $4, $5)
`

type AddUserParams struct {
	UserID   uint64         `json:"user_id"`
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Password []byte         `json:"password"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.exec(ctx, q.addUserStmt, addUser,
		arg.UserID,
		arg.Email,
		arg.Username,
		arg.Avatar,
		arg.Password,
	)
	return err
}

const emailExists = `-- name: EmailExists :one
SELECT User_ID
FROM Users
WHERE Email = $1
`

func (q *Queries) EmailExists(ctx context.Context, email string) (uint64, error) {
	row := q.queryRow(ctx, q.emailExistsStmt, emailExists, email)
	var user_id uint64
	err := row.Scan(&user_id)
	return user_id, err
}

const getAvatar = `-- name: GetAvatar :one
SELECT Avatar
FROM Users
WHERE User_ID = $1
`

func (q *Queries) GetAvatar(ctx context.Context, userID uint64) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getAvatarStmt, getAvatar, userID)
	var avatar sql.NullString
	err := row.Scan(&avatar)
	return avatar, err
}

const getUser = `-- name: GetUser :one
SELECT User_ID, Email, Username, Avatar, Password
FROM Users
WHERE Email = $1
`

type GetUserRow struct {
	UserID   uint64         `json:"user_id"`
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Password []byte         `json:"password"`
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, email)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.Password,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE Users
SET Username=$1
WHERE User_ID = $2
`

type UpdateUsernameParams struct {
	Username string `json:"username"`
	UserID   uint64 `json:"user_id"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.exec(ctx, q.updateUsernameStmt, updateUsername, arg.Username, arg.UserID)
	return err
}
