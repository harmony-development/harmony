// Code generated by entc, DO NOT EDIT.

package invite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Uses applies equality check predicate on the "uses" field. It's identical to UsesEQ.
func Uses(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUses), v))
	})
}

// PossibleUses applies equality check predicate on the "possible_uses" field. It's identical to PossibleUsesEQ.
func PossibleUses(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPossibleUses), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Invite {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Invite {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// UsesEQ applies the EQ predicate on the "uses" field.
func UsesEQ(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUses), v))
	})
}

// UsesNEQ applies the NEQ predicate on the "uses" field.
func UsesNEQ(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUses), v))
	})
}

// UsesIn applies the In predicate on the "uses" field.
func UsesIn(vs ...int64) predicate.Invite {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUses), v...))
	})
}

// UsesNotIn applies the NotIn predicate on the "uses" field.
func UsesNotIn(vs ...int64) predicate.Invite {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUses), v...))
	})
}

// UsesGT applies the GT predicate on the "uses" field.
func UsesGT(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUses), v))
	})
}

// UsesGTE applies the GTE predicate on the "uses" field.
func UsesGTE(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUses), v))
	})
}

// UsesLT applies the LT predicate on the "uses" field.
func UsesLT(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUses), v))
	})
}

// UsesLTE applies the LTE predicate on the "uses" field.
func UsesLTE(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUses), v))
	})
}

// PossibleUsesEQ applies the EQ predicate on the "possible_uses" field.
func PossibleUsesEQ(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPossibleUses), v))
	})
}

// PossibleUsesNEQ applies the NEQ predicate on the "possible_uses" field.
func PossibleUsesNEQ(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPossibleUses), v))
	})
}

// PossibleUsesIn applies the In predicate on the "possible_uses" field.
func PossibleUsesIn(vs ...int64) predicate.Invite {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPossibleUses), v...))
	})
}

// PossibleUsesNotIn applies the NotIn predicate on the "possible_uses" field.
func PossibleUsesNotIn(vs ...int64) predicate.Invite {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Invite(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPossibleUses), v...))
	})
}

// PossibleUsesGT applies the GT predicate on the "possible_uses" field.
func PossibleUsesGT(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPossibleUses), v))
	})
}

// PossibleUsesGTE applies the GTE predicate on the "possible_uses" field.
func PossibleUsesGTE(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPossibleUses), v))
	})
}

// PossibleUsesLT applies the LT predicate on the "possible_uses" field.
func PossibleUsesLT(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPossibleUses), v))
	})
}

// PossibleUsesLTE applies the LTE predicate on the "possible_uses" field.
func PossibleUsesLTE(v int64) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPossibleUses), v))
	})
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invite) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invite) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invite) predicate.Invite {
	return predicate.Invite(func(s *sql.Selector) {
		p(s.Not())
	})
}
