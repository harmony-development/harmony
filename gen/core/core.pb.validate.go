// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/v1/core.proto

package corev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _core_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Location) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for MessageId

	return nil
}

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

// Validate checks the field values on Override with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Override) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Avatar

	switch m.Reason.(type) {

	case *Override_UserDefined:
		// no validation rules for UserDefined

	case *Override_Webhook:

		if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OverrideValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Override_SystemPlurality:

		if v, ok := interface{}(m.GetSystemPlurality()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OverrideValidationError{
					field:  "SystemPlurality",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Override_SystemMessage:

		if v, ok := interface{}(m.GetSystemMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OverrideValidationError{
					field:  "SystemMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Override_Bridge:

		if v, ok := interface{}(m.GetBridge()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OverrideValidationError{
					field:  "Bridge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OverrideValidationError is the validation error returned by
// Override.Validate if the designated constraints aren't met.
type OverrideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverrideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverrideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverrideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverrideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverrideValidationError) ErrorName() string { return "OverrideValidationError" }

// Error satisfies the builtin error interface
func (e OverrideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverride.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverrideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverrideValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	// no validation rules for Url

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Presentation

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on EmbedHeading with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmbedHeading) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	// no validation rules for Subtext

	// no validation rules for Url

	// no validation rules for Icon

	return nil
}

// EmbedHeadingValidationError is the validation error returned by
// EmbedHeading.Validate if the designated constraints aren't met.
type EmbedHeadingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedHeadingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedHeadingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedHeadingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedHeadingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedHeadingValidationError) ErrorName() string { return "EmbedHeadingValidationError" }

// Error satisfies the builtin error interface
func (e EmbedHeadingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbedHeading.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedHeadingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedHeadingValidationError{}

// Validate checks the field values on EmbedField with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmbedField) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for Body

	// no validation rules for ImageUrl

	// no validation rules for Presentation

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmbedFieldValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EmbedFieldValidationError is the validation error returned by
// EmbedField.Validate if the designated constraints aren't met.
type EmbedFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedFieldValidationError) ErrorName() string { return "EmbedFieldValidationError" }

// Error satisfies the builtin error interface
func (e EmbedFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbedField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedFieldValidationError{}

// Validate checks the field values on Embed with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Embed) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for Color

	if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmbedValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFooter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmbedValidationError{
				field:  "Footer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmbedValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmbedValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EmbedValidationError is the validation error returned by Embed.Validate if
// the designated constraints aren't met.
type EmbedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedValidationError) ErrorName() string { return "EmbedValidationError" }

// Error satisfies the builtin error interface
func (e EmbedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AuthorId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "EditedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InReplyTo

	if v, ok := interface{}(m.GetOverrides()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Overrides",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on CreateGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildName

	// no validation rules for PictureUrl

	return nil
}

// CreateGuildRequestValidationError is the validation error returned by
// CreateGuildRequest.Validate if the designated constraints aren't met.
type CreateGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuildRequestValidationError) ErrorName() string {
	return "CreateGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuildRequestValidationError{}

// Validate checks the field values on CreateGuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGuildResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	return nil
}

// CreateGuildResponseValidationError is the validation error returned by
// CreateGuildResponse.Validate if the designated constraints aren't met.
type CreateGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuildResponseValidationError) ErrorName() string {
	return "CreateGuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuildResponseValidationError{}

// Validate checks the field values on CreateInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInviteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInviteRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for PossibleUses

	return nil
}

// CreateInviteRequestValidationError is the validation error returned by
// CreateInviteRequest.Validate if the designated constraints aren't met.
type CreateInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRequestValidationError) ErrorName() string {
	return "CreateInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRequestValidationError{}

// Validate checks the field values on CreateInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInviteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// CreateInviteResponseValidationError is the validation error returned by
// CreateInviteResponse.Validate if the designated constraints aren't met.
type CreateInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteResponseValidationError) ErrorName() string {
	return "CreateInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteResponseValidationError{}

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChannelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLocation() == nil {
		return CreateChannelRequestValidationError{
			field:  "Location",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChannelRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetChannelName()) < 1 {
		return CreateChannelRequestValidationError{
			field:  "ChannelName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for IsCategory

	// no validation rules for PreviousId

	// no validation rules for NextId

	return nil
}

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on CreateChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChannelResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelId

	return nil
}

// CreateChannelResponseValidationError is the validation error returned by
// CreateChannelResponse.Validate if the designated constraints aren't met.
type CreateChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelResponseValidationError) ErrorName() string {
	return "CreateChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelResponseValidationError{}

// Validate checks the field values on CreateEmotePackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEmotePackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackName

	return nil
}

// CreateEmotePackRequestValidationError is the validation error returned by
// CreateEmotePackRequest.Validate if the designated constraints aren't met.
type CreateEmotePackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmotePackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmotePackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmotePackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmotePackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmotePackRequestValidationError) ErrorName() string {
	return "CreateEmotePackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmotePackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmotePackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmotePackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmotePackRequestValidationError{}

// Validate checks the field values on CreateEmotePackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEmotePackResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackId

	return nil
}

// CreateEmotePackResponseValidationError is the validation error returned by
// CreateEmotePackResponse.Validate if the designated constraints aren't met.
type CreateEmotePackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmotePackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmotePackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmotePackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmotePackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmotePackResponseValidationError) ErrorName() string {
	return "CreateEmotePackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmotePackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmotePackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmotePackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmotePackResponseValidationError{}

// Validate checks the field values on GetGuildListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetGuildListRequestValidationError is the validation error returned by
// GetGuildListRequest.Validate if the designated constraints aren't met.
type GetGuildListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildListRequestValidationError) ErrorName() string {
	return "GetGuildListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildListRequestValidationError{}

// Validate checks the field values on GetGuildListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGuilds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGuildListResponseValidationError{
					field:  fmt.Sprintf("Guilds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGuildListResponseValidationError is the validation error returned by
// GetGuildListResponse.Validate if the designated constraints aren't met.
type GetGuildListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildListResponseValidationError) ErrorName() string {
	return "GetGuildListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildListResponseValidationError{}

// Validate checks the field values on GetGuildRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGuildRequestValidationError is the validation error returned by
// GetGuildRequest.Validate if the designated constraints aren't met.
type GetGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildRequestValidationError) ErrorName() string { return "GetGuildRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildRequestValidationError{}

// Validate checks the field values on GetGuildResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGuildResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildName

	// no validation rules for GuildOwner

	// no validation rules for GuildPicture

	return nil
}

// GetGuildResponseValidationError is the validation error returned by
// GetGuildResponse.Validate if the designated constraints aren't met.
type GetGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildResponseValidationError) ErrorName() string { return "GetGuildResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildResponseValidationError{}

// Validate checks the field values on GetGuildInvitesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildInvitesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildInvitesRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGuildInvitesRequestValidationError is the validation error returned by
// GetGuildInvitesRequest.Validate if the designated constraints aren't met.
type GetGuildInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInvitesRequestValidationError) ErrorName() string {
	return "GetGuildInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInvitesRequestValidationError{}

// Validate checks the field values on GetGuildInvitesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildInvitesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGuildInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGuildInvitesResponseValidationError is the validation error returned by
// GetGuildInvitesResponse.Validate if the designated constraints aren't met.
type GetGuildInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInvitesResponseValidationError) ErrorName() string {
	return "GetGuildInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInvitesResponseValidationError{}

// Validate checks the field values on GetGuildMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildMembersRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGuildMembersRequestValidationError is the validation error returned by
// GetGuildMembersRequest.Validate if the designated constraints aren't met.
type GetGuildMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildMembersRequestValidationError) ErrorName() string {
	return "GetGuildMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildMembersRequestValidationError{}

// Validate checks the field values on GetGuildMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetGuildMembersResponseValidationError is the validation error returned by
// GetGuildMembersResponse.Validate if the designated constraints aren't met.
type GetGuildMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildMembersResponseValidationError) ErrorName() string {
	return "GetGuildMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildMembersResponseValidationError{}

// Validate checks the field values on GetGuildChannelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildChannelsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildChannelsRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGuildChannelsRequestValidationError is the validation error returned by
// GetGuildChannelsRequest.Validate if the designated constraints aren't met.
type GetGuildChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsRequestValidationError) ErrorName() string {
	return "GetGuildChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsRequestValidationError{}

// Validate checks the field values on GetGuildChannelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildChannelsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGuildChannelsResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGuildChannelsResponseValidationError is the validation error returned by
// GetGuildChannelsResponse.Validate if the designated constraints aren't met.
type GetGuildChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsResponseValidationError) ErrorName() string {
	return "GetGuildChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsResponseValidationError{}

// Validate checks the field values on GetChannelMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetChannelMessagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChannelMessagesRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BeforeMessage

	return nil
}

// GetChannelMessagesRequestValidationError is the validation error returned by
// GetChannelMessagesRequest.Validate if the designated constraints aren't met.
type GetChannelMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMessagesRequestValidationError) ErrorName() string {
	return "GetChannelMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMessagesRequestValidationError{}

// Validate checks the field values on GetChannelMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetChannelMessagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChannelMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetChannelMessagesResponseValidationError is the validation error returned
// by GetChannelMessagesResponse.Validate if the designated constraints aren't met.
type GetChannelMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMessagesResponseValidationError) ErrorName() string {
	return "GetChannelMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMessagesResponseValidationError{}

// Validate checks the field values on GetMessageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessageRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMessageRequestValidationError is the validation error returned by
// GetMessageRequest.Validate if the designated constraints aren't met.
type GetMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageRequestValidationError) ErrorName() string {
	return "GetMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageRequestValidationError{}

// Validate checks the field values on GetMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMessageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMessageResponseValidationError is the validation error returned by
// GetMessageResponse.Validate if the designated constraints aren't met.
type GetMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageResponseValidationError) ErrorName() string {
	return "GetMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageResponseValidationError{}

// Validate checks the field values on GetEmotePacksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEmotePacksRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetEmotePacksRequestValidationError is the validation error returned by
// GetEmotePacksRequest.Validate if the designated constraints aren't met.
type GetEmotePacksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmotePacksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmotePacksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmotePacksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmotePacksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmotePacksRequestValidationError) ErrorName() string {
	return "GetEmotePacksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmotePacksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmotePacksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmotePacksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmotePacksRequestValidationError{}

// Validate checks the field values on GetEmotePacksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEmotePacksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPacks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmotePacksResponseValidationError{
					field:  fmt.Sprintf("Packs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEmotePacksResponseValidationError is the validation error returned by
// GetEmotePacksResponse.Validate if the designated constraints aren't met.
type GetEmotePacksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmotePacksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmotePacksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmotePacksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmotePacksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmotePacksResponseValidationError) ErrorName() string {
	return "GetEmotePacksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmotePacksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmotePacksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmotePacksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmotePacksResponseValidationError{}

// Validate checks the field values on GetEmotePackEmotesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEmotePackEmotesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackId

	return nil
}

// GetEmotePackEmotesRequestValidationError is the validation error returned by
// GetEmotePackEmotesRequest.Validate if the designated constraints aren't met.
type GetEmotePackEmotesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmotePackEmotesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmotePackEmotesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmotePackEmotesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmotePackEmotesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmotePackEmotesRequestValidationError) ErrorName() string {
	return "GetEmotePackEmotesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmotePackEmotesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmotePackEmotesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmotePackEmotesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmotePackEmotesRequestValidationError{}

// Validate checks the field values on GetEmotePackEmotesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEmotePackEmotesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEmotes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEmotePackEmotesResponseValidationError{
					field:  fmt.Sprintf("Emotes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEmotePackEmotesResponseValidationError is the validation error returned
// by GetEmotePackEmotesResponse.Validate if the designated constraints aren't met.
type GetEmotePackEmotesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmotePackEmotesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmotePackEmotesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmotePackEmotesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmotePackEmotesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmotePackEmotesResponseValidationError) ErrorName() string {
	return "GetEmotePackEmotesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmotePackEmotesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmotePackEmotesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmotePackEmotesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmotePackEmotesResponseValidationError{}

// Validate checks the field values on UpdateGuildNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGuildNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGuildNameRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewGuildName

	return nil
}

// UpdateGuildNameRequestValidationError is the validation error returned by
// UpdateGuildNameRequest.Validate if the designated constraints aren't met.
type UpdateGuildNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildNameRequestValidationError) ErrorName() string {
	return "UpdateGuildNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildNameRequestValidationError{}

// Validate checks the field values on UpdateChannelNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateChannelNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelNameRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewChannelName

	return nil
}

// UpdateChannelNameRequestValidationError is the validation error returned by
// UpdateChannelNameRequest.Validate if the designated constraints aren't met.
type UpdateChannelNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelNameRequestValidationError) ErrorName() string {
	return "UpdateChannelNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelNameRequestValidationError{}

// Validate checks the field values on UpdateChannelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateChannelOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelOrderRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PreviousId

	// no validation rules for NextId

	return nil
}

// UpdateChannelOrderRequestValidationError is the validation error returned by
// UpdateChannelOrderRequest.Validate if the designated constraints aren't met.
type UpdateChannelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelOrderRequestValidationError) ErrorName() string {
	return "UpdateChannelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelOrderRequestValidationError{}

// Validate checks the field values on UpdateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMessageRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for UpdateContent

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMessageRequestValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateEmbeds

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMessageRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateActions

	// no validation rules for UpdateAttachments

	if v, ok := interface{}(m.GetOverrides()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMessageRequestValidationError{
				field:  "Overrides",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateOverrides

	return nil
}

// UpdateMessageRequestValidationError is the validation error returned by
// UpdateMessageRequest.Validate if the designated constraints aren't met.
type UpdateMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMessageRequestValidationError) ErrorName() string {
	return "UpdateMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMessageRequestValidationError{}

// Validate checks the field values on AddEmoteToPackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddEmoteToPackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackId

	// no validation rules for ImageId

	// no validation rules for Name

	return nil
}

// AddEmoteToPackRequestValidationError is the validation error returned by
// AddEmoteToPackRequest.Validate if the designated constraints aren't met.
type AddEmoteToPackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEmoteToPackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEmoteToPackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEmoteToPackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEmoteToPackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEmoteToPackRequestValidationError) ErrorName() string {
	return "AddEmoteToPackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddEmoteToPackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEmoteToPackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEmoteToPackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEmoteToPackRequestValidationError{}

// Validate checks the field values on DeleteGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGuildRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteGuildRequestValidationError is the validation error returned by
// DeleteGuildRequest.Validate if the designated constraints aren't met.
type DeleteGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGuildRequestValidationError) ErrorName() string {
	return "DeleteGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGuildRequestValidationError{}

// Validate checks the field values on DeleteInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInviteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteInviteRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InviteId

	return nil
}

// DeleteInviteRequestValidationError is the validation error returned by
// DeleteInviteRequest.Validate if the designated constraints aren't met.
type DeleteInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInviteRequestValidationError) ErrorName() string {
	return "DeleteInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInviteRequestValidationError{}

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteChannelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteChannelRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteMessageRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteMessageRequestValidationError is the validation error returned by
// DeleteMessageRequest.Validate if the designated constraints aren't met.
type DeleteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageRequestValidationError) ErrorName() string {
	return "DeleteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageRequestValidationError{}

// Validate checks the field values on DeleteEmoteFromPackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEmoteFromPackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackId

	// no validation rules for ImageId

	return nil
}

// DeleteEmoteFromPackRequestValidationError is the validation error returned
// by DeleteEmoteFromPackRequest.Validate if the designated constraints aren't met.
type DeleteEmoteFromPackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmoteFromPackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmoteFromPackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmoteFromPackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmoteFromPackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmoteFromPackRequestValidationError) ErrorName() string {
	return "DeleteEmoteFromPackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmoteFromPackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmoteFromPackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmoteFromPackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmoteFromPackRequestValidationError{}

// Validate checks the field values on DeleteEmotePackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEmotePackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackId

	return nil
}

// DeleteEmotePackRequestValidationError is the validation error returned by
// DeleteEmotePackRequest.Validate if the designated constraints aren't met.
type DeleteEmotePackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmotePackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmotePackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmotePackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmotePackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmotePackRequestValidationError) ErrorName() string {
	return "DeleteEmotePackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmotePackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmotePackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmotePackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmotePackRequestValidationError{}

// Validate checks the field values on StreamGuildEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamGuildEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamGuildEventsRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StreamGuildEventsRequestValidationError is the validation error returned by
// StreamGuildEventsRequest.Validate if the designated constraints aren't met.
type StreamGuildEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamGuildEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamGuildEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamGuildEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamGuildEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamGuildEventsRequestValidationError) ErrorName() string {
	return "StreamGuildEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamGuildEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamGuildEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamGuildEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamGuildEventsRequestValidationError{}

// Validate checks the field values on GuildEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GuildEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *GuildEvent_SentMessage:

		if v, ok := interface{}(m.GetSentMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "SentMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_EditedMessage:

		if v, ok := interface{}(m.GetEditedMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "EditedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_DeletedMessage:

		if v, ok := interface{}(m.GetDeletedMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "DeletedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_CreatedChannel:

		if v, ok := interface{}(m.GetCreatedChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "CreatedChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_EditedChannel:

		if v, ok := interface{}(m.GetEditedChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "EditedChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_DeletedChannel:

		if v, ok := interface{}(m.GetDeletedChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "DeletedChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_EditedGuild:

		if v, ok := interface{}(m.GetEditedGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "EditedGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_DeletedGuild:

		if v, ok := interface{}(m.GetDeletedGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "DeletedGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_JoinedMember:

		if v, ok := interface{}(m.GetJoinedMember()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "JoinedMember",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GuildEvent_LeftMember:

		if v, ok := interface{}(m.GetLeftMember()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEventValidationError{
					field:  "LeftMember",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GuildEventValidationError is the validation error returned by
// GuildEvent.Validate if the designated constraints aren't met.
type GuildEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEventValidationError) ErrorName() string { return "GuildEventValidationError" }

// Error satisfies the builtin error interface
func (e GuildEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEventValidationError{}

// Validate checks the field values on HomeserverEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HomeserverEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *HomeserverEvent_GuildAddedToList_:

		if v, ok := interface{}(m.GetGuildAddedToList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeserverEventValidationError{
					field:  "GuildAddedToList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HomeserverEvent_GuildRemovedFromList_:

		if v, ok := interface{}(m.GetGuildRemovedFromList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeserverEventValidationError{
					field:  "GuildRemovedFromList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HomeserverEventValidationError is the validation error returned by
// HomeserverEvent.Validate if the designated constraints aren't met.
type HomeserverEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeserverEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeserverEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeserverEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeserverEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeserverEventValidationError) ErrorName() string { return "HomeserverEventValidationError" }

// Error satisfies the builtin error interface
func (e HomeserverEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeserverEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeserverEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeserverEventValidationError{}

// Validate checks the field values on StreamHomeserverEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamHomeserverEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StreamHomeserverEventsRequestValidationError is the validation error
// returned by StreamHomeserverEventsRequest.Validate if the designated
// constraints aren't met.
type StreamHomeserverEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamHomeserverEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamHomeserverEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamHomeserverEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamHomeserverEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamHomeserverEventsRequestValidationError) ErrorName() string {
	return "StreamHomeserverEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamHomeserverEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamHomeserverEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamHomeserverEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamHomeserverEventsRequestValidationError{}

// Validate checks the field values on StreamActionEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamActionEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StreamActionEventsRequestValidationError is the validation error returned by
// StreamActionEventsRequest.Validate if the designated constraints aren't met.
type StreamActionEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamActionEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamActionEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamActionEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamActionEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamActionEventsRequestValidationError) ErrorName() string {
	return "StreamActionEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamActionEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamActionEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamActionEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamActionEventsRequestValidationError{}

// Validate checks the field values on ActionEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ActionEvent) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *ActionEvent_Action_:

		if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionEventValidationError{
					field:  "Action",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActionEventValidationError is the validation error returned by
// ActionEvent.Validate if the designated constraints aren't met.
type ActionEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionEventValidationError) ErrorName() string { return "ActionEventValidationError" }

// Error satisfies the builtin error interface
func (e ActionEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionEventValidationError{}

// Validate checks the field values on JoinGuildRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *JoinGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InviteId

	return nil
}

// JoinGuildRequestValidationError is the validation error returned by
// JoinGuildRequest.Validate if the designated constraints aren't met.
type JoinGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGuildRequestValidationError) ErrorName() string { return "JoinGuildRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGuildRequestValidationError{}

// Validate checks the field values on JoinGuildResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *JoinGuildResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinGuildResponseValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JoinGuildResponseValidationError is the validation error returned by
// JoinGuildResponse.Validate if the designated constraints aren't met.
type JoinGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinGuildResponseValidationError) ErrorName() string {
	return "JoinGuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinGuildResponseValidationError{}

// Validate checks the field values on LeaveGuildRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LeaveGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveGuildRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LeaveGuildRequestValidationError is the validation error returned by
// LeaveGuildRequest.Validate if the designated constraints aren't met.
type LeaveGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveGuildRequestValidationError) ErrorName() string {
	return "LeaveGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveGuildRequestValidationError{}

// Validate checks the field values on TriggerActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TriggerActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerActionRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActionId

	// no validation rules for ActionData

	return nil
}

// TriggerActionRequestValidationError is the validation error returned by
// TriggerActionRequest.Validate if the designated constraints aren't met.
type TriggerActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerActionRequestValidationError) ErrorName() string {
	return "TriggerActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerActionRequestValidationError{}

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageRequestValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InReplyTo

	if v, ok := interface{}(m.GetOverrides()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Overrides",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMessageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MessageId

	return nil
}

// SendMessageResponseValidationError is the validation error returned by
// SendMessageResponse.Validate if the designated constraints aren't met.
type SendMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageResponseValidationError) ErrorName() string {
	return "SendMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageResponseValidationError{}

// Validate checks the field values on AddGuildToGuildListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddGuildToGuildListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Homeserver

	return nil
}

// AddGuildToGuildListRequestValidationError is the validation error returned
// by AddGuildToGuildListRequest.Validate if the designated constraints aren't met.
type AddGuildToGuildListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGuildToGuildListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGuildToGuildListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGuildToGuildListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGuildToGuildListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGuildToGuildListRequestValidationError) ErrorName() string {
	return "AddGuildToGuildListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGuildToGuildListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGuildToGuildListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGuildToGuildListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGuildToGuildListRequestValidationError{}

// Validate checks the field values on AddGuildToGuildListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddGuildToGuildListResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddGuildToGuildListResponseValidationError is the validation error returned
// by AddGuildToGuildListResponse.Validate if the designated constraints
// aren't met.
type AddGuildToGuildListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGuildToGuildListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGuildToGuildListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGuildToGuildListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGuildToGuildListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGuildToGuildListResponseValidationError) ErrorName() string {
	return "AddGuildToGuildListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddGuildToGuildListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGuildToGuildListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGuildToGuildListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGuildToGuildListResponseValidationError{}

// Validate checks the field values on RemoveGuildFromGuildListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveGuildFromGuildListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Homeserver

	return nil
}

// RemoveGuildFromGuildListRequestValidationError is the validation error
// returned by RemoveGuildFromGuildListRequest.Validate if the designated
// constraints aren't met.
type RemoveGuildFromGuildListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGuildFromGuildListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGuildFromGuildListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGuildFromGuildListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGuildFromGuildListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGuildFromGuildListRequestValidationError) ErrorName() string {
	return "RemoveGuildFromGuildListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGuildFromGuildListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGuildFromGuildListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGuildFromGuildListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGuildFromGuildListRequestValidationError{}

// Validate checks the field values on RemoveGuildFromGuildListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveGuildFromGuildListResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveGuildFromGuildListResponseValidationError is the validation error
// returned by RemoveGuildFromGuildListResponse.Validate if the designated
// constraints aren't met.
type RemoveGuildFromGuildListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGuildFromGuildListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGuildFromGuildListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGuildFromGuildListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGuildFromGuildListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGuildFromGuildListResponseValidationError) ErrorName() string {
	return "RemoveGuildFromGuildListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGuildFromGuildListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGuildFromGuildListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGuildFromGuildListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGuildFromGuildListResponseValidationError{}

// Validate checks the field values on GetGuildListResponse_GuildListEntry with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetGuildListResponse_GuildListEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Host

	return nil
}

// GetGuildListResponse_GuildListEntryValidationError is the validation error
// returned by GetGuildListResponse_GuildListEntry.Validate if the designated
// constraints aren't met.
type GetGuildListResponse_GuildListEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildListResponse_GuildListEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildListResponse_GuildListEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildListResponse_GuildListEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildListResponse_GuildListEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildListResponse_GuildListEntryValidationError) ErrorName() string {
	return "GetGuildListResponse_GuildListEntryValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildListResponse_GuildListEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildListResponse_GuildListEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildListResponse_GuildListEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildListResponse_GuildListEntryValidationError{}

// Validate checks the field values on GetGuildInvitesResponse_Invite with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildInvitesResponse_Invite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InviteId

	// no validation rules for PossibleUses

	// no validation rules for UseCount

	return nil
}

// GetGuildInvitesResponse_InviteValidationError is the validation error
// returned by GetGuildInvitesResponse_Invite.Validate if the designated
// constraints aren't met.
type GetGuildInvitesResponse_InviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInvitesResponse_InviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInvitesResponse_InviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInvitesResponse_InviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInvitesResponse_InviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInvitesResponse_InviteValidationError) ErrorName() string {
	return "GetGuildInvitesResponse_InviteValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInvitesResponse_InviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInvitesResponse_Invite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInvitesResponse_InviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInvitesResponse_InviteValidationError{}

// Validate checks the field values on GetGuildChannelsResponse_Channel with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetGuildChannelsResponse_Channel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelId

	// no validation rules for ChannelName

	// no validation rules for IsCategory

	// no validation rules for IsVoice

	return nil
}

// GetGuildChannelsResponse_ChannelValidationError is the validation error
// returned by GetGuildChannelsResponse_Channel.Validate if the designated
// constraints aren't met.
type GetGuildChannelsResponse_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsResponse_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsResponse_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsResponse_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsResponse_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsResponse_ChannelValidationError) ErrorName() string {
	return "GetGuildChannelsResponse_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsResponse_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsResponse_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsResponse_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsResponse_ChannelValidationError{}

// Validate checks the field values on GetEmotePacksResponse_EmotePack with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEmotePacksResponse_EmotePack) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PackId

	// no validation rules for PackOwner

	// no validation rules for PackName

	return nil
}

// GetEmotePacksResponse_EmotePackValidationError is the validation error
// returned by GetEmotePacksResponse_EmotePack.Validate if the designated
// constraints aren't met.
type GetEmotePacksResponse_EmotePackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmotePacksResponse_EmotePackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmotePacksResponse_EmotePackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmotePacksResponse_EmotePackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmotePacksResponse_EmotePackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmotePacksResponse_EmotePackValidationError) ErrorName() string {
	return "GetEmotePacksResponse_EmotePackValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmotePacksResponse_EmotePackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmotePacksResponse_EmotePack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmotePacksResponse_EmotePackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmotePacksResponse_EmotePackValidationError{}

// Validate checks the field values on GetEmotePackEmotesResponse_Emote with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetEmotePackEmotesResponse_Emote) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ImageId

	// no validation rules for Name

	return nil
}

// GetEmotePackEmotesResponse_EmoteValidationError is the validation error
// returned by GetEmotePackEmotesResponse_Emote.Validate if the designated
// constraints aren't met.
type GetEmotePackEmotesResponse_EmoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmotePackEmotesResponse_EmoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmotePackEmotesResponse_EmoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmotePackEmotesResponse_EmoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmotePackEmotesResponse_EmoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmotePackEmotesResponse_EmoteValidationError) ErrorName() string {
	return "GetEmotePackEmotesResponse_EmoteValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmotePackEmotesResponse_EmoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmotePackEmotesResponse_Emote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmotePackEmotesResponse_EmoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmotePackEmotesResponse_EmoteValidationError{}

// Validate checks the field values on GuildEvent_MessageSent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_MessageSent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_MessageSentValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GuildEvent_MessageSentValidationError is the validation error returned by
// GuildEvent_MessageSent.Validate if the designated constraints aren't met.
type GuildEvent_MessageSentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_MessageSentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_MessageSentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_MessageSentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_MessageSentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_MessageSentValidationError) ErrorName() string {
	return "GuildEvent_MessageSentValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_MessageSentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_MessageSent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_MessageSentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_MessageSentValidationError{}

// Validate checks the field values on GuildEvent_MessageUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_MessageUpdated) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_MessageUpdatedValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_MessageUpdatedValidationError{
				field:  "EditedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for UpdateContent

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEvent_MessageUpdatedValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateEmbeds

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GuildEvent_MessageUpdatedValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateActions

	// no validation rules for UpdateAttachments

	if v, ok := interface{}(m.GetOverrides()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_MessageUpdatedValidationError{
				field:  "Overrides",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateOverrides

	return nil
}

// GuildEvent_MessageUpdatedValidationError is the validation error returned by
// GuildEvent_MessageUpdated.Validate if the designated constraints aren't met.
type GuildEvent_MessageUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_MessageUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_MessageUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_MessageUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_MessageUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_MessageUpdatedValidationError) ErrorName() string {
	return "GuildEvent_MessageUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_MessageUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_MessageUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_MessageUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_MessageUpdatedValidationError{}

// Validate checks the field values on GuildEvent_MessageDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_MessageDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_MessageDeletedValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GuildEvent_MessageDeletedValidationError is the validation error returned by
// GuildEvent_MessageDeleted.Validate if the designated constraints aren't met.
type GuildEvent_MessageDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_MessageDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_MessageDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_MessageDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_MessageDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_MessageDeletedValidationError) ErrorName() string {
	return "GuildEvent_MessageDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_MessageDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_MessageDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_MessageDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_MessageDeletedValidationError{}

// Validate checks the field values on GuildEvent_ChannelCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_ChannelCreated) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_ChannelCreatedValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for PreviousId

	// no validation rules for NextId

	// no validation rules for IsCategory

	return nil
}

// GuildEvent_ChannelCreatedValidationError is the validation error returned by
// GuildEvent_ChannelCreated.Validate if the designated constraints aren't met.
type GuildEvent_ChannelCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_ChannelCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_ChannelCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_ChannelCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_ChannelCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_ChannelCreatedValidationError) ErrorName() string {
	return "GuildEvent_ChannelCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_ChannelCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_ChannelCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_ChannelCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_ChannelCreatedValidationError{}

// Validate checks the field values on GuildEvent_ChannelUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_ChannelUpdated) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_ChannelUpdatedValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for UpdateName

	// no validation rules for PreviousId

	// no validation rules for NextId

	// no validation rules for UpdateOrder

	return nil
}

// GuildEvent_ChannelUpdatedValidationError is the validation error returned by
// GuildEvent_ChannelUpdated.Validate if the designated constraints aren't met.
type GuildEvent_ChannelUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_ChannelUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_ChannelUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_ChannelUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_ChannelUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_ChannelUpdatedValidationError) ErrorName() string {
	return "GuildEvent_ChannelUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_ChannelUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_ChannelUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_ChannelUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_ChannelUpdatedValidationError{}

// Validate checks the field values on GuildEvent_ChannelDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_ChannelDeleted) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GuildEvent_ChannelDeletedValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GuildEvent_ChannelDeletedValidationError is the validation error returned by
// GuildEvent_ChannelDeleted.Validate if the designated constraints aren't met.
type GuildEvent_ChannelDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_ChannelDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_ChannelDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_ChannelDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_ChannelDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_ChannelDeletedValidationError) ErrorName() string {
	return "GuildEvent_ChannelDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_ChannelDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_ChannelDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_ChannelDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_ChannelDeletedValidationError{}

// Validate checks the field values on GuildEvent_GuildUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_GuildUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for UpdateName

	return nil
}

// GuildEvent_GuildUpdatedValidationError is the validation error returned by
// GuildEvent_GuildUpdated.Validate if the designated constraints aren't met.
type GuildEvent_GuildUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_GuildUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_GuildUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_GuildUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_GuildUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_GuildUpdatedValidationError) ErrorName() string {
	return "GuildEvent_GuildUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_GuildUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_GuildUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_GuildUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_GuildUpdatedValidationError{}

// Validate checks the field values on GuildEvent_GuildDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_GuildDeleted) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GuildEvent_GuildDeletedValidationError is the validation error returned by
// GuildEvent_GuildDeleted.Validate if the designated constraints aren't met.
type GuildEvent_GuildDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_GuildDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_GuildDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_GuildDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_GuildDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_GuildDeletedValidationError) ErrorName() string {
	return "GuildEvent_GuildDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_GuildDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_GuildDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_GuildDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_GuildDeletedValidationError{}

// Validate checks the field values on GuildEvent_MemberJoined with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_MemberJoined) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MemberId

	return nil
}

// GuildEvent_MemberJoinedValidationError is the validation error returned by
// GuildEvent_MemberJoined.Validate if the designated constraints aren't met.
type GuildEvent_MemberJoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_MemberJoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_MemberJoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_MemberJoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_MemberJoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_MemberJoinedValidationError) ErrorName() string {
	return "GuildEvent_MemberJoinedValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_MemberJoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_MemberJoined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_MemberJoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_MemberJoinedValidationError{}

// Validate checks the field values on GuildEvent_MemberLeft with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GuildEvent_MemberLeft) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MemberId

	return nil
}

// GuildEvent_MemberLeftValidationError is the validation error returned by
// GuildEvent_MemberLeft.Validate if the designated constraints aren't met.
type GuildEvent_MemberLeftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildEvent_MemberLeftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildEvent_MemberLeftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildEvent_MemberLeftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildEvent_MemberLeftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildEvent_MemberLeftValidationError) ErrorName() string {
	return "GuildEvent_MemberLeftValidationError"
}

// Error satisfies the builtin error interface
func (e GuildEvent_MemberLeftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildEvent_MemberLeft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildEvent_MemberLeftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildEvent_MemberLeftValidationError{}

// Validate checks the field values on HomeserverEvent_GuildAddedToList with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *HomeserverEvent_GuildAddedToList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Homeserver

	return nil
}

// HomeserverEvent_GuildAddedToListValidationError is the validation error
// returned by HomeserverEvent_GuildAddedToList.Validate if the designated
// constraints aren't met.
type HomeserverEvent_GuildAddedToListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeserverEvent_GuildAddedToListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeserverEvent_GuildAddedToListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeserverEvent_GuildAddedToListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeserverEvent_GuildAddedToListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeserverEvent_GuildAddedToListValidationError) ErrorName() string {
	return "HomeserverEvent_GuildAddedToListValidationError"
}

// Error satisfies the builtin error interface
func (e HomeserverEvent_GuildAddedToListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeserverEvent_GuildAddedToList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeserverEvent_GuildAddedToListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeserverEvent_GuildAddedToListValidationError{}

// Validate checks the field values on HomeserverEvent_GuildRemovedFromList
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *HomeserverEvent_GuildRemovedFromList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Homeserver

	return nil
}

// HomeserverEvent_GuildRemovedFromListValidationError is the validation error
// returned by HomeserverEvent_GuildRemovedFromList.Validate if the designated
// constraints aren't met.
type HomeserverEvent_GuildRemovedFromListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeserverEvent_GuildRemovedFromListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeserverEvent_GuildRemovedFromListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeserverEvent_GuildRemovedFromListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeserverEvent_GuildRemovedFromListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeserverEvent_GuildRemovedFromListValidationError) ErrorName() string {
	return "HomeserverEvent_GuildRemovedFromListValidationError"
}

// Error satisfies the builtin error interface
func (e HomeserverEvent_GuildRemovedFromListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeserverEvent_GuildRemovedFromList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeserverEvent_GuildRemovedFromListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeserverEvent_GuildRemovedFromListValidationError{}

// Validate checks the field values on ActionEvent_Action with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActionEvent_Action) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionEvent_ActionValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActionId

	// no validation rules for ActionData

	return nil
}

// ActionEvent_ActionValidationError is the validation error returned by
// ActionEvent_Action.Validate if the designated constraints aren't met.
type ActionEvent_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionEvent_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionEvent_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionEvent_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionEvent_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionEvent_ActionValidationError) ErrorName() string {
	return "ActionEvent_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e ActionEvent_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionEvent_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionEvent_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionEvent_ActionValidationError{}
