{"version":3,"sources":["store/types.ts","store/reducers/AppReducer.ts","store/store.ts","Root/App/NavBar/styles.ts","store/actions/AppActions.ts","Root/App/NavBar/NavBar.tsx","Root/App/Chat/styles.ts","Root/App/Chat/ChatMessage/styles.ts","Root/App/Chat/ChatMessage/ChatMessage.tsx","types.ts","Root/App/Chat/ChatBox/styles.ts","Root/App/Chat/ChatBox/ChatBox.tsx","Root/App/Chat/Chat.tsx","Root/App/styles.ts","Root/App/ChangeNameDialog/ChangeNameDialog.tsx","Root/App/App.tsx","Root/Root.tsx","index.tsx"],"names":["Actions","initialState","theme","type","primary","red","secondary","deepPurple","nameDialog","name","Math","floor","random","store","createStore","state","action","INVERT_THEME","TOGGLE_NAME_DIALOG","CHANGE_NAME","payload","useStyles","makeStyles","drawerButton","marginRight","spacing","title","flexGrow","toggleChangeNameDialog","NavBar","classes","dispatch","useDispatch","AppBar","Toolbar","IconButton","edge","className","color","aria-label","Menu","Typography","variant","onClick","AccountCircle","InvertColors","container","display","overflow","flex","flexFlow","flexDirection","messageBoxContainer","paddingRight","valign","alignItems","chatBoxContainer","chatBox","messageBox","width","messageContainer","minHeight","paddingLeft","backgroundColor","inline","message","paddingTop","paddingBottom","messageLight","messageText","whiteSpace","userText","fileSection","imageUpload","height","ChatMessage","props","ListItem","index","ListItemText","component","user","Divider","files","map","data","key","src","Events","ChatBox","useState","draftMessage","setDraftMessage","inputFile","useRef","id","ref","style","onChange","event","currentTarget","length","imageReader","FileReader","readAsDataURL","addEventListener","socket","emit","author","result","Tooltip","current","click","Image","TextField","onKeyPress","preventDefault","shiftKey","target","value","selectionEnd","label","connected","multiline","rows","margin","undefined","Warning","io","Chat","messages","setMessages","setConnected","useSelector","firstRender","useEffect","on","response","prevMessages","List","navbarSpacer","mixins","toolbar","palette","ChangeNameDialog","open","draftName","setDraftName","Dialog","onClose","DialogTitle","DialogContent","e","DialogActions","Button","autoFocus","App","createMuiTheme","ThemeProvider","CssBaseline","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6164de3.chunk.js","sourcesContent":["import { Color } from \"@material-ui/core\";\n\nexport enum Actions {\n  INVERT_THEME,\n  TOGGLE_NAME_DIALOG,\n  CHANGE_NAME\n}\n\n// this is the interface which lays out the types for each state item.\nexport interface IAppState {\n  theme: {\n    type: \"dark\" | \"light\";\n    primary: Color;\n    secondary: Color;\n  };\n  nameDialog: boolean;\n  name: string;\n}\n\nexport interface IInvertTheme {\n  type: Actions.INVERT_THEME;\n}\n\nexport interface IShowChangeNameDialog {\n  type: Actions.TOGGLE_NAME_DIALOG;\n}\n\nexport interface IChangeName {\n  type: Actions.CHANGE_NAME;\n  payload: string;\n}\n\nexport type ActionTypes = IInvertTheme | IShowChangeNameDialog | IChangeName;\n","/**\n * This file is the controller for Redux.\n *\n * It handles dispatches from ../actions/AppActions.ts and returns a new state.\n *\n * The initial state is never mutated. It always returns a copy of the original state.\n */\n\nimport { Actions, ActionTypes, IAppState } from '../types';\nimport { red, deepPurple } from '@material-ui/core/colors';\n\nconst initialState: IAppState = {\n  theme: {\n    type: 'dark',\n    primary: red,\n    secondary: deepPurple\n  },\n  nameDialog: false,\n  name: `Anonymous User #${Math.floor(Math.random() * 1000)}`\n};\n\nexport default function AppReducer(state = initialState, action: ActionTypes): IAppState {\n  switch (action.type) {\n    case Actions.INVERT_THEME: {\n      return {\n        ...state,\n        theme: {\n          ...state.theme,\n          type: state.theme.type === 'dark' ? 'light' : 'dark'\n        }\n      };\n    }\n    case Actions.TOGGLE_NAME_DIALOG: {\n      return {\n        ...state,\n        nameDialog: !state.nameDialog\n      };\n    }\n    case Actions.CHANGE_NAME: {\n      return {\n        ...state,\n        name: action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { createStore } from 'redux';\nimport AppReducer from './reducers/AppReducer';\n\nexport const store = createStore(AppReducer);","import { makeStyles } from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  drawerButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n","import { Actions, IInvertTheme, IChangeName, IShowChangeNameDialog as IToggleChangeNameDialog } from '../types';\n\nexport function invertTheme(): IInvertTheme {\n  return {\n    type: Actions.INVERT_THEME\n  };\n}\n\nexport function toggleChangeNameDialog(): IToggleChangeNameDialog {\n  return {\n    type: Actions.TOGGLE_NAME_DIALOG\n  };\n}\n\nexport function changeName(payload: string): IChangeName {\n  return {\n    type: Actions.CHANGE_NAME,\n    payload\n  };\n}\n","import React from 'react';\nimport { Menu, Palette, InvertColors, AccountCircle } from '@material-ui/icons';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport { useStyles } from './styles';\nimport { useDispatch } from 'react-redux';\nimport { invertTheme, toggleChangeNameDialog } from '../../../store/actions/AppActions';\n\nexport default function NavBar() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <AppBar>\n      <Toolbar>\n        <IconButton edge='start' className={classes.drawerButton} color='inherit' aria-label='menu'>\n          <Menu />\n        </IconButton>\n        <Typography variant='h6' className={classes.title}>\n          #general\n        </Typography>\n        <IconButton onClick={() => dispatch(toggleChangeNameDialog())}>\n          <AccountCircle />\n        </IconButton>\n        <IconButton onClick={() => dispatch(invertTheme())}>\n          <InvertColors />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    display: 'flex',\n    overflow: 'auto',\n    flex: 1,\n    flexFlow: 'column',\n    flexDirection: 'column'\n  },\n  messageBoxContainer: {\n    flex: '0 0 auto',\n    display: 'flex',\n    paddingRight: theme.spacing(1)\n  },\n  valign: { display: 'flex', alignItems: 'center' },\n  chatBoxContainer: { flex: '1 1 auto', overflow: 'auto' },\n  chatBox: { flex: 1 },\n  messageBox: { width: '100%' }\n}));\n","import { makeStyles } from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  messageContainer: {\n    minHeight: '60px',\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    backgroundColor: 'rgb(240, 240, 240)'\n  },\n  inline: { display: 'inline' },\n  message: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(1)\n  },\n  messageLight: { backgroundColor: 'rgb(133, 133, 133, 0.1)' },\n  messageText: { whiteSpace: 'pre-line' },\n  userText: { marginRight: theme.spacing(1) },\n  fileSection: { width: '100%' },\n  imageUpload: { height: '200px' }\n}));\n","import React from 'react';\nimport { useStyles } from './styles';\nimport { Typography, ListItem, ListItemText, Divider } from '@material-ui/core';\n\ninterface IProps {\n  message: string;\n  user: string;\n  files: string[];\n  index: number;\n}\n\nconst ChatMessage: React.FC<IProps> = (props: IProps) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <ListItem\n        alignItems=\"flex-start\"\n        className={`${classes.message} ${\n          props.index === 0 ? classes.messageLight : ''\n        }`}\n      >\n        <ListItemText\n          primary={\n            <Typography\n              component=\"span\"\n              variant=\"body2\"\n              className={classes.userText}\n              color=\"textPrimary\"\n            >\n              {props.user}\n            </Typography>\n          }\n          secondary={\n            <Typography\n              component=\"span\"\n              variant=\"body2\"\n              className={classes.messageText}\n              color=\"textSecondary\"\n            >\n              {props.message}\n            </Typography>\n          }\n        />\n        <Divider variant=\"middle\" />\n        <div className={classes.fileSection}>\n          {props.files.map(data => {\n            return (\n              <img key={data} className={classes.imageUpload} src={data}></img>\n            );\n          })}\n        </div>\n      </ListItem>\n    </>\n  );\n};\n\nexport default ChatMessage;\n","export const Events = {\n  USERNAME_UPDATE: 'USERNAME_UPDATE',\n  MESSAGE: 'MESSAGE',\n  LOGIN: 'LOGIN',\n  DISCONNECT: 'DISCONNECT',\n  IMAGE: 'IMAGE'\n};\n\nexport interface IMessage {\n  author: string;\n  message: string;\n  files: string[];\n}\n","import { makeStyles } from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    display: 'flex',\n    overflow: 'auto',\n    flex: 1,\n    flexFlow: 'column',\n    flexDirection: 'column'\n  },\n  messageBoxContainer: {\n    flex: '0 0 auto',\n    display: 'flex',\n    paddingRight: theme.spacing(1)\n  },\n  valign: { display: 'flex', alignItems: 'center' },\n  chatBoxContainer: { flex: '1 1 auto', overflow: 'auto' },\n  chatBox: { flex: 1 },\n  messageBox: { width: '100%' }\n}));\n","import React, { useRef, useState } from 'react';\nimport { useStyles } from './styles';\nimport { Tooltip, IconButton, TextField } from '@material-ui/core';\nimport { Warning, Image } from '@material-ui/icons';\nimport { Events } from '../../../../types';\n\ninterface IProps {\n  socket: SocketIOClient.Socket;\n  connected: boolean;\n  name: string;\n}\n\nconst ChatBox: React.FC<IProps> = (props: IProps) => {\n  const classes = useStyles();\n  const [draftMessage, setDraftMessage] = useState('');\n  const inputFile = useRef<HTMLInputElement>(null);\n\n  const sendFile = (): void => {\n    if (inputFile.current) {\n      inputFile.current.click();\n    }\n  };\n\n  const onFileSelected = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    if (event.currentTarget.files && event.currentTarget.files.length > 0) {\n      const imageReader = new FileReader();\n      imageReader.readAsDataURL(event.currentTarget.files[0]);\n      imageReader.addEventListener('load', () => {\n        props.socket.emit(Events.MESSAGE, {\n          message: 'Image Upload',\n          author: props.name,\n          files: [imageReader.result]\n        });\n      });\n    }\n  };\n\n  const chatBoxKeyEvent = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ): void => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (!event.shiftKey) {\n        const message = (event.target as HTMLInputElement).value;\n        props.socket.emit(Events.MESSAGE, {\n          author: props.name,\n          message,\n          files: []\n        });\n        (event.target as HTMLInputElement).selectionEnd = 0;\n        setDraftMessage('');\n      } else {\n        setDraftMessage(draftMessage + '\\n');\n      }\n    }\n  };\n\n  return (\n    <div className={classes.messageBoxContainer}>\n      <div className={classes.valign}>\n        <input\n          type=\"file\"\n          id=\"file\"\n          ref={inputFile}\n          style={{ display: 'none' }}\n          onChange={onFileSelected}\n        />\n        <Tooltip title=\"Send Image\">\n          <IconButton onClick={sendFile}>\n            <Image />\n          </IconButton>\n        </Tooltip>\n      </div>\n      <TextField\n        onKeyPress={chatBoxKeyEvent}\n        value={draftMessage}\n        onChange={(event): void => setDraftMessage(event.target.value)}\n        className={classes.chatBox}\n        label={props.connected ? 'Send Message' : 'Currently Offline'}\n        multiline\n        rows=\"2\"\n        margin=\"normal\"\n      />\n      {!props.connected ? (\n        <div className={classes.valign}>\n          <Tooltip title=\"Currently Offline. You will not be able to send messages.\">\n            <IconButton>\n              <Warning />\n            </IconButton>\n          </Tooltip>\n        </div>\n      ) : (\n        undefined\n      )}\n    </div>\n  );\n};\n\nexport default ChatBox;\n","import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\n\nimport { useStyles } from './styles';\nimport { List } from '@material-ui/core';\nimport ChatMessage from './ChatMessage/ChatMessage';\nimport { useSelector } from 'react-redux';\nimport { IAppState } from '../../../store/types';\nimport { IMessage, Events } from '../../../types';\nimport ChatBox from './ChatBox/ChatBox';\n\nconst socket = io('http://localhost:4000');\n\nconst Chat: React.FC<{}> = () => {\n  const classes = useStyles(); // CSS styles\n\n  const [messages, setMessages] = useState<IMessage[]>([]); // array of messages to render on screen\n  const [connected, setConnected] = useState(false);\n  const name = useSelector((state: IAppState) => state.name); // the username\n  const firstRender = useRef(true); // whether it's the first render or not\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      socket.emit(Events.USERNAME_UPDATE, { name });\n    }\n  }, [name]);\n\n  useEffect(() => {\n    firstRender.current = false;\n    socket.on('connect', () => {\n      setConnected(true);\n      socket.emit(Events.LOGIN, { name });\n    });\n    socket.on('disconnect', () => {\n      setConnected(false);\n    });\n    socket.on(Events.MESSAGE, (response: IMessage) => {\n      setMessages(prevMessages => [\n        ...prevMessages,\n        {\n          author: response.author,\n          message: response.message,\n          files: response.files\n        }\n      ]);\n    });\n  }, []);\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.chatBoxContainer}>\n        <List>\n          {messages.map((message, index) => (\n            <ChatMessage\n              key={index}\n              index={index % 2}\n              user={message.author}\n              files={message.files}\n              message={message.message}\n            />\n          ))}\n        </List>\n      </div>\n      <ChatBox socket={socket} connected={connected} name={name} />\n    </div>\n  );\n};\n\nexport default Chat;\n","import { makeStyles } from '@material-ui/core';\nimport { Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n  navbarSpacer: theme.mixins.toolbar,\n  '@global': {\n    '::-webkit-scrollbar': {\n      width: '10px'\n    },\n    '::-webkit-scrollbar-track': {\n      backgroundColor: theme.palette.type === 'dark' ? 'rgb(46, 46, 46)' : 'rgb(245, 245, 245)'\n    },\n    '::-webkit-scrollbar-thumb': {\n      backgroundColor: theme.palette.type === 'dark' ? 'rgb(64, 64, 64)' : 'rgb(200, 200, 200)'\n    }\n  }\n}));\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IAppState, IShowChangeNameDialog } from '../../../store/types';\nimport {\n  toggleChangeNameDialog,\n  changeName\n} from '../../../store/actions/AppActions';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button\n} from '@material-ui/core';\n\nconst ChangeNameDialog: React.FC<{}> = () => {\n  const dispatch = useDispatch();\n  const [open, name] = useSelector((state: IAppState) => [\n    state.nameDialog,\n    state.name\n  ]);\n  const [draftName, setDraftName] = useState(name);\n\n  const setNameAndClose = (): void => {\n    dispatch(changeName(draftName));\n    dispatch(toggleChangeNameDialog());\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={(): IShowChangeNameDialog => dispatch(toggleChangeNameDialog())}\n    >\n      <DialogTitle>Change Username</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Username\"\n          value={draftName}\n          onChange={(e): void => setDraftName(e.target.value)}\n        ></TextField>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={setNameAndClose} color=\"primary\" autoFocus>\n          Apply\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ChangeNameDialog;\n","import React from 'react';\nimport NavBar from './NavBar/NavBar';\nimport Chat from './Chat/Chat';\nimport { useStyles } from './styles';\nimport { createMuiTheme, CssBaseline } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { IAppState } from '../../store/types';\nimport { ThemeProvider } from '@material-ui/styles';\nimport ChangeNameDialog from './ChangeNameDialog/ChangeNameDialog';\n\nconst App = () => {\n  const classes = useStyles();\n  const { type, primary, secondary } = useSelector((state: IAppState) => state.theme);\n  const theme = createMuiTheme({\n    palette: {\n      type,\n      primary,\n      secondary\n    }\n  });\n\n  return (\n    <div className='app-container'>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <NavBar />\n        <div className={classes.navbarSpacer} />\n        <ChangeNameDialog />\n        <Chat />\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","/**\n * This file is intended for adding things such as Redux Providers and other things.\n */\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from '../store/store';\nimport App from './App/App';\n\nconst Root: React.FC<{}> = () => {\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/root.css';\nimport Root from './Root/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}