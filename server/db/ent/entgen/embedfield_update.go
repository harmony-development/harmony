// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedaction"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// EmbedFieldUpdate is the builder for updating EmbedField entities.
type EmbedFieldUpdate struct {
	config
	hooks    []Hook
	mutation *EmbedFieldMutation
}

// Where adds a new predicate for the EmbedFieldUpdate builder.
func (efu *EmbedFieldUpdate) Where(ps ...predicate.EmbedField) *EmbedFieldUpdate {
	efu.mutation.predicates = append(efu.mutation.predicates, ps...)
	return efu
}

// SetTitle sets the "title" field.
func (efu *EmbedFieldUpdate) SetTitle(s string) *EmbedFieldUpdate {
	efu.mutation.SetTitle(s)
	return efu
}

// SetSubtitle sets the "subtitle" field.
func (efu *EmbedFieldUpdate) SetSubtitle(s string) *EmbedFieldUpdate {
	efu.mutation.SetSubtitle(s)
	return efu
}

// SetBody sets the "body" field.
func (efu *EmbedFieldUpdate) SetBody(s string) *EmbedFieldUpdate {
	efu.mutation.SetBody(s)
	return efu
}

// SetImageURL sets the "image_url" field.
func (efu *EmbedFieldUpdate) SetImageURL(s string) *EmbedFieldUpdate {
	efu.mutation.SetImageURL(s)
	return efu
}

// SetPresentation sets the "presentation" field.
func (efu *EmbedFieldUpdate) SetPresentation(i int8) *EmbedFieldUpdate {
	efu.mutation.ResetPresentation()
	efu.mutation.SetPresentation(i)
	return efu
}

// AddPresentation adds i to the "presentation" field.
func (efu *EmbedFieldUpdate) AddPresentation(i int8) *EmbedFieldUpdate {
	efu.mutation.AddPresentation(i)
	return efu
}

// AddEmbedActionIDs adds the "embed_action" edge to the EmbedAction entity by IDs.
func (efu *EmbedFieldUpdate) AddEmbedActionIDs(ids ...int) *EmbedFieldUpdate {
	efu.mutation.AddEmbedActionIDs(ids...)
	return efu
}

// AddEmbedAction adds the "embed_action" edges to the EmbedAction entity.
func (efu *EmbedFieldUpdate) AddEmbedAction(e ...*EmbedAction) *EmbedFieldUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efu.AddEmbedActionIDs(ids...)
}

// SetEmbedMessageID sets the "embed_message" edge to the EmbedMessage entity by ID.
func (efu *EmbedFieldUpdate) SetEmbedMessageID(id int) *EmbedFieldUpdate {
	efu.mutation.SetEmbedMessageID(id)
	return efu
}

// SetNillableEmbedMessageID sets the "embed_message" edge to the EmbedMessage entity by ID if the given value is not nil.
func (efu *EmbedFieldUpdate) SetNillableEmbedMessageID(id *int) *EmbedFieldUpdate {
	if id != nil {
		efu = efu.SetEmbedMessageID(*id)
	}
	return efu
}

// SetEmbedMessage sets the "embed_message" edge to the EmbedMessage entity.
func (efu *EmbedFieldUpdate) SetEmbedMessage(e *EmbedMessage) *EmbedFieldUpdate {
	return efu.SetEmbedMessageID(e.ID)
}

// Mutation returns the EmbedFieldMutation object of the builder.
func (efu *EmbedFieldUpdate) Mutation() *EmbedFieldMutation {
	return efu.mutation
}

// ClearEmbedAction clears all "embed_action" edges to the EmbedAction entity.
func (efu *EmbedFieldUpdate) ClearEmbedAction() *EmbedFieldUpdate {
	efu.mutation.ClearEmbedAction()
	return efu
}

// RemoveEmbedActionIDs removes the "embed_action" edge to EmbedAction entities by IDs.
func (efu *EmbedFieldUpdate) RemoveEmbedActionIDs(ids ...int) *EmbedFieldUpdate {
	efu.mutation.RemoveEmbedActionIDs(ids...)
	return efu
}

// RemoveEmbedAction removes "embed_action" edges to EmbedAction entities.
func (efu *EmbedFieldUpdate) RemoveEmbedAction(e ...*EmbedAction) *EmbedFieldUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efu.RemoveEmbedActionIDs(ids...)
}

// ClearEmbedMessage clears the "embed_message" edge to the EmbedMessage entity.
func (efu *EmbedFieldUpdate) ClearEmbedMessage() *EmbedFieldUpdate {
	efu.mutation.ClearEmbedMessage()
	return efu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (efu *EmbedFieldUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(efu.hooks) == 0 {
		affected, err = efu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			efu.mutation = mutation
			affected, err = efu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(efu.hooks) - 1; i >= 0; i-- {
			mut = efu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, efu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (efu *EmbedFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := efu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (efu *EmbedFieldUpdate) Exec(ctx context.Context) error {
	_, err := efu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efu *EmbedFieldUpdate) ExecX(ctx context.Context) {
	if err := efu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (efu *EmbedFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedfield.Table,
			Columns: embedfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedfield.FieldID,
			},
		},
	}
	if ps := efu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldTitle,
		})
	}
	if value, ok := efu.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldSubtitle,
		})
	}
	if value, ok := efu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldBody,
		})
	}
	if value, ok := efu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldImageURL,
		})
	}
	if value, ok := efu.mutation.Presentation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedfield.FieldPresentation,
		})
	}
	if value, ok := efu.mutation.AddedPresentation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedfield.FieldPresentation,
		})
	}
	if efu.mutation.EmbedActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedfield.EmbedActionTable,
			Columns: []string{embedfield.EmbedActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.RemovedEmbedActionIDs(); len(nodes) > 0 && !efu.mutation.EmbedActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedfield.EmbedActionTable,
			Columns: []string{embedfield.EmbedActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.EmbedActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedfield.EmbedActionTable,
			Columns: []string{embedfield.EmbedActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if efu.mutation.EmbedMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedfield.EmbedMessageTable,
			Columns: []string{embedfield.EmbedMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.EmbedMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedfield.EmbedMessageTable,
			Columns: []string{embedfield.EmbedMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, efu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedfield.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmbedFieldUpdateOne is the builder for updating a single EmbedField entity.
type EmbedFieldUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmbedFieldMutation
}

// SetTitle sets the "title" field.
func (efuo *EmbedFieldUpdateOne) SetTitle(s string) *EmbedFieldUpdateOne {
	efuo.mutation.SetTitle(s)
	return efuo
}

// SetSubtitle sets the "subtitle" field.
func (efuo *EmbedFieldUpdateOne) SetSubtitle(s string) *EmbedFieldUpdateOne {
	efuo.mutation.SetSubtitle(s)
	return efuo
}

// SetBody sets the "body" field.
func (efuo *EmbedFieldUpdateOne) SetBody(s string) *EmbedFieldUpdateOne {
	efuo.mutation.SetBody(s)
	return efuo
}

// SetImageURL sets the "image_url" field.
func (efuo *EmbedFieldUpdateOne) SetImageURL(s string) *EmbedFieldUpdateOne {
	efuo.mutation.SetImageURL(s)
	return efuo
}

// SetPresentation sets the "presentation" field.
func (efuo *EmbedFieldUpdateOne) SetPresentation(i int8) *EmbedFieldUpdateOne {
	efuo.mutation.ResetPresentation()
	efuo.mutation.SetPresentation(i)
	return efuo
}

// AddPresentation adds i to the "presentation" field.
func (efuo *EmbedFieldUpdateOne) AddPresentation(i int8) *EmbedFieldUpdateOne {
	efuo.mutation.AddPresentation(i)
	return efuo
}

// AddEmbedActionIDs adds the "embed_action" edge to the EmbedAction entity by IDs.
func (efuo *EmbedFieldUpdateOne) AddEmbedActionIDs(ids ...int) *EmbedFieldUpdateOne {
	efuo.mutation.AddEmbedActionIDs(ids...)
	return efuo
}

// AddEmbedAction adds the "embed_action" edges to the EmbedAction entity.
func (efuo *EmbedFieldUpdateOne) AddEmbedAction(e ...*EmbedAction) *EmbedFieldUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efuo.AddEmbedActionIDs(ids...)
}

// SetEmbedMessageID sets the "embed_message" edge to the EmbedMessage entity by ID.
func (efuo *EmbedFieldUpdateOne) SetEmbedMessageID(id int) *EmbedFieldUpdateOne {
	efuo.mutation.SetEmbedMessageID(id)
	return efuo
}

// SetNillableEmbedMessageID sets the "embed_message" edge to the EmbedMessage entity by ID if the given value is not nil.
func (efuo *EmbedFieldUpdateOne) SetNillableEmbedMessageID(id *int) *EmbedFieldUpdateOne {
	if id != nil {
		efuo = efuo.SetEmbedMessageID(*id)
	}
	return efuo
}

// SetEmbedMessage sets the "embed_message" edge to the EmbedMessage entity.
func (efuo *EmbedFieldUpdateOne) SetEmbedMessage(e *EmbedMessage) *EmbedFieldUpdateOne {
	return efuo.SetEmbedMessageID(e.ID)
}

// Mutation returns the EmbedFieldMutation object of the builder.
func (efuo *EmbedFieldUpdateOne) Mutation() *EmbedFieldMutation {
	return efuo.mutation
}

// ClearEmbedAction clears all "embed_action" edges to the EmbedAction entity.
func (efuo *EmbedFieldUpdateOne) ClearEmbedAction() *EmbedFieldUpdateOne {
	efuo.mutation.ClearEmbedAction()
	return efuo
}

// RemoveEmbedActionIDs removes the "embed_action" edge to EmbedAction entities by IDs.
func (efuo *EmbedFieldUpdateOne) RemoveEmbedActionIDs(ids ...int) *EmbedFieldUpdateOne {
	efuo.mutation.RemoveEmbedActionIDs(ids...)
	return efuo
}

// RemoveEmbedAction removes "embed_action" edges to EmbedAction entities.
func (efuo *EmbedFieldUpdateOne) RemoveEmbedAction(e ...*EmbedAction) *EmbedFieldUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efuo.RemoveEmbedActionIDs(ids...)
}

// ClearEmbedMessage clears the "embed_message" edge to the EmbedMessage entity.
func (efuo *EmbedFieldUpdateOne) ClearEmbedMessage() *EmbedFieldUpdateOne {
	efuo.mutation.ClearEmbedMessage()
	return efuo
}

// Save executes the query and returns the updated EmbedField entity.
func (efuo *EmbedFieldUpdateOne) Save(ctx context.Context) (*EmbedField, error) {
	var (
		err  error
		node *EmbedField
	)
	if len(efuo.hooks) == 0 {
		node, err = efuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedFieldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			efuo.mutation = mutation
			node, err = efuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(efuo.hooks) - 1; i >= 0; i-- {
			mut = efuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, efuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (efuo *EmbedFieldUpdateOne) SaveX(ctx context.Context) *EmbedField {
	node, err := efuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (efuo *EmbedFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := efuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efuo *EmbedFieldUpdateOne) ExecX(ctx context.Context) {
	if err := efuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (efuo *EmbedFieldUpdateOne) sqlSave(ctx context.Context) (_node *EmbedField, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedfield.Table,
			Columns: embedfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedfield.FieldID,
			},
		},
	}
	id, ok := efuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EmbedField.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := efuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldTitle,
		})
	}
	if value, ok := efuo.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldSubtitle,
		})
	}
	if value, ok := efuo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldBody,
		})
	}
	if value, ok := efuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedfield.FieldImageURL,
		})
	}
	if value, ok := efuo.mutation.Presentation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedfield.FieldPresentation,
		})
	}
	if value, ok := efuo.mutation.AddedPresentation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedfield.FieldPresentation,
		})
	}
	if efuo.mutation.EmbedActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedfield.EmbedActionTable,
			Columns: []string{embedfield.EmbedActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.RemovedEmbedActionIDs(); len(nodes) > 0 && !efuo.mutation.EmbedActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedfield.EmbedActionTable,
			Columns: []string{embedfield.EmbedActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.EmbedActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedfield.EmbedActionTable,
			Columns: []string{embedfield.EmbedActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if efuo.mutation.EmbedMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedfield.EmbedMessageTable,
			Columns: []string{embedfield.EmbedMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.EmbedMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   embedfield.EmbedMessageTable,
			Columns: []string{embedfield.EmbedMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmbedField{config: efuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, efuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedfield.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
