// Code generated by entc, DO NOT EDIT.

package permissionnode

const (
	// Label holds the string label denoting the permissionnode type in the database.
	Label = "permission_node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNode holds the string denoting the node field in the database.
	FieldNode = "node"
	// FieldAllow holds the string denoting the allow field in the database.
	FieldAllow = "allow"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// Table holds the table name of the permissionnode in the database.
	Table = "permission_nodes"
	// RoleTable is the table the holds the role relation/edge.
	RoleTable = "permission_nodes"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_permission_node"
	// GuildTable is the table the holds the guild relation/edge.
	GuildTable = "permission_nodes"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_permission_node"
	// ChannelTable is the table the holds the channel relation/edge.
	ChannelTable = "permission_nodes"
	// ChannelInverseTable is the table name for the Channel entity.
	// It exists in this package in order to avoid circular dependency with the "channel" package.
	ChannelInverseTable = "channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "channel_permission_node"
)

// Columns holds all SQL columns for permissionnode fields.
var Columns = []string{
	FieldID,
	FieldNode,
	FieldAllow,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "permission_nodes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"channel_permission_node",
	"guild_permission_node",
	"role_permission_node",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
