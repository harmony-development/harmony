// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/actionbutton"
	"github.com/harmony-development/legato/server/db/ent/entgen/actiondropdown"
	"github.com/harmony-development/legato/server/db/ent/entgen/actioninput"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedaction"
)

// EmbedActionCreate is the builder for creating a EmbedAction entity.
type EmbedActionCreate struct {
	config
	mutation *EmbedActionMutation
	hooks    []Hook
}

// SetActionID sets the "action_id" field.
func (eac *EmbedActionCreate) SetActionID(s string) *EmbedActionCreate {
	eac.mutation.SetActionID(s)
	return eac
}

// SetActionType sets the "action_type" field.
func (eac *EmbedActionCreate) SetActionType(i int8) *EmbedActionCreate {
	eac.mutation.SetActionType(i)
	return eac
}

// SetButtonID sets the "button" edge to the ActionButton entity by ID.
func (eac *EmbedActionCreate) SetButtonID(id int) *EmbedActionCreate {
	eac.mutation.SetButtonID(id)
	return eac
}

// SetNillableButtonID sets the "button" edge to the ActionButton entity by ID if the given value is not nil.
func (eac *EmbedActionCreate) SetNillableButtonID(id *int) *EmbedActionCreate {
	if id != nil {
		eac = eac.SetButtonID(*id)
	}
	return eac
}

// SetButton sets the "button" edge to the ActionButton entity.
func (eac *EmbedActionCreate) SetButton(a *ActionButton) *EmbedActionCreate {
	return eac.SetButtonID(a.ID)
}

// SetDropdownID sets the "dropdown" edge to the ActionDropdown entity by ID.
func (eac *EmbedActionCreate) SetDropdownID(id int) *EmbedActionCreate {
	eac.mutation.SetDropdownID(id)
	return eac
}

// SetNillableDropdownID sets the "dropdown" edge to the ActionDropdown entity by ID if the given value is not nil.
func (eac *EmbedActionCreate) SetNillableDropdownID(id *int) *EmbedActionCreate {
	if id != nil {
		eac = eac.SetDropdownID(*id)
	}
	return eac
}

// SetDropdown sets the "dropdown" edge to the ActionDropdown entity.
func (eac *EmbedActionCreate) SetDropdown(a *ActionDropdown) *EmbedActionCreate {
	return eac.SetDropdownID(a.ID)
}

// SetInputID sets the "input" edge to the ActionInput entity by ID.
func (eac *EmbedActionCreate) SetInputID(id int) *EmbedActionCreate {
	eac.mutation.SetInputID(id)
	return eac
}

// SetNillableInputID sets the "input" edge to the ActionInput entity by ID if the given value is not nil.
func (eac *EmbedActionCreate) SetNillableInputID(id *int) *EmbedActionCreate {
	if id != nil {
		eac = eac.SetInputID(*id)
	}
	return eac
}

// SetInput sets the "input" edge to the ActionInput entity.
func (eac *EmbedActionCreate) SetInput(a *ActionInput) *EmbedActionCreate {
	return eac.SetInputID(a.ID)
}

// Mutation returns the EmbedActionMutation object of the builder.
func (eac *EmbedActionCreate) Mutation() *EmbedActionMutation {
	return eac.mutation
}

// Save creates the EmbedAction in the database.
func (eac *EmbedActionCreate) Save(ctx context.Context) (*EmbedAction, error) {
	var (
		err  error
		node *EmbedAction
	)
	if len(eac.hooks) == 0 {
		if err = eac.check(); err != nil {
			return nil, err
		}
		node, err = eac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eac.check(); err != nil {
				return nil, err
			}
			eac.mutation = mutation
			node, err = eac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eac.hooks) - 1; i >= 0; i-- {
			mut = eac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EmbedActionCreate) SaveX(ctx context.Context) *EmbedAction {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (eac *EmbedActionCreate) check() error {
	if _, ok := eac.mutation.ActionID(); !ok {
		return &ValidationError{Name: "action_id", err: errors.New("entgen: missing required field \"action_id\"")}
	}
	if _, ok := eac.mutation.ActionType(); !ok {
		return &ValidationError{Name: "action_type", err: errors.New("entgen: missing required field \"action_type\"")}
	}
	return nil
}

func (eac *EmbedActionCreate) sqlSave(ctx context.Context) (*EmbedAction, error) {
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (eac *EmbedActionCreate) createSpec() (*EmbedAction, *sqlgraph.CreateSpec) {
	var (
		_node = &EmbedAction{config: eac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: embedaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedaction.FieldID,
			},
		}
	)
	if value, ok := eac.mutation.ActionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedaction.FieldActionID,
		})
		_node.ActionID = value
	}
	if value, ok := eac.mutation.ActionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: embedaction.FieldActionType,
		})
		_node.ActionType = value
	}
	if nodes := eac.mutation.ButtonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.ButtonTable,
			Columns: []string{embedaction.ButtonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actionbutton.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.embed_action_button = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.DropdownIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.DropdownTable,
			Columns: []string{embedaction.DropdownColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actiondropdown.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.embed_action_dropdown = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.InputIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   embedaction.InputTable,
			Columns: []string{embedaction.InputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: actioninput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.embed_action_input = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmbedActionCreateBulk is the builder for creating many EmbedAction entities in bulk.
type EmbedActionCreateBulk struct {
	config
	builders []*EmbedActionCreate
}

// Save creates the EmbedAction entities in the database.
func (eacb *EmbedActionCreateBulk) Save(ctx context.Context) ([]*EmbedAction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EmbedAction, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmbedActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EmbedActionCreateBulk) SaveX(ctx context.Context) []*EmbedAction {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
