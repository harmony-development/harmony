{"version":3,"sources":["types/redux.ts","Root/App/HarmonyBar/HarmonyBarStyle.ts","Root/App/HarmonyBar/HarmonyBar.tsx","Root/App/Dialog/ColorPicker.tsx","Root/App/Dialog/ThemeDialog.tsx","Root/App/AppStyle.ts","Root/App/ChatArea/ChatAreaStyle.ts","Root/App/ChatArea/Messages/Message.tsx","Root/App/ChatArea/Messages/Messages.tsx","Root/App/ChatArea/Input/Input.tsx","Root/App/ChatArea/GuildList/GuildListStyle.ts","redux/Dispatches.ts","Root/App/ChatArea/GuildList/GuildIcon.tsx","Root/App/ChatArea/GuildList/GuildList.tsx","Root/App/ChatArea/ChannelList/ChannelListStyle.ts","Root/App/ChatArea/ChannelList/ChannelList.tsx","Root/App/ChatArea/ChatArea.tsx","Root/App/Dialog/JoinGuildDialog/JoinGuild.tsx","Root/App/Dialog/GuildSettingsDialog/GuildSettingsStyle.ts","Root/App/Dialog/GuildSettingsDialog/GuildSettings.tsx","Root/App/Dialog/UserSettingsDialog/UserSettingsStyle.ts","Root/App/Dialog/UserSettingsDialog/UserSettingsDialog.tsx","Root/App/App.tsx","Root/Entry/EntryStyle.ts","Root/Entry/Login/LoginStyle.ts","Root/Entry/Login/Login.tsx","Root/Entry/Register/RegisterStyle.ts","Root/Entry/Register/Register.tsx","Root/Entry/Entry.tsx","socket/socket.ts","Root/RootStyle.ts","Root/InviteHandler/InviteHandlerStyle.tsx","Root/InviteHandler/HandleInvite.tsx","Root/Root.tsx","redux/AppReducer.ts","redux/store.ts","index.tsx"],"names":["Actions","useHarmonyBarStyles","makeStyles","theme","leftMenuBtn","marginRight","spacing","title","flexGrow","HarmonyBar","classes","dispatch","useDispatch","AppBar","position","Toolbar","IconButton","edge","color","className","Typography","variant","onClick","type","TOGGLE_THEME_DIALOG","TOGGLE_USER_SETTINGS_DIALOG","ColorPicker","state","label","style","display","ButtonBase","backgroundColor","red","width","height","setColor","undefined","orange","yellow","green","blue","indigo","ThemeDialog","useSelector","themeDialog","inputStyle","open","themeType","useState","primary","setPrimary","secondary","setSecondary","useEffect","CHANGE_PRIMARY","payload","CHANGE_SECONDARY","Dialog","onClose","DialogTitle","DialogContent","FormControl","component","FormLabel","RadioGroup","value","row","onChange","e","INVERT_THEME","FormControlLabel","control","Radio","labelPlacement","Select","ev","target","SET_INPUT_STYLE","fullWidth","MenuItem","DialogActions","Button","useAppStyles","root","flexDirection","navFill","mixins","toolbar","useChatAreaStyles","flex","guildlist","palette","grey","padding","borderRight","channellist","overflowY","guildiconroot","borderRadius","guildicon","chatArea","flexFlow","messages","overflow","input","UtcEpochToLocalDate","time","returnDate","Date","setUTCSeconds","toDateString","toLocaleTimeString","Message","props","username","harmonySocket","sendGetUser","userid","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","avatar","ListItemText","createdat","message","Messages","selectedChannel","users","messageList","useRef","current","scrollTop","scrollHeight","scrollLeft","List","innerRef","map","val","channel","key","messageid","guild","Input","connected","selectedGuild","chatInputFocus","guildID","channelID","focus","inputField","TextField","multiline","rowsMax","rows","onKeyPress","shiftKey","preventDefault","test","sendMessage","inputRef","useGuildListStyle","boxSizing","marginTop","border","selectedguildicon","light","objectFit","joinGuild","dark","SetConnected","SET_CONNECTED","SetMessages","SET_MESSAGES","SetSelectedChannel","SET_SELECTED_CHANNEL","SetChannels","SET_CHANNELS","ToggleGuildSettingsDialog","TOGGLE_GUILD_SETTINGS_DIALOG","SetInvites","invites","SET_INVITES","GuildIcon","guildList","guildsList","id","guildid","selected","SET_SELECTED_GUILD","Tooltip","guildname","placement","picture","draggable","button","leaveGuild","owner","GuildList","Object","keys","TOGGLE_JOIN_GUILD_DIALOG","useChannelListStyle","nested","paddingLeft","newChannelInput","marginLeft","Channel","channelid","setSelectedChannel","channelname","sendDeleteChannel","ChannelList","channels","actionsExpanded","setActionsExpanded","addingChannel","setAddingChannel","addChannelInput","Collapse","in","timeout","unmountOnExit","disablePadding","sendGetInvites","ListItemIcon","autoFocus","sendAddChannel","onBlur","placeholder","textAlign","ChatArea","messagesRef","ref","onKeyDown","FOCUS_CHAT_INPUT","tabIndex","JoinGuild","joinGuildDialog","joinErr","createErr","joinCodeRef","guildNameRef","Grid","container","item","xs","createGuild","useGuildSettingsStyle","guildIcon","menuEntry","clipboardbtn","GuildSettings","guildSettingsDialog","guilds","guildIconUpload","guildName","setGuildName","guildIconFile","setGuildIconFile","setGuildIcon","fullScreen","multiple","event","currentTarget","files","length","file","startsWith","size","fileReader","FileReader","readAsDataURL","addEventListener","result","click","FormData","append","axios","post","window","location","hostname","then","res","data","uploadID","sendGuildPictureUpdate","catch","toast","error","sendGuildNameUpdate","Table","TableHead","TableRow","TableCell","TableBody","scope","copy","port","info","invite","sendDeleteInvite","sendCreateInvite","useUserSettingsStyle","UserSettingsDialog","userSettingsDialog","userAvatarUpload","setUsername","App","themeDialogOpen","joinDialogOpen","guildSettingsDialogOpen","userSettingsDialogOpen","history","useHistory","getGuilds","getMessages","getChannels","conn","readyState","WebSocket","OPEN","CONNECTING","localStorage","getItem","push","events","addListener","raw","SET_GUILDS","SetGuilds","reverse","ADD_MESSAGE","warn","SET_GUILD_PICTURE","name","SET_GUILD_NAME","channelDeleted","invitesDeleted","console","log","SET_USER","removeAllListeners","useEntryStyles","form","justifyContent","useLoginStyles","paddingRight","paddingTop","paddingBottom","submitBtn","bottom","left","Login","React","err","setErr","emailRef","pwdRef","setItem","onSubmit","autoComplete","margin","CLOSED","login","useRegisterStyles","Register","usernameRef","register","Entry","tabIDX","setTabIDX","Paper","Tabs","newValue","indicatorColor","Tab","HarmonySocket","connect","emit","onmessage","unprocessed","JSON","parse","packet","this","EventEmitter","send","stringify","email","password","emitEvent","token","text","inviteCode","newname","newpicture","useRootStyles","scrollbarColor","useInviteHandlerStyle","errorRoot","errorMsg","errorBtn","InviteHandler","invitecode","useParams","errorMessage","setErrorMessage","align","previouslyDisconnected","Root","setTimeout","success","CssBaseline","exact","path","ThemedRoot","themeState","createMuiTheme","ThemeProvider","appState","persistConfig","storage","persistedReducer","persistReducer","action","store","createStore","persistor","persistStore","setupRedux","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.27757296.chunk.js","sourcesContent":["import { ITheme } from './theming';\nimport { Color } from '@material-ui/core';\n\nexport enum Actions {\n    TOGGLE_THEME_DIALOG,\n    TOGGLE_JOIN_GUILD_DIALOG,\n    TOGGLE_GUILD_SETTINGS_DIALOG,\n    TOGGLE_USER_SETTINGS_DIALOG,\n\n    INVERT_THEME,\n    CHANGE_PRIMARY,\n    CHANGE_SECONDARY,\n    SET_INPUT_STYLE,\n\n    SET_CONNECTED,\n\n    SET_GUILDS,\n    SET_SELECTED_GUILD,\n    SET_CHANNELS,\n    SET_SELECTED_CHANNEL,\n    SET_GUILD_PICTURE,\n    SET_GUILD_NAME,\n    SET_INVITES,\n    SET_USER,\n    SET_MESSAGES,\n    ADD_MESSAGE,\n\n    FOCUS_CHAT_INPUT\n}\n\ninterface IGuild {\n    guildid: string;\n    picture: string;\n    guildname: string;\n    owner: boolean;\n}\n\ninterface ISetGuildPicturePayload {\n    guild: string;\n    picture: string;\n}\n\ninterface ISetGuildNamePayload {\n    guild: string;\n    name: string;\n}\n\nexport interface IChannels {\n    [key: string]: string;\n}\n\nexport interface IMessage {\n    userid: string;\n    createdat: number;\n    guild: string;\n    channel: string;\n    message: string;\n    messageid: string;\n}\n\nexport interface IInvertTheme {\n    type: Actions.INVERT_THEME;\n}\n\nexport interface IToggleThemeDialog {\n    type: Actions.TOGGLE_THEME_DIALOG;\n}\n\nexport interface IChangePrimary {\n    type: Actions.CHANGE_PRIMARY;\n    payload: Color;\n}\n\nexport interface IChangeSecondary {\n    type: Actions.CHANGE_SECONDARY;\n    payload: Color;\n}\n\nexport interface ISetConnected {\n    type: Actions.SET_CONNECTED;\n    payload: boolean;\n}\n\nexport interface ISetGuilds {\n    type: Actions.SET_GUILDS;\n    payload: {\n        [key: string]: IGuild;\n    };\n}\n\nexport interface ISetSelectedGuild {\n    type: Actions.SET_SELECTED_GUILD;\n    payload: string;\n}\n\nexport interface IAddMessage {\n    type: Actions.ADD_MESSAGE;\n    payload: IMessage;\n}\n\nexport interface ISetMessages {\n    type: Actions.SET_MESSAGES;\n    payload: IMessage[];\n}\n\nexport interface ISetInputStyle {\n    type: Actions.SET_INPUT_STYLE;\n    payload: 'standard' | 'filled' | 'outlined';\n}\n\nexport interface ISetChannels {\n    type: Actions.SET_CHANNELS;\n    payload: {\n        [key: string]: string;\n    };\n}\n\nexport interface ISetSelectedChannel {\n    type: Actions.SET_SELECTED_CHANNEL;\n    payload: string;\n}\n\nexport interface IToggleJoinGuildDialog {\n    type: Actions.TOGGLE_JOIN_GUILD_DIALOG;\n}\n\nexport interface IToggleGuildSettingsDialog {\n    type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG;\n}\n\nexport interface ISetGuildPicture {\n    type: Actions.SET_GUILD_PICTURE;\n    payload: ISetGuildPicturePayload;\n}\n\nexport interface ISetGuildName {\n    type: Actions.SET_GUILD_NAME;\n    payload: ISetGuildNamePayload;\n}\n\nexport interface ISetInvites {\n    type: Actions.SET_INVITES;\n    payload: {\n        [key: string]: number;\n    };\n}\n\nexport interface ISetUser {\n    type: Actions.SET_USER;\n    payload: {\n        userid: string;\n        username: string;\n        avatar: string;\n    };\n}\n\nexport interface IToggleUserSettingsDialog {\n    type: Actions.TOGGLE_USER_SETTINGS_DIALOG;\n}\n\nexport interface IFocusChatInput {\n    type: Actions.FOCUS_CHAT_INPUT;\n}\n\nexport interface IState {\n    theme: ITheme;\n    themeDialog: boolean;\n    connected: boolean;\n    guildList: {\n        [key: string]: IGuild;\n    };\n    selectedGuild: string;\n    messages: IMessage[];\n    channels: {\n        [key: string]: string;\n    };\n    selectedChannel: string | undefined;\n    joinGuildDialog: boolean;\n    guildSettingsDialog: boolean;\n    invites: {\n        [key: string]: number;\n    };\n    users: {\n        [key: string]: {\n            username: string;\n            avatar: string;\n        };\n    };\n    userSettingsDialog: boolean;\n    chatInputFocus: boolean;\n}\n\nexport type Action =\n    | IInvertTheme\n    | IToggleThemeDialog\n    | IChangePrimary\n    | IChangeSecondary\n    | ISetConnected\n    | ISetGuilds\n    | ISetSelectedGuild\n    | IAddMessage\n    | ISetMessages\n    | ISetInputStyle\n    | ISetChannels\n    | ISetSelectedChannel\n    | IToggleJoinGuildDialog\n    | IToggleGuildSettingsDialog\n    | ISetGuildPicture\n    | ISetGuildName\n    | ISetInvites\n    | ISetUser\n    | IToggleUserSettingsDialog\n    | IFocusChatInput;\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useHarmonyBarStyles = makeStyles((theme: Theme) => ({\n    leftMenuBtn: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    }\n}));\n","import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport UserIcon from '@material-ui/icons/AccountCircle';\nimport { useHarmonyBarStyles } from './HarmonyBarStyle';\nimport { useDispatch } from 'react-redux';\nimport { Actions } from '../../../types/redux';\n\nexport const HarmonyBar = () => {\n    const classes = useHarmonyBarStyles();\n    const dispatch = useDispatch();\n\n    return (\n        <AppBar position='absolute'>\n            <Toolbar>\n                <IconButton edge='start' color='inherit' className={classes.leftMenuBtn}>\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant='h6' className={classes.title}>\n                    Harmony\n                </Typography>\n                <IconButton edge='end' color='inherit' onClick={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n                    <PaletteIcon />\n                </IconButton>\n                <IconButton edge='end' color='inherit' onClick={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })}>\n                    <UserIcon />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n};\n","import React from 'react';\nimport { ButtonBase, Color, Typography } from '@material-ui/core';\nimport { red, yellow, orange, blue, green, indigo } from '@material-ui/core/colors';\nimport CheckCircle from '@material-ui/icons/CheckCircle';\n\ninterface IPickerState {\n    color: Color;\n    setColor: React.Dispatch<React.SetStateAction<Color>>;\n    label: string;\n}\n\nexport const ColorPicker = (state: IPickerState) => {\n    return (\n        <div>\n            <Typography>{state.label}</Typography>\n            <div style={{ display: 'flex' }}>\n                <ButtonBase style={{ backgroundColor: red[500], width: '40px', height: '40px' }} onClick={() => state.setColor(red)}>\n                    {state.color === red ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: orange[500], width: '40px', height: '40px' }} onClick={() => state.setColor(orange)}>\n                    {state.color === orange ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: yellow[500], width: '40px', height: '40px' }} onClick={() => state.setColor(yellow)}>\n                    {state.color === yellow ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: green[500], width: '40px', height: '40px' }} onClick={() => state.setColor(green)}>\n                    {state.color === green ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: blue[500], width: '40px', height: '40px' }} onClick={() => state.setColor(blue)}>\n                    {state.color === blue ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: indigo[500], width: '40px', height: '40px' }} onClick={() => state.setColor(indigo)}>\n                    {state.color === indigo ? <CheckCircle /> : undefined}\n                </ButtonBase>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Color,\n    FormControlLabel,\n    FormControl,\n    FormLabel,\n    RadioGroup,\n    Radio,\n    Typography,\n    Select,\n    MenuItem\n} from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../types/redux';\nimport { ColorPicker } from './ColorPicker';\nimport { orange, red } from '@material-ui/core/colors';\n\nexport const ThemeDialog = () => {\n    const [open, themeType, inputStyle] = useSelector((state: IState) => [\n        state.themeDialog,\n        state.theme.type,\n        state.theme.inputStyle\n    ]);\n    const [primary, setPrimary] = useState<Color>(red);\n    const [secondary, setSecondary] = useState<Color>(orange);\n    const dispatch = useDispatch();\n\n    const changeInputStyle = (ev: React.ChangeEvent<{ value: unknown }>) => {\n        if (typeof ev.target.value === 'string') {\n            dispatch({ type: Actions.SET_INPUT_STYLE, payload: ev.target.value });\n        }\n    };\n\n    useEffect(() => {\n        dispatch({ type: Actions.CHANGE_PRIMARY, payload: primary });\n    }, [primary, dispatch]);\n    useEffect(() => {\n        dispatch({ type: Actions.CHANGE_SECONDARY, payload: secondary });\n    }, [secondary, dispatch]);\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n            <DialogTitle>Customize Theme</DialogTitle>\n            <DialogContent>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>Theme Type</FormLabel>\n                    <RadioGroup\n                        value={themeType}\n                        row\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch({ type: Actions.INVERT_THEME })}\n                    >\n                        <FormControlLabel\n                            value='light'\n                            control={<Radio color='secondary' />}\n                            label='Light'\n                            labelPlacement='end'\n                        />\n                        <FormControlLabel\n                            value='dark'\n                            control={<Radio color='secondary' />}\n                            label='Dark'\n                            labelPlacement='end'\n                        />\n                    </RadioGroup>\n                </FormControl>\n                <ColorPicker color={primary} setColor={setPrimary} label={'Primary Color'} />\n                <ColorPicker color={secondary} setColor={setSecondary} label={'Secondary Color'} />\n                <Typography>Text Input Style</Typography>\n                <Select\n                    value={inputStyle || 'standard'}\n                    onChange={changeInputStyle}\n                    variant={inputStyle as any}\n                    fullWidth\n                >\n                    <MenuItem value={'standard'}>Standard</MenuItem>\n                    <MenuItem value={'filled'}>Filled</MenuItem>\n                    <MenuItem value={'outlined'}>Outlined</MenuItem>\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button color='primary' onClick={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useAppStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n        height: '100%',\n        flexDirection: 'column'\n    },\n    leftMenuBtn: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    },\n    navFill: {\n        ...theme.mixins.toolbar\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useChatAreaStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        flexGrow: 1,\n        width: '100%',\n        height: '100%'\n    },\n    guildlist: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[200],\n        padding: theme.spacing(1),\n        borderRight: '1px solid grey'\n    },\n    channellist: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[300],\n        padding: 0,\n        width: '300px',\n        overflowY: 'auto'\n    },\n    guildiconroot: {\n        borderRadius: '64px'\n    },\n    guildicon: {\n        width: '64px',\n        height: '64px'\n    },\n    chatArea: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexFlow: 'column',\n        width: '100%',\n        height: '100%'\n    },\n    messages: {\n        width: '100%',\n        flex: '1 1 auto',\n        overflow: 'auto'\n    },\n    input: {\n        width: '100%'\n    }\n}));\n","import React, { useEffect } from 'react';\nimport { ListItem, ListItemAvatar, Avatar, ListItemText, Typography } from '@material-ui/core';\nimport { harmonySocket } from '../../../Root';\n\ninterface IProps {\n    guild: string;\n    userid: string;\n    username: string;\n    createdat: number;\n    message: string;\n    avatar?: string;\n}\n\nconst UtcEpochToLocalDate = (time: number) => {\n    const returnDate = new Date(0);\n    returnDate.setUTCSeconds(time);\n    return ` - ${returnDate.toDateString()} at ${returnDate.toLocaleTimeString()}`;\n};\n\nexport const Message = (props: IProps) => {\n    useEffect(() => {\n        if (!props.username) {\n            harmonySocket.sendGetUser(props.userid);\n        }\n    }, [props]);\n\n    return (\n        <ListItem alignItems='flex-start'>\n            <ListItemAvatar>\n                <Avatar alt={props.userid} src={props.avatar ? `http://localhost:2288/filestore/${props.avatar}` : undefined} />\n            </ListItemAvatar>\n            <ListItemText\n                primary={\n                    <>\n                        {props.username || props.userid}\n                        <Typography component='span' variant='body1' color='textSecondary'>\n                            {UtcEpochToLocalDate(props.createdat)}\n                        </Typography>\n                    </>\n                }\n                secondary={props.message}\n            />\n        </ListItem>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { List } from '@material-ui/core';\nimport { Message } from './Message';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../../types/redux';\n\nexport const Messages = () => {\n    const [messages, selectedChannel, users] = useSelector((state: IState) => [\n        state.messages,\n        state.selectedChannel,\n        state.users\n    ]);\n    const messageList = useRef<HTMLUListElement | undefined>(undefined);\n\n    useEffect(() => {\n        if (messageList.current) {\n            messageList.current.scrollTop = messageList.current.scrollHeight;\n            messageList.current.scrollLeft = 0;\n        }\n    }, [messages]);\n\n    return (\n        <List innerRef={messageList}>\n            {messages\n                ? messages.map((val) => {\n                      if (val.channel === selectedChannel) {\n                          return (\n                              <Message\n                                  key={val.messageid}\n                                  guild={val.guild}\n                                  userid={val.userid}\n                                  username={users[val.userid] ? users[val.userid].username : ''}\n                                  createdat={val.createdat}\n                                  avatar={users[val.userid] ? users[val.userid].avatar : undefined}\n                                  message={val.message}\n                              />\n                          );\n                      } else {\n                          return undefined;\n                      }\n                  })\n                : undefined}\n        </List>\n    );\n};\n","import React, { useRef, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { harmonySocket } from '../../../Root';\n\nexport const Input = () => {\n    const [connected, inputStyle, guildID, channelID, focus] = useSelector((state: IState) => [\n        state.connected,\n        state.theme.inputStyle,\n        state.selectedGuild,\n        state.selectedChannel,\n        state.chatInputFocus\n    ]);\n    const inputField = useRef<HTMLInputElement | undefined>();\n\n    const onKeyPress = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            // does the input field exist and is it not blank\n            if (inputField.current && !/^\\s*$/.test(inputField.current.value) && channelID) {\n                harmonySocket.sendMessage(guildID, channelID, inputField.current.value);\n                inputField.current.value = '';\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (inputField.current) {\n            inputField.current.focus();\n        }\n    }, [focus]);\n\n    return (\n        <div>\n            <TextField\n                label={connected ? 'Message' : 'Currently Offline'}\n                variant={inputStyle as any}\n                fullWidth\n                multiline\n                rowsMax={3}\n                rows={3}\n                onKeyPress={onKeyPress}\n                inputRef={inputField}\n                color='secondary'\n            />\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useGuildListStyle = makeStyles((theme: Theme) => ({\n    guildlist: {\n        width: '68px'\n    },\n    guildiconroot: {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        marginTop: theme.spacing(1),\n        border: `2px solid transparent`\n    },\n    selectedguildicon: {\n        border: `2px solid ${theme.palette.primary.light}`\n    },\n    guildicon: {\n        width: '64px',\n        height: '64px',\n        borderRadius: '64px',\n        objectFit: 'cover',\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[400]\n    },\n    joinGuild: {\n        marginTop: theme.spacing(1),\n        width: '64px',\n        height: '64px',\n        borderRadius: '64px',\n        backgroundColor: theme.palette.secondary.dark\n    }\n}));\n","import { Actions, IMessage, IChannels } from '../types/redux';\nimport { IGuildData } from '../types/socket';\n\n/**\n * A function that sets the connected state to a value\n * @param payload The connection state to set it to\n */\nexport function SetConnected(payload: boolean) {\n    return {\n        type: Actions.SET_CONNECTED,\n        payload\n    };\n}\n\n/**\n * A function that sets the messages (displayed in the chat area)\n * @param payload The messages to assign\n */\nexport function SetMessages(payload: IMessage[]) {\n    return {\n        type: Actions.SET_MESSAGES,\n        payload\n    };\n}\n\nexport function AddMessage(payload: IMessage) {\n    return {\n        type: Actions.ADD_MESSAGE,\n        payload\n    };\n}\n\n/**\n * A function that sets the selected channel. Used for the channel list\n * @param payload What to set the selected channel to\n */\nexport function SetSelectedChannel(payload: string | undefined) {\n    return {\n        type: Actions.SET_SELECTED_CHANNEL,\n        payload\n    };\n}\n\n/**\n * A function that sets the selected guild. Used for the guild list\n * @param payload The guild ID to set the selection to\n */\nexport function SetSelectedGuild(payload: string | undefined) {\n    return {\n        type: Actions.SET_SELECTED_GUILD,\n        payload\n    };\n}\n\nexport function SetChannels(payload: IChannels) {\n    return {\n        type: Actions.SET_CHANNELS,\n        payload\n    };\n}\n\nexport function SetGuilds(payload: IGuildData[]) {\n    return {\n        type: Actions.SET_GUILDS,\n        payload\n    };\n}\n\nexport function ToggleThemeDialog() {\n    return {\n        type: Actions.TOGGLE_THEME_DIALOG\n    };\n}\n\nexport function ToggleGuildDialog() {\n    return {\n        type: Actions.TOGGLE_JOIN_GUILD_DIALOG\n    };\n}\n\nexport function ToggleGuildSettingsDialog() {\n    return {\n        type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG\n    };\n}\n\nexport function SetGuildPicture(guild: string, picture: string) {\n    return {\n        type: Actions.SET_GUILD_PICTURE,\n        payload: {\n            guild,\n            picture\n        }\n    };\n}\n\nexport function SetGuildName(guild: string, name: string) {\n    return {\n        type: Actions.SET_GUILD_NAME,\n        payload: {\n            guild,\n            name\n        }\n    };\n}\n\ninterface IInvites {\n    [key: string]: number;\n}\n\nexport function SetInvites(invites: IInvites) {\n    return {\n        type: Actions.SET_INVITES,\n        payload: invites\n    };\n}\n\nexport function SetUser(userid: string, username: string, avatar: string) {\n    return {\n        type: Actions.SET_USER,\n        payload: {\n            userid,\n            username,\n            avatar\n        }\n    };\n}\n\nexport function FocusChatInput() {\n    return {\n        type: Actions.FOCUS_CHAT_INPUT\n    };\n}\n","import React from 'react';\nimport { ButtonBase, Tooltip, List, ListItem, ListItemText } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Actions, IState } from '../../../../types/redux';\nimport { useGuildListStyle } from './GuildListStyle';\nimport { ContextMenuTrigger, ContextMenu, MenuItem } from 'react-contextmenu';\nimport { harmonySocket } from '../../../Root';\nimport { ToggleGuildSettingsDialog } from '../../../../redux/Dispatches';\n\ninterface IProps {\n    guildid: string;\n    guildname: string;\n    picture: string;\n    selected: boolean;\n}\n\nexport const GuildIcon = (props: IProps) => {\n    const [guildsList] = useSelector((state: IState) => [state.guildList]);\n    const classes = useGuildListStyle();\n    const dispatch = useDispatch();\n\n    const onClick = () => {\n        dispatch({\n            type: Actions.SET_SELECTED_GUILD,\n            payload: props.guildid\n        });\n    };\n\n    const handleLeave = () => {\n        harmonySocket.leaveGuild(props.guildid);\n    };\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.guildid}>\n                <ButtonBase\n                    className={`${classes.guildiconroot} ${props.selected ? classes.selectedguildicon : undefined}`}\n                    key={props.guildid}\n                    onClick={onClick}\n                >\n                    <Tooltip title={props.guildname} placement='right'>\n                        <img className={classes.guildicon} alt='' src={props.picture} draggable={false} />\n                    </Tooltip>\n                </ButtonBase>\n            </ContextMenuTrigger>\n            <ContextMenu id={props.guildid}>\n                <List>\n                    <MenuItem>\n                        <ListItem button onClick={handleLeave}>\n                            <ListItemText primary='Leave Guild' />\n                        </ListItem>\n                    </MenuItem>\n                    {guildsList && guildsList[props.guildid].owner ? (\n                        <>\n                            <MenuItem>\n                                <ListItem button onClick={() => dispatch(ToggleGuildSettingsDialog())}>\n                                    <ListItemText primary='Guild Settings' />\n                                </ListItem>\n                            </MenuItem>\n                        </>\n                    ) : (\n                        undefined\n                    )}\n                </List>\n            </ContextMenu>\n        </>\n    );\n};\n","import React from 'react';\nimport GroupAdd from '@material-ui/icons/GroupAdd';\nimport { useGuildListStyle } from './GuildListStyle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { GuildIcon } from './GuildIcon';\nimport { ButtonBase, Tooltip } from '@material-ui/core';\n\nexport const GuildList = () => {\n    const classes = useGuildListStyle();\n    const [guildList, selectedGuild] = useSelector((state: IState) => [state.guildList, state.selectedGuild]);\n    const dispatch = useDispatch();\n\n    return (\n        <div className={classes.guildlist}>\n            {Object.keys(guildList).map((key) => {\n                return (\n                    <GuildIcon\n                        guildid={key}\n                        key={key}\n                        selected={selectedGuild === key}\n                        guildname={guildList[key].guildname}\n                        picture={guildList[key].picture}\n                    />\n                );\n            })}\n            <ButtonBase\n                className={classes.joinGuild}\n                onClick={() => dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG })}\n            >\n                <Tooltip title={'Join Or Create Guild'} placement='right'>\n                    <GroupAdd />\n                </Tooltip>\n            </ButtonBase>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useChannelListStyle = makeStyles((theme: Theme) => ({\n    selectedChannel: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[400]\n    },\n    nested: {\n        paddingLeft: theme.spacing(4)\n    },\n    newChannelInput: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2)\n    }\n}));\n","import React, { useState, useRef } from 'react';\nimport { List, ListItem, ListItemText, ListItemIcon, Collapse, Tooltip, Input } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport LeaveIcon from '@material-ui/icons/ExitToApp';\nimport { ContextMenu, ContextMenuTrigger } from 'react-contextmenu';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { useChannelListStyle } from './ChannelListStyle';\nimport { harmonySocket } from '../../../Root';\nimport { ToggleGuildSettingsDialog, SetSelectedChannel } from '../../../../redux/Dispatches';\n\ninterface IChannelProps {\n    channelid: string;\n    channelname: string;\n    setSelectedChannel: (value: string) => void;\n}\n\nconst Channel = (props: IChannelProps) => {\n    const [selectedGuild, selectedChannel, guildsList] = useSelector((state: IState) => [\n        state.selectedGuild,\n        state.selectedChannel,\n        state.guildList\n    ]);\n    const classes = useChannelListStyle();\n\n    const handleDelete = () => {\n        harmonySocket.sendDeleteChannel(selectedGuild, props.channelid);\n    };\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.channelid}>\n                <ListItem\n                    button\n                    key={props.channelid}\n                    className={props.channelid === selectedChannel ? classes.selectedChannel : undefined}\n                    onClick={() => props.setSelectedChannel(props.channelid)}\n                >\n                    <ListItemText secondary={`#${props.channelname}`} />\n                </ListItem>\n            </ContextMenuTrigger>\n            {guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                <ContextMenu id={props.channelid}>\n                    <List>\n                        <ListItem button onClick={handleDelete}>\n                            <ListItemText primary='Delete Channel' />\n                        </ListItem>\n                    </List>\n                </ContextMenu>\n            ) : (\n                undefined\n            )}\n        </>\n    );\n};\n\nexport const ChannelList = () => {\n    const [channels, selectedGuild, guildsList] = useSelector((state: IState) => [\n        state.channels,\n        state.selectedGuild,\n        state.guildList\n    ]);\n    const [actionsExpanded, setActionsExpanded] = useState<boolean>(false);\n    const [addingChannel, setAddingChannel] = useState<boolean>(false);\n    const addChannelInput = useRef<HTMLInputElement | null>(null);\n    const dispatch = useDispatch();\n    const classes = useChannelListStyle();\n\n    const leaveGuild = () => {\n        harmonySocket.leaveGuild(selectedGuild);\n    };\n\n    const setSelectedChannel = (value: string) => {\n        dispatch(SetSelectedChannel(value));\n    };\n\n    const toggleGuildSettings = () => {\n        harmonySocket.sendGetInvites(selectedGuild);\n        dispatch(ToggleGuildSettingsDialog());\n    };\n\n    const addChannelButtonClicked = () => {\n        setAddingChannel(true);\n    };\n\n    const handleChannelNameFinish = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n        if (ev.key === 'Enter' && addChannelInput.current) {\n            harmonySocket.sendAddChannel(selectedGuild, addChannelInput.current.value);\n            setAddingChannel(false);\n        }\n    };\n\n    return (\n        <div>\n            <List style={{ padding: 0 }}>\n                {selectedGuild ? (\n                    <>\n                        <ListItem button onClick={() => setActionsExpanded(!actionsExpanded)}>\n                            <ListItemText primary='Guild Options' />\n                            {actionsExpanded ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={actionsExpanded} timeout='auto' unmountOnExit>\n                            <List component='div' disablePadding>\n                                {guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                                    <>\n                                        <ListItem button className={classes.nested} onClick={toggleGuildSettings}>\n                                            <ListItemIcon>\n                                                <SettingsIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary='Guild Settings' />\n                                        </ListItem>\n                                    </>\n                                ) : (\n                                    undefined\n                                )}\n                                <ListItem button className={classes.nested} onClick={leaveGuild}>\n                                    <ListItemIcon>\n                                        <LeaveIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary='Leave Guild' />\n                                </ListItem>\n                            </List>\n                        </Collapse>\n                    </>\n                ) : (\n                    undefined\n                )}\n                {channels\n                    ? Object.keys(channels).map((key) => {\n                          return (\n                              <Channel\n                                  key={key}\n                                  channelid={key}\n                                  channelname={channels[key]}\n                                  setSelectedChannel={setSelectedChannel}\n                              />\n                          );\n                      })\n                    : undefined}\n                <div className={classes.newChannelInput}>\n                    {addingChannel ? (\n                        <Input\n                            fullWidth\n                            autoFocus\n                            onKeyPress={handleChannelNameFinish}\n                            onBlur={() => setAddingChannel(false)}\n                            placeholder={'Channel Name'}\n                            inputRef={addChannelInput}\n                        />\n                    ) : (\n                        undefined\n                    )}\n                </div>\n                {selectedGuild && guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                    <Tooltip title='Create Channel'>\n                        <ListItem button onClick={addChannelButtonClicked}>\n                            <ListItemText style={{ textAlign: 'center' }} primary='+' />\n                        </ListItem>\n                    </Tooltip>\n                ) : (\n                    undefined\n                )}\n            </List>\n        </div>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useChatAreaStyles } from './ChatAreaStyle';\nimport { Messages } from './Messages/Messages';\nimport { Input } from './Input/Input';\nimport { GuildList } from './GuildList/GuildList';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../types/redux';\nimport { ChannelList } from './ChannelList/ChannelList';\nimport { FocusChatInput } from '../../../redux/Dispatches';\n\nexport const ChatArea = () => {\n    const classes = useChatAreaStyles();\n    const [messages] = useSelector((state: IState) => [state.messages]);\n    const messagesRef = useRef<HTMLDivElement | null>(null);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (messagesRef.current) {\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const onKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n        if (ev.key !== 'Tab') {\n            dispatch(FocusChatInput());\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.guildlist}>\n                <GuildList />\n            </div>\n            <div className={classes.channellist}>\n                <ChannelList />\n            </div>\n            <div className={classes.chatArea}>\n                <div className={classes.messages} ref={messagesRef} onKeyDown={onKeyDown} tabIndex={-1}>\n                    <Messages />\n                </div>\n                <div className={classes.input}>\n                    <Input />\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { Dialog, TextField, Typography, DialogContent, Button, Grid } from '@material-ui/core';\nimport { harmonySocket } from '../../../Root';\n\nexport const JoinGuild = () => {\n    const [open, inputStyle] = useSelector((state: IState) => [state.joinGuildDialog, state.theme.inputStyle]);\n    const [joinErr] = useState<string>('');\n    const [createErr] = useState<string>('');\n    const joinCodeRef = useRef<HTMLInputElement | null>(null);\n    const guildNameRef = useRef<HTMLInputElement | null>(null);\n    const dispatch = useDispatch();\n\n    const createGuild = () => {\n        if (guildNameRef.current && guildNameRef.current.value) {\n            harmonySocket.createGuild(guildNameRef.current.value);\n        }\n    };\n\n    const joinGuild = () => {\n        if (joinCodeRef.current && joinCodeRef.current.value) {\n            harmonySocket.joinGuild(joinCodeRef.current.value);\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG })}>\n            <DialogContent>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <div>\n                            <Typography variant='h5'>Join Guild</Typography>\n                            <TextField label='Join Code' variant={inputStyle as any} fullWidth inputRef={joinCodeRef} />\n                            <Typography color='error' variant='body2'>\n                                {joinErr || <br />}\n                            </Typography>\n                            <Button onClick={joinGuild}>Join Guild</Button>\n                        </div>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div>\n                            <Typography variant='h5'>Create Guild</Typography>\n                            <TextField\n                                label='Guild Name'\n                                variant={inputStyle as any}\n                                fullWidth\n                                inputRef={guildNameRef}\n                            />\n                            <Typography color='error' variant='body2'>\n                                {createErr || <br />}\n                            </Typography>\n                            <Button onClick={createGuild}>Create Guild</Button>\n                        </div>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useGuildSettingsStyle = makeStyles((theme: Theme) => ({\n    guildIcon: {\n        width: '100px',\n        height: '100px'\n    },\n    menuEntry: {\n        marginTop: theme.spacing(2)\n    },\n    clipboardbtn: {\n        marginLeft: theme.spacing(3)\n    }\n}));\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { IState, Actions } from '../../../../types/redux';\nimport {\n    Dialog,\n    DialogContent,\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Button,\n    TextField,\n    Avatar,\n    ButtonBase,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Tooltip\n} from '@material-ui/core';\nimport copy from 'copy-to-clipboard';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useGuildSettingsStyle } from './GuildSettingsStyle';\nimport { toast } from 'react-toastify';\nimport { harmonySocket } from '../../../Root';\n\nexport const GuildSettings = () => {\n    const [open, selectedGuild, inputStyle, guilds, invites] = useSelector((state: IState) => [\n        state.guildSettingsDialog,\n        state.selectedGuild,\n        state.theme.inputStyle,\n        state.guildList,\n        state.invites\n    ]);\n    const dispatch = useDispatch();\n    const guildIconUpload = useRef<HTMLInputElement | null>(null);\n    const [guildName, setGuildName] = useState<string | undefined>(\n        guilds[selectedGuild] ? guilds[selectedGuild].guildname : undefined\n    );\n    const [guildIconFile, setGuildIconFile] = useState<File | null>(null);\n    const [guildIcon, setGuildIcon] = useState<string | undefined>(\n        guilds[selectedGuild] ? guilds[selectedGuild].picture : undefined\n    );\n    const classes = useGuildSettingsStyle();\n\n    const deleteInviteLink = (invite: string) => {\n        harmonySocket.sendDeleteInvite(invite, selectedGuild);\n    };\n\n    const createInviteLink = () => {\n        harmonySocket.sendCreateInvite(selectedGuild);\n    };\n\n    const onSaveChanges = () => {\n        if (guilds[selectedGuild]) {\n            if (guildIcon !== guilds[selectedGuild].picture && guildIconFile) {\n                const guildIconUpload = new FormData();\n                guildIconUpload.append('file', guildIconFile);\n                axios\n                    .post(`http://${window.location.hostname}:2288/api/rest/fileupload`, guildIconUpload, {})\n                    .then((res) => {\n                        if (res.data) {\n                            const uploadID = res.data;\n                            harmonySocket.sendGuildPictureUpdate(\n                                selectedGuild,\n                                `http://${window.location.hostname}:2288/filestore/${uploadID}`\n                            );\n                        }\n                    })\n                    .catch(() => {\n                        toast.error('Failed to update guild icon');\n                    });\n            }\n            if (guilds[selectedGuild].guildname !== guildName && guildName) {\n                harmonySocket.sendGuildNameUpdate(selectedGuild, guildName);\n            }\n        }\n    };\n\n    const onGuildIconSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.currentTarget.files && event.currentTarget.files.length > 0) {\n            const file = event.currentTarget.files[0];\n            setGuildIconFile(file);\n            if (file.type.startsWith('image/') && file.size < 33554432) {\n                const fileReader = new FileReader();\n                fileReader.readAsDataURL(file);\n                fileReader.addEventListener('load', () => {\n                    if (typeof fileReader.result === 'string') {\n                        setGuildIcon(fileReader.result);\n                    }\n                });\n            }\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG })} fullScreen>\n            <AppBar style={{ position: 'relative' }}>\n                <Toolbar>\n                    <IconButton\n                        edge='start'\n                        color='inherit'\n                        onClick={() =>\n                            dispatch({\n                                type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG\n                            })\n                        }\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant='h6'>Guild Settings</Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <div style={{ width: '33%' }}>\n                    <input\n                        type='file'\n                        id='file'\n                        multiple\n                        ref={guildIconUpload}\n                        style={{ display: 'none' }}\n                        onChange={onGuildIconSelected}\n                    />\n                    <ButtonBase\n                        style={{ borderRadius: '50%' }}\n                        onClick={() => {\n                            if (guildIconUpload.current) {\n                                guildIconUpload.current.click();\n                            }\n                        }}\n                    >\n                        <Avatar className={classes.guildIcon} src={guildIcon}></Avatar>\n                    </ButtonBase>\n                    <TextField\n                        label='Guild Name'\n                        fullWidth\n                        variant={inputStyle as any}\n                        className={classes.menuEntry}\n                        value={guildName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setGuildName(e.currentTarget.value)}\n                    />\n                    <Button variant='contained' color='secondary' className={classes.menuEntry} onClick={onSaveChanges}>\n                        Save Changes\n                    </Button>\n                    <Typography variant='h4' className={classes.menuEntry}>\n                        Join Codes\n                    </Typography>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Join Code</TableCell>\n                                <TableCell>Amount Used</TableCell>\n                                <TableCell>Actions</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {Object.keys(invites).map((key) => {\n                                return (\n                                    <TableRow key={key}>\n                                        <TableCell component='th' scope='row'>\n                                            {key}\n                                        </TableCell>\n                                        <TableCell component='th' scope='row'>\n                                            {invites[key]}\n                                        </TableCell>\n                                        <TableCell component='td' scope='row'>\n                                            <Tooltip title='Copy Invite Link'>\n                                                <IconButton\n                                                    onClick={() => {\n                                                        copy(\n                                                            `http://${window.location.hostname}${\n                                                                window.location.port ? ':' + window.location.port : ''\n                                                            }/invite/${key}`\n                                                        );\n                                                        toast.info('Successfully copied to clipboard!');\n                                                    }}\n                                                >\n                                                    <ShareIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                            <Tooltip title='Delete Invite Link'>\n                                                <IconButton onClick={() => deleteInviteLink(key)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                    <Button fullWidth onClick={createInviteLink}>\n                        <AddIcon />\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useUserSettingsStyle = makeStyles((theme: Theme) => ({\n    guildIcon: {\n        width: '100px',\n        height: '100px'\n    },\n    menuEntry: {\n        marginTop: theme.spacing(2)\n    },\n    clipboardbtn: {\n        marginLeft: theme.spacing(3)\n    }\n}));\n","import React, { useState, useRef } from 'react';\nimport { Dialog, AppBar, Toolbar, IconButton, Typography, DialogContent, TextField, ButtonBase, Avatar, Button } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { useUserSettingsStyle } from './UserSettingsStyle';\n\nexport const UserSettingsDialog = () => {\n    const [open, inputStyle] = useSelector((state: IState) => [state.userSettingsDialog, state.userSettingsDialog]);\n    const userAvatarUpload = useRef<HTMLInputElement | null>(null);\n    const [username, setUsername] = useState<string>('');\n    const dispatch = useDispatch();\n    const classes = useUserSettingsStyle();\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })} fullScreen>\n            <AppBar style={{ position: 'relative' }}>\n                <Toolbar>\n                    <IconButton edge='start' onClick={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })}>\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant='h6'>User Settings</Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <div style={{ width: '33%' }}>\n                    <input type='file' id='file' multiple ref={userAvatarUpload} style={{ display: 'none' }} />\n                    <ButtonBase\n                        style={{ borderRadius: '50%' }}\n                        onClick={() => {\n                            if (userAvatarUpload.current) {\n                                userAvatarUpload.current.click();\n                            }\n                        }}\n                    >\n                        <Avatar className={classes.guildIcon}></Avatar>\n                    </ButtonBase>\n                    <TextField\n                        label='Username'\n                        fullWidth\n                        variant={inputStyle as any}\n                        className={classes.menuEntry}\n                        value={username}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.currentTarget.value)}\n                    />\n                    <Button variant='contained' color='secondary' className={classes.menuEntry}>\n                        Save Changes\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { HarmonyBar } from './HarmonyBar/HarmonyBar';\nimport { ThemeDialog } from './Dialog/ThemeDialog';\nimport { useAppStyles } from './AppStyle';\nimport { ChatArea } from './ChatArea/ChatArea';\nimport { harmonySocket } from '../Root';\nimport { useHistory } from 'react-router';\nimport { IGuildData } from '../../types/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Actions, IState, IMessage } from '../../types/redux';\nimport { toast } from 'react-toastify';\nimport { JoinGuild } from './Dialog/JoinGuildDialog/JoinGuild';\nimport { GuildSettings } from './Dialog/GuildSettingsDialog/GuildSettings';\nimport {\n    SetMessages,\n    SetSelectedChannel,\n    SetSelectedGuild,\n    SetChannels,\n    SetGuilds,\n    AddMessage,\n    ToggleGuildSettingsDialog,\n    SetGuildPicture,\n    SetInvites,\n    SetGuildName,\n    SetUser\n} from '../../redux/Dispatches';\nimport { UserSettingsDialog } from './Dialog/UserSettingsDialog/UserSettingsDialog';\n\nexport const App = () => {\n    const classes = useAppStyles();\n    const dispatch = useDispatch();\n    const [connected, channels, invites, selectedGuild, themeDialogOpen, joinDialogOpen, guildSettingsDialogOpen, userSettingsDialogOpen] = useSelector((state: IState) => [\n        state.connected,\n        state.channels,\n        state.invites,\n        state.selectedGuild,\n        state.themeDialog,\n        state.joinGuildDialog,\n        state.guildSettingsDialog,\n        state.userSettingsDialog\n    ]);\n    const history = useHistory();\n    let eventsBound = false;\n\n    // event when the client has connected\n    useEffect(() => {\n        if (connected) {\n            harmonySocket.getGuilds();\n        }\n    }, [connected]);\n\n    useEffect(() => {\n        if (connected) {\n            dispatch(SetMessages([]));\n            dispatch(SetSelectedChannel(undefined));\n            harmonySocket.getMessages(selectedGuild);\n            harmonySocket.getChannels(selectedGuild);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedGuild]);\n\n    useEffect(() => {\n        if (!eventsBound) {\n            if ((harmonySocket.conn.readyState !== WebSocket.OPEN && harmonySocket.conn.readyState !== WebSocket.CONNECTING) || typeof localStorage.getItem('token') !== 'string') {\n                // bounce the user to the login screen if the socket is disconnected or there's no token\n                history.push('/');\n                return;\n            }\n\n            harmonySocket.events.addListener('getguilds', (raw: any) => {\n                let guildsList = raw['guilds'] as IGuildData[];\n                if (Object.keys(guildsList).length === 0) {\n                    dispatch(SetMessages([]));\n                    dispatch(SetSelectedChannel(undefined));\n                    dispatch(SetSelectedGuild(undefined));\n                    dispatch(SetChannels({}));\n                }\n                dispatch(SetGuilds(guildsList));\n            });\n            harmonySocket.events.addListener('getmessages', (raw: any) => {\n                if (raw['messages']) {\n                    dispatch(SetMessages((raw['messages'] as IMessage[]).reverse()));\n                }\n            });\n            harmonySocket.events.addListener('message', (raw: any) => {\n                // prevent stupid API responses\n                if (typeof raw['userid'] === 'string' && typeof raw['createdat'] === 'number' && typeof raw['guild'] === 'string' && typeof raw['message'] === 'string') {\n                    dispatch(AddMessage(raw as IMessage));\n                }\n            });\n            harmonySocket.events.addListener('getchannels', (raw: any) => {\n                if (typeof raw === 'object') {\n                    dispatch(SetChannels(raw['channels']));\n                }\n            });\n            harmonySocket.events.addListener('deauth', () => {\n                toast.warn('Your session has expired. Please login again');\n                history.push('/');\n                return;\n            });\n            harmonySocket.events.addListener('leaveguild', (raw: any) => {\n                if (typeof raw['message'] === 'string') {\n                    toast.error(raw['message']);\n                    return;\n                }\n                harmonySocket.getGuilds();\n            });\n            harmonySocket.events.addListener('joinguild', (raw: any) => {\n                if (!raw['message']) {\n                    harmonySocket.getGuilds();\n                    dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG });\n                }\n            });\n            harmonySocket.events.addListener('createguild', (raw: any) => {\n                if (!raw['message']) {\n                    harmonySocket.getGuilds();\n                    dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG });\n                }\n            });\n            harmonySocket.events.addListener('updateguildpicture', (raw: any) => {\n                if (raw['success'] === true && raw['picture'] && raw['guild']) {\n                    dispatch(SetGuildPicture(raw['guild'], raw['picture']));\n                    if (guildSettingsDialogOpen) {\n                        dispatch(ToggleGuildSettingsDialog());\n                    }\n                } else {\n                    toast.error('Error saving guild');\n                }\n            });\n            harmonySocket.events.addListener('updateguildname', (raw: any) => {\n                if (raw['success'] === true && raw['name'] && raw['guild']) {\n                    dispatch(SetGuildName(raw['guild'], raw['name']));\n                    if (guildSettingsDialogOpen) {\n                        dispatch(ToggleGuildSettingsDialog());\n                    }\n                } else {\n                    toast.error('Error saving guild');\n                }\n            });\n            harmonySocket.events.addListener('getinvites', (raw: any) => {\n                if (raw['invites'] && raw['guild']) {\n                    dispatch(SetInvites(raw['invites']));\n                }\n            });\n            harmonySocket.events.addListener('addguildchannel', (raw: any) => {\n                if (raw['success'] === true && raw['guild'] && raw['channelname'] && raw['channelid']) {\n                    dispatch(SetChannels({ ...channels, [raw['channelid']]: raw['channelname'] }));\n                }\n            });\n            harmonySocket.events.addListener('deleteguildchannel', (raw: any) => {\n                if (raw['success'] === true && raw['guild'] && raw['channelid']) {\n                    const channelDeleted = {\n                        ...channels\n                    };\n                    delete channelDeleted[raw['channelid']];\n                    dispatch(SetChannels({ ...channelDeleted }));\n                }\n            });\n            harmonySocket.events.addListener('deleteinvite', (raw: any) => {\n                if (raw['success'] === true && raw['invite']) {\n                    const invitesDeleted = {\n                        ...invites\n                    };\n                    delete invitesDeleted[raw['invite']];\n                    dispatch(SetInvites(invitesDeleted));\n                }\n            });\n            harmonySocket.events.addListener('createinvite', (raw: any) => {\n                if (raw['success'] === true && raw['invite']) {\n                    const invitesDeleted = {\n                        ...invites,\n                        [raw['invite']]: 0\n                    };\n                    dispatch(SetInvites(invitesDeleted));\n                }\n            });\n            harmonySocket.events.addListener('getuser', (raw: any) => {\n                console.log(raw);\n                if (typeof raw['userid'] === 'string' && typeof raw['username'] === 'string' && typeof raw['avatar'] === 'string') {\n                    dispatch(SetUser(raw['userid'], raw['username'], raw['avatar']));\n                }\n            });\n            return () => {\n                harmonySocket.events.removeAllListeners('getguilds');\n                harmonySocket.events.removeAllListeners('getmessages');\n                harmonySocket.events.removeAllListeners('message');\n                harmonySocket.events.removeAllListeners('getchannels');\n                harmonySocket.events.removeAllListeners('deauth');\n                harmonySocket.events.removeAllListeners('leaveguild');\n                harmonySocket.events.removeAllListeners('joinguild');\n                harmonySocket.events.removeAllListeners('createguild');\n                harmonySocket.events.removeAllListeners('updateguildpicture');\n                harmonySocket.events.removeAllListeners('updateguildname');\n                harmonySocket.events.removeAllListeners('getinvites');\n                harmonySocket.events.removeAllListeners('addguildchannel');\n                harmonySocket.events.removeAllListeners('deleteguildchannel');\n                harmonySocket.events.removeAllListeners('deleteinvite');\n                harmonySocket.events.removeAllListeners('createinvite');\n                harmonySocket.events.removeAllListeners('getusername');\n            };\n        }\n    }, [history, dispatch, guildSettingsDialogOpen, eventsBound, channels, invites]);\n\n    return (\n        <div className={classes.root}>\n            {themeDialogOpen ? <ThemeDialog /> : undefined}\n            {joinDialogOpen ? <JoinGuild /> : undefined}\n            {guildSettingsDialogOpen ? <GuildSettings /> : undefined}\n            {userSettingsDialogOpen ? <UserSettingsDialog /> : undefined}\n            <HarmonyBar />\n            <div className={classes.navFill} /> {/* this fills the area where the navbar is*/}\n            <ChatArea />\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useEntryStyles = makeStyles((theme: Theme) => ({\n    form: {\n        width: '60%',\n        height: '60%',\n        position: 'relative'\n    },\n    root: {\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useLoginStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1)\n    },\n    submitBtn: {\n        position: 'absolute',\n        bottom: theme.spacing(1),\n        left: theme.spacing(1)\n    }\n}));\n","import React, { useRef, useEffect } from 'react';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport { useLoginStyles } from './LoginStyle';\nimport { harmonySocket } from '../../Root';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\n\nexport const Login: React.FC = () => {\n    const history = useHistory(); // history for better routing\n    const classes = useLoginStyles();\n\n    const [err, setErr] = React.useState<string | undefined>(undefined);\n    const emailRef = useRef<HTMLInputElement | undefined>(undefined);\n    const pwdRef = useRef<HTMLInputElement | undefined>(undefined);\n\n    const login = () => {\n        if (harmonySocket.conn.readyState === WebSocket.CLOSED) {\n            toast.error(\"Can't login, trouble connecting to server\");\n        } else if (emailRef.current && pwdRef.current && emailRef.current.value.length && pwdRef.current.value) {\n            harmonySocket.login(emailRef.current.value, pwdRef.current.value);\n        } else {\n            toast.error(\"Can't login, missing email or password\");\n        }\n    };\n\n    useEffect(() => {\n        harmonySocket.events.addListener('loginerror', (raw: any) => {\n            if (typeof raw['message'] === 'string') {\n                setErr(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('token', (raw: any) => {\n            if (typeof raw['token'] === 'string' && typeof raw['userid'] === 'string') {\n                localStorage.setItem('token', raw['token']);\n                localStorage.setItem('userid', raw['userid']);\n                history.push('/app');\n            }\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('loginerror');\n            harmonySocket.events.removeAllListeners('token');\n        };\n    }, [history]);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => e.preventDefault()}>\n                <TextField label='Email' type='email' name='email' autoComplete='email' margin='normal' fullWidth inputRef={emailRef} />\n                <TextField label='Password' type='password' name='password' margin='normal' fullWidth inputRef={pwdRef} />\n                {err ? (\n                    <Typography variant='subtitle1' color={'error'}>\n                        {err}\n                    </Typography>\n                ) : (\n                    undefined\n                )}\n                <Button variant='contained' color='primary' className={classes.submitBtn} onClick={login} type='submit'>\n                    Log In\n                </Button>\n            </form>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useRegisterStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1)\n    },\n    submitBtn: {\n        position: 'absolute',\n        bottom: theme.spacing(1),\n        left: theme.spacing(1)\n    }\n}));\n","import React, { useRef, useEffect } from 'react';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport { useRegisterStyles } from './RegisterStyle';\nimport { harmonySocket } from '../../Root';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\n\nexport const Register = () => {\n    const classes = useRegisterStyles();\n    const history = useHistory();\n    const [err, setErr] = React.useState<string | undefined>(undefined);\n    const emailRef = useRef<HTMLInputElement | undefined>(undefined);\n    const usernameRef = useRef<HTMLInputElement | undefined>(undefined);\n    const pwdRef = useRef<HTMLInputElement | undefined>(undefined);\n\n    const register = () => {\n        if (harmonySocket.conn.readyState === WebSocket.CLOSED) {\n            toast.error(\"Can't register, trouble connecting to server\");\n        } else if (emailRef.current && usernameRef.current && pwdRef.current && emailRef.current.value && pwdRef.current.value && usernameRef.current.value) {\n            harmonySocket.register(emailRef.current.value, usernameRef.current.value, pwdRef.current.value);\n        } else {\n            toast.error(\"Can't register, missing email, username, or password\");\n        }\n    };\n\n    useEffect(() => {\n        harmonySocket.events.addListener('registererror', (raw: any) => {\n            if (typeof raw['message'] === 'string') {\n                setErr(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('token', (raw: any) => {\n            if (typeof raw['token'] === 'string' && typeof raw['userid'] === 'string') {\n                localStorage.setItem('token', raw['token']);\n                localStorage.setItem('userid', raw['userid']);\n                history.push('/app');\n            }\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('registererror');\n            harmonySocket.events.removeAllListeners('token');\n        };\n    }, [history]);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => e.preventDefault()}>\n                <TextField label='Email' type='email' name='email' autoComplete='email' margin='normal' fullWidth inputRef={emailRef} />\n                <TextField label='Username' type='text' name='usernamee' autoComplete='username' margin='normal' fullWidth inputRef={usernameRef} />\n                <TextField label='Password' type='password' name='password' autoComplete='new-password' margin='normal' fullWidth inputRef={pwdRef} />\n                <TextField label='Confirm Password' type='password' name='confirmpassword' autoComplete='none' margin='normal' fullWidth />\n                {err ? (\n                    <Typography variant='subtitle1' color={'error'}>\n                        {err}\n                    </Typography>\n                ) : (\n                    undefined\n                )}\n                <Button variant='contained' color='primary' className={classes.submitBtn} onClick={register} type='submit'>\n                    Log In\n                </Button>\n            </form>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Paper, Tabs, Tab } from '@material-ui/core';\nimport { useEntryStyles } from './EntryStyle';\nimport { Login } from './Login/Login';\nimport { Register } from './Register/Register';\n\nexport const Entry = () => {\n    const classes = useEntryStyles();\n    const [tabIDX, setTabIDX] = React.useState(0);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.form}>\n                <Tabs value={tabIDX} onChange={(event: any, newValue: number): void => setTabIDX(newValue)} variant='fullWidth' indicatorColor={'primary'}>\n                    <Tab label='Login' id='form-tab-0' />\n                    <Tab label='Register' id='form-tab-1' />\n                </Tabs>\n                {tabIDX === 0 ? <Login /> : <Register />}\n            </Paper>\n        </div>\n    );\n};\n","import { EventEmitter } from 'fbemitter';\nimport { IPacket } from '../types/socket';\n\nexport default class HarmonySocket {\n    conn: WebSocket;\n    events: EventEmitter;\n\n    constructor() {\n        this.conn = new WebSocket(`ws://${window.location.hostname}:2288/api/socket`);\n        this.events = new EventEmitter();\n        this.conn.addEventListener('open', () => this.events.emit('open'));\n        this.conn.addEventListener('close', () => this.events.emit('close'));\n        this.conn.addEventListener('error', () => this.events.emit('error'));\n        this.conn.onmessage = (e: MessageEvent) => {\n            const unprocessed = JSON.parse(e.data);\n            if (typeof unprocessed['type'] === 'string' && typeof unprocessed['data'] === 'object') {\n                const packet: IPacket = unprocessed;\n                this.events.emit(packet.type, packet.data);\n            } else {\n                console.warn(`Unsupported packet received`);\n                console.log(unprocessed);\n            }\n        };\n    }\n\n    connect = () => {\n        this.conn = new WebSocket(`ws://${window.location.hostname}:2288/api/socket`);\n        this.conn.addEventListener('open', () => this.events.emit('open'));\n        this.conn.addEventListener('close', () => this.events.emit('close'));\n        this.conn.addEventListener('error', () => this.events.emit('error'));\n        this.conn.onmessage = (e: MessageEvent) => {\n            const unprocessed = JSON.parse(e.data);\n            if (typeof unprocessed['type'] === 'string' && typeof unprocessed['data'] === 'object') {\n                const packet: IPacket = unprocessed;\n                this.events.emit(packet.type, packet.data);\n            } else {\n                console.warn(`Unsupported packet received`);\n                console.log(unprocessed);\n            }\n        };\n    };\n\n    emitEvent(type: string, data: unknown) {\n        // choke all packets if connection is not working\n        if (this.conn.readyState === WebSocket.OPEN) {\n            this.conn.send(JSON.stringify({ type, data }));\n        }\n    }\n\n    login(email: string, password: string) {\n        this.emitEvent('login', {\n            email,\n            password\n        });\n    }\n\n    register(email: string, username: string, password: string) {\n        this.emitEvent('register', {\n            email,\n            username,\n            password\n        });\n    }\n\n    getGuilds() {\n        this.emitEvent('getguilds', {\n            token: localStorage.getItem('token')\n        });\n    }\n\n    getMessages(guildID: string) {\n        this.emitEvent('getmessages', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendMessage(guildID: string, channelID: string, text: string) {\n        this.emitEvent('message', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelID,\n            message: text\n        });\n    }\n\n    getChannels(guildID: string) {\n        this.emitEvent('getchannels', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    joinGuild(inviteCode: string) {\n        this.emitEvent('joinguild', {\n            token: localStorage.getItem('token'),\n            invite: inviteCode\n        });\n    }\n\n    createGuild(guildName: string) {\n        this.emitEvent('createguild', {\n            token: localStorage.getItem('token'),\n            guildname: guildName\n        });\n    }\n\n    leaveGuild(guildID: string) {\n        this.emitEvent('leaveguild', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendGuildNameUpdate(guildID: string, newname: string) {\n        this.emitEvent('updateguildname', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            name: newname\n        });\n    }\n\n    sendGuildPictureUpdate(guildID: string, newpicture: string) {\n        this.emitEvent('updateguildpicture', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            picture: newpicture\n        });\n    }\n\n    sendGetInvites(guildID: string) {\n        this.emitEvent('getinvites', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendAddChannel(guildID: string, channelname: string) {\n        this.emitEvent('addchannel', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelname\n        });\n    }\n\n    sendDeleteChannel(guildID: string, channelID: string) {\n        this.emitEvent('deletechannel', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelID\n        });\n    }\n\n    sendDeleteInvite(invite: string, guild: string) {\n        this.emitEvent('deleteinvite', {\n            token: localStorage.getItem('token'),\n            invite,\n            guild\n        });\n    }\n\n    sendCreateInvite(guild: string) {\n        this.emitEvent('createinvite', {\n            token: localStorage.getItem('token'),\n            guild\n        });\n    }\n\n    sendGetUser(userid: string) {\n        this.emitEvent('getuser', {\n            token: localStorage.getItem('token'),\n            userid\n        });\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useRootStyles = makeStyles((theme: Theme) => ({\n    '@global': {\n        '::-webkit-scrollbar': {\n            width: '10px'\n        },\n        '::-webkit-scrollbar-thumb:hover': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(150, 150, 150)' : 'rgb(100, 100, 100)'\n        },\n        '::-webkit-scrollbar-track': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(245, 245, 245)' : 'rgb(46, 46, 46)'\n        },\n        '::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'\n        },\n        '::-webkit-scrollbar-corner': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'\n        },\n        '*': {\n            scrollbarColor: `${theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'} ${theme.palette.type === 'light' ? 'rgb(245, 245, 245)' : 'rgb(46, 46, 46)'}`\n        }\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useInviteHandlerStyle = makeStyles((theme: Theme) => ({\n    errorRoot: {\n        textAlign: 'center'\n    },\n    errorMsg: {\n        paddingTop: theme.spacing(10)\n    },\n    errorBtn: {\n        marginTop: theme.spacing(2)\n    }\n}));\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { harmonySocket } from '../Root';\nimport { Typography, Button } from '@material-ui/core';\nimport { useInviteHandlerStyle } from './InviteHandlerStyle';\n\nexport const InviteHandler = () => {\n    const { invitecode } = useParams();\n    const history = useHistory();\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const classes = useInviteHandlerStyle();\n\n    useEffect(() => {\n        harmonySocket.events.addListener('joinguild', (raw: any) => {\n            console.log(raw);\n            if (!raw['message']) {\n                setErrorMessage(null);\n                history.push('/app');\n            } else {\n                setErrorMessage(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('open', () => {\n            if (invitecode) {\n                harmonySocket.joinGuild(invitecode);\n            }\n        });\n    }, [history, invitecode]);\n\n    return (\n        <div>\n            {errorMessage ? (\n                <div className={classes.errorRoot}>\n                    <Typography variant='h1' align='center' className={classes.errorMsg}>\n                        404\n                        <br />\n                        {errorMessage}\n                    </Typography>\n                    <Button variant='contained' color='secondary' className={classes.errorBtn} onClick={() => history.push('/')}>\n                        Return To Login\n                    </Button>\n                </div>\n            ) : (\n                undefined\n            )}\n        </div>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { Switch, Route } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { CssBaseline, createMuiTheme, Button } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../types/redux';\nimport { App } from './App/App';\nimport { Entry } from './Entry/Entry';\nimport HarmonySocket from '../socket/socket';\nimport { useRootStyles } from './RootStyle';\nimport './Root.css';\nimport { SetConnected } from '../redux/Dispatches';\nimport { InviteHandler } from './InviteHandler/HandleInvite';\n\nexport const harmonySocket = new HarmonySocket();\nexport let previouslyDisconnected = false;\n\nconst Root = () => {\n    const dispatch = useDispatch();\n    useRootStyles();\n\n    useEffect(() => {\n        harmonySocket.events.addListener('close', () => {\n            // lol plz no spahm\n            if (!previouslyDisconnected) {\n                toast.error('You have lost connection to the server');\n                dispatch(SetConnected(false));\n                previouslyDisconnected = true;\n            }\n            setTimeout(harmonySocket.connect, 3000);\n        });\n        harmonySocket.events.addListener('open', () => {\n            if (previouslyDisconnected) toast.success('You have reconnected to the server');\n            dispatch(SetConnected(true));\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('close'); // cleanup all socket events registered here\n            harmonySocket.events.removeAllListeners('open');\n        };\n    }, [dispatch]);\n\n    return (\n        <>\n            <CssBaseline />\n            <ToastContainer />\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path='/'>\n                        <Entry />\n                    </Route>\n                    <Route exact path='/app'>\n                        <App />\n                    </Route>\n                    <Route exact path='/invite/:invitecode'>\n                        <InviteHandler />\n                    </Route>\n                    <Route exact path='/bruh'>\n                        <Button\n                            onClick={() => {\n                                toast.info('GET BRUHED ON KID');\n                            }}\n                        >\n                            Bruh Button\n                        </Button>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </>\n    );\n};\n\nconst ThemedRoot = () => {\n    const themeState = useSelector((state: IState) => state.theme);\n    const theme = createMuiTheme({\n        palette: {\n            primary: themeState.primary,\n            secondary: themeState.secondary,\n            type: themeState.type\n        }\n    });\n\n    return (\n        <div className='root'>\n            <ThemeProvider theme={theme}>\n                <Root />\n            </ThemeProvider>\n        </div>\n    );\n};\n\nexport default ThemedRoot;\n","import { IState, Action, Actions } from '../types/redux';\nimport { red, orange } from '@material-ui/core/colors';\n\nconst appState: IState = {\n    theme: {\n        type: 'dark',\n        primary: red,\n        secondary: orange,\n        inputStyle: 'filled'\n    },\n    guildList: {},\n    themeDialog: false,\n    connected: false,\n    selectedGuild: '',\n    messages: [],\n    invites: {},\n    channels: {},\n    selectedChannel: undefined,\n    joinGuildDialog: false,\n    guildSettingsDialog: false,\n    users: {},\n    userSettingsDialog: false,\n    chatInputFocus: false\n};\n\nexport default function AppReducer(state = appState, action: Action): IState {\n    switch (action.type) {\n        case Actions.INVERT_THEME: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    type: state.theme.type === 'dark' ? 'light' : 'dark'\n                }\n            };\n        }\n        case Actions.TOGGLE_THEME_DIALOG: {\n            return {\n                ...state,\n                themeDialog: !state.themeDialog\n            };\n        }\n        case Actions.CHANGE_PRIMARY: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    primary: action.payload\n                }\n            };\n        }\n        case Actions.CHANGE_SECONDARY: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    secondary: action.payload\n                }\n            };\n        }\n        case Actions.SET_CONNECTED: {\n            return {\n                ...state,\n                connected: action.payload\n            };\n        }\n        case Actions.SET_GUILDS: {\n            return {\n                ...state,\n                guildList: action.payload\n            };\n        }\n        case Actions.SET_SELECTED_GUILD: {\n            return {\n                ...state,\n                selectedGuild: action.payload\n            };\n        }\n        case Actions.ADD_MESSAGE: {\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            };\n        }\n        case Actions.SET_MESSAGES: {\n            return {\n                ...state,\n                messages: action.payload\n            };\n        }\n        case Actions.SET_INPUT_STYLE: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    inputStyle: action.payload\n                }\n            };\n        }\n        case Actions.SET_CHANNELS: {\n            return {\n                ...state,\n                channels: action.payload\n            };\n        }\n        case Actions.SET_SELECTED_CHANNEL: {\n            return {\n                ...state,\n                selectedChannel: action.payload\n            };\n        }\n        case Actions.TOGGLE_JOIN_GUILD_DIALOG: {\n            return {\n                ...state,\n                joinGuildDialog: !state.joinGuildDialog\n            };\n        }\n        case Actions.TOGGLE_GUILD_SETTINGS_DIALOG: {\n            return {\n                ...state,\n                guildSettingsDialog: !state.guildSettingsDialog\n            };\n        }\n        case Actions.SET_GUILD_PICTURE: {\n            return {\n                ...state,\n                guildList: {\n                    ...state.guildList,\n                    [action.payload.guild]: {\n                        ...state.guildList[action.payload.guild],\n                        picture: action.payload.picture\n                    }\n                }\n            };\n        }\n        case Actions.SET_GUILD_NAME: {\n            return {\n                ...state,\n                guildList: {\n                    ...state.guildList,\n                    [action.payload.guild]: {\n                        ...state.guildList[action.payload.guild],\n                        guildname: action.payload.name\n                    }\n                }\n            };\n        }\n        case Actions.SET_INVITES: {\n            return {\n                ...state,\n                invites: action.payload\n            };\n        }\n        case Actions.SET_USER: {\n            return {\n                ...state,\n                users: {\n                    ...state.users,\n                    [action.payload.userid]: action.payload\n                }\n            };\n        }\n        case Actions.TOGGLE_USER_SETTINGS_DIALOG: {\n            return {\n                ...state,\n                userSettingsDialog: !state.userSettingsDialog\n            };\n        }\n        case Actions.FOCUS_CHAT_INPUT: {\n            return {\n                ...state,\n                chatInputFocus: !state.chatInputFocus\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n","import { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport AppReducer from './AppReducer';\n\nconst persistConfig = {\n    key: 'theme',\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, AppReducer);\n\nexport default () => {\n    const store = createStore(persistedReducer);\n    const persistor = persistStore(store);\n    return { store, persistor };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport './Root/ContextMenu.css';\nimport Root from './Root/Root';\nimport setupRedux from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst { store, persistor } = setupRedux();\n\nconst ReduxRoot: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <Root />\n            </PersistGate>\n        </Provider>\n    );\n};\n\nReactDOM.render(<ReduxRoot />, document.getElementById('root'));\n"],"sourceRoot":""}