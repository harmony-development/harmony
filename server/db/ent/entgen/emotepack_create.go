// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// EmotePackCreate is the builder for creating a EmotePack entity.
type EmotePackCreate struct {
	config
	mutation *EmotePackMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (epc *EmotePackCreate) SetName(s string) *EmotePackCreate {
	epc.mutation.SetName(s)
	return epc
}

// SetID sets the "id" field.
func (epc *EmotePackCreate) SetID(u uint64) *EmotePackCreate {
	epc.mutation.SetID(u)
	return epc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (epc *EmotePackCreate) SetUserID(id uint64) *EmotePackCreate {
	epc.mutation.SetUserID(id)
	return epc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (epc *EmotePackCreate) SetNillableUserID(id *uint64) *EmotePackCreate {
	if id != nil {
		epc = epc.SetUserID(*id)
	}
	return epc
}

// SetUser sets the "user" edge to the User entity.
func (epc *EmotePackCreate) SetUser(u *User) *EmotePackCreate {
	return epc.SetUserID(u.ID)
}

// AddEmoteIDs adds the "emote" edge to the Emote entity by IDs.
func (epc *EmotePackCreate) AddEmoteIDs(ids ...int) *EmotePackCreate {
	epc.mutation.AddEmoteIDs(ids...)
	return epc
}

// AddEmote adds the "emote" edges to the Emote entity.
func (epc *EmotePackCreate) AddEmote(e ...*Emote) *EmotePackCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epc.AddEmoteIDs(ids...)
}

// Mutation returns the EmotePackMutation object of the builder.
func (epc *EmotePackCreate) Mutation() *EmotePackMutation {
	return epc.mutation
}

// Save creates the EmotePack in the database.
func (epc *EmotePackCreate) Save(ctx context.Context) (*EmotePack, error) {
	var (
		err  error
		node *EmotePack
	)
	if len(epc.hooks) == 0 {
		if err = epc.check(); err != nil {
			return nil, err
		}
		node, err = epc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmotePackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = epc.check(); err != nil {
				return nil, err
			}
			epc.mutation = mutation
			node, err = epc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(epc.hooks) - 1; i >= 0; i-- {
			mut = epc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, epc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EmotePackCreate) SaveX(ctx context.Context) *EmotePack {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (epc *EmotePackCreate) check() error {
	if _, ok := epc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("entgen: missing required field \"name\"")}
	}
	return nil
}

func (epc *EmotePackCreate) sqlSave(ctx context.Context) (*EmotePack, error) {
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (epc *EmotePackCreate) createSpec() (*EmotePack, *sqlgraph.CreateSpec) {
	var (
		_node = &EmotePack{config: epc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: emotepack.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emotepack.FieldID,
			},
		}
	)
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := epc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emotepack.FieldName,
		})
		_node.Name = value
	}
	if nodes := epc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.UserTable,
			Columns: []string{emotepack.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_emotepack = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.EmoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: emote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmotePackCreateBulk is the builder for creating many EmotePack entities in bulk.
type EmotePackCreateBulk struct {
	config
	builders []*EmotePackCreate
}

// Save creates the EmotePack entities in the database.
func (epcb *EmotePackCreateBulk) Save(ctx context.Context) ([]*EmotePack, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EmotePack, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmotePackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EmotePackCreateBulk) SaveX(ctx context.Context) []*EmotePack {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
