// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/foreignuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// ForeignUserUpdate is the builder for updating ForeignUser entities.
type ForeignUserUpdate struct {
	config
	hooks    []Hook
	mutation *ForeignUserMutation
}

// Where adds a new predicate for the ForeignUserUpdate builder.
func (fuu *ForeignUserUpdate) Where(ps ...predicate.ForeignUser) *ForeignUserUpdate {
	fuu.mutation.predicates = append(fuu.mutation.predicates, ps...)
	return fuu
}

// SetUsername sets the "username" field.
func (fuu *ForeignUserUpdate) SetUsername(s string) *ForeignUserUpdate {
	fuu.mutation.SetUsername(s)
	return fuu
}

// SetPicture sets the "picture" field.
func (fuu *ForeignUserUpdate) SetPicture(s string) *ForeignUserUpdate {
	fuu.mutation.SetPicture(s)
	return fuu
}

// SetHost sets the "host" field.
func (fuu *ForeignUserUpdate) SetHost(s string) *ForeignUserUpdate {
	fuu.mutation.SetHost(s)
	return fuu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (fuu *ForeignUserUpdate) SetUserID(id uint64) *ForeignUserUpdate {
	fuu.mutation.SetUserID(id)
	return fuu
}

// SetUser sets the "user" edge to the User entity.
func (fuu *ForeignUserUpdate) SetUser(u *User) *ForeignUserUpdate {
	return fuu.SetUserID(u.ID)
}

// Mutation returns the ForeignUserMutation object of the builder.
func (fuu *ForeignUserUpdate) Mutation() *ForeignUserMutation {
	return fuu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fuu *ForeignUserUpdate) ClearUser() *ForeignUserUpdate {
	fuu.mutation.ClearUser()
	return fuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fuu *ForeignUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fuu.hooks) == 0 {
		if err = fuu.check(); err != nil {
			return 0, err
		}
		affected, err = fuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ForeignUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuu.check(); err != nil {
				return 0, err
			}
			fuu.mutation = mutation
			affected, err = fuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fuu.hooks) - 1; i >= 0; i-- {
			mut = fuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuu *ForeignUserUpdate) SaveX(ctx context.Context) int {
	affected, err := fuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fuu *ForeignUserUpdate) Exec(ctx context.Context) error {
	_, err := fuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuu *ForeignUserUpdate) ExecX(ctx context.Context) {
	if err := fuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuu *ForeignUserUpdate) check() error {
	if _, ok := fuu.mutation.UserID(); fuu.mutation.UserCleared() && !ok {
		return errors.New("entgen: clearing a required unique edge \"user\"")
	}
	return nil
}

func (fuu *ForeignUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foreignuser.Table,
			Columns: foreignuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foreignuser.FieldID,
			},
		},
	}
	if ps := fuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foreignuser.FieldUsername,
		})
	}
	if value, ok := fuu.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foreignuser.FieldPicture,
		})
	}
	if value, ok := fuu.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foreignuser.FieldHost,
		})
	}
	if fuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   foreignuser.UserTable,
			Columns: []string{foreignuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   foreignuser.UserTable,
			Columns: []string{foreignuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foreignuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ForeignUserUpdateOne is the builder for updating a single ForeignUser entity.
type ForeignUserUpdateOne struct {
	config
	hooks    []Hook
	mutation *ForeignUserMutation
}

// SetUsername sets the "username" field.
func (fuuo *ForeignUserUpdateOne) SetUsername(s string) *ForeignUserUpdateOne {
	fuuo.mutation.SetUsername(s)
	return fuuo
}

// SetPicture sets the "picture" field.
func (fuuo *ForeignUserUpdateOne) SetPicture(s string) *ForeignUserUpdateOne {
	fuuo.mutation.SetPicture(s)
	return fuuo
}

// SetHost sets the "host" field.
func (fuuo *ForeignUserUpdateOne) SetHost(s string) *ForeignUserUpdateOne {
	fuuo.mutation.SetHost(s)
	return fuuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (fuuo *ForeignUserUpdateOne) SetUserID(id uint64) *ForeignUserUpdateOne {
	fuuo.mutation.SetUserID(id)
	return fuuo
}

// SetUser sets the "user" edge to the User entity.
func (fuuo *ForeignUserUpdateOne) SetUser(u *User) *ForeignUserUpdateOne {
	return fuuo.SetUserID(u.ID)
}

// Mutation returns the ForeignUserMutation object of the builder.
func (fuuo *ForeignUserUpdateOne) Mutation() *ForeignUserMutation {
	return fuuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fuuo *ForeignUserUpdateOne) ClearUser() *ForeignUserUpdateOne {
	fuuo.mutation.ClearUser()
	return fuuo
}

// Save executes the query and returns the updated ForeignUser entity.
func (fuuo *ForeignUserUpdateOne) Save(ctx context.Context) (*ForeignUser, error) {
	var (
		err  error
		node *ForeignUser
	)
	if len(fuuo.hooks) == 0 {
		if err = fuuo.check(); err != nil {
			return nil, err
		}
		node, err = fuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ForeignUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuuo.check(); err != nil {
				return nil, err
			}
			fuuo.mutation = mutation
			node, err = fuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuuo.hooks) - 1; i >= 0; i-- {
			mut = fuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuuo *ForeignUserUpdateOne) SaveX(ctx context.Context) *ForeignUser {
	node, err := fuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuuo *ForeignUserUpdateOne) Exec(ctx context.Context) error {
	_, err := fuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuuo *ForeignUserUpdateOne) ExecX(ctx context.Context) {
	if err := fuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuuo *ForeignUserUpdateOne) check() error {
	if _, ok := fuuo.mutation.UserID(); fuuo.mutation.UserCleared() && !ok {
		return errors.New("entgen: clearing a required unique edge \"user\"")
	}
	return nil
}

func (fuuo *ForeignUserUpdateOne) sqlSave(ctx context.Context) (_node *ForeignUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foreignuser.Table,
			Columns: foreignuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foreignuser.FieldID,
			},
		},
	}
	id, ok := fuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ForeignUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := fuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foreignuser.FieldUsername,
		})
	}
	if value, ok := fuuo.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foreignuser.FieldPicture,
		})
	}
	if value, ok := fuuo.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foreignuser.FieldHost,
		})
	}
	if fuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   foreignuser.UserTable,
			Columns: []string{foreignuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   foreignuser.UserTable,
			Columns: []string{foreignuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ForeignUser{config: fuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foreignuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
