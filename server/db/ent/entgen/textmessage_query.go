// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/textmessage"
)

// TextMessageQuery is the builder for querying TextMessage entities.
type TextMessageQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.TextMessage
	// eager-loading edges.
	withTextmessage *MessageQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TextMessageQuery builder.
func (tmq *TextMessageQuery) Where(ps ...predicate.TextMessage) *TextMessageQuery {
	tmq.predicates = append(tmq.predicates, ps...)
	return tmq
}

// Limit adds a limit step to the query.
func (tmq *TextMessageQuery) Limit(limit int) *TextMessageQuery {
	tmq.limit = &limit
	return tmq
}

// Offset adds an offset step to the query.
func (tmq *TextMessageQuery) Offset(offset int) *TextMessageQuery {
	tmq.offset = &offset
	return tmq
}

// Order adds an order step to the query.
func (tmq *TextMessageQuery) Order(o ...OrderFunc) *TextMessageQuery {
	tmq.order = append(tmq.order, o...)
	return tmq
}

// QueryTextmessage chains the current query on the "textmessage" edge.
func (tmq *TextMessageQuery) QueryTextmessage() *MessageQuery {
	query := &MessageQuery{config: tmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(textmessage.Table, textmessage.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, textmessage.TextmessageTable, textmessage.TextmessageColumn),
		)
		fromU = sqlgraph.SetNeighbors(tmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TextMessage entity from the query.
// Returns a *NotFoundError when no TextMessage was found.
func (tmq *TextMessageQuery) First(ctx context.Context) (*TextMessage, error) {
	nodes, err := tmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{textmessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tmq *TextMessageQuery) FirstX(ctx context.Context) *TextMessage {
	node, err := tmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TextMessage ID from the query.
// Returns a *NotFoundError when no TextMessage ID was found.
func (tmq *TextMessageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{textmessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tmq *TextMessageQuery) FirstIDX(ctx context.Context) int {
	id, err := tmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TextMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TextMessage entity is not found.
// Returns a *NotFoundError when no TextMessage entities are found.
func (tmq *TextMessageQuery) Only(ctx context.Context) (*TextMessage, error) {
	nodes, err := tmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{textmessage.Label}
	default:
		return nil, &NotSingularError{textmessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tmq *TextMessageQuery) OnlyX(ctx context.Context) *TextMessage {
	node, err := tmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TextMessage ID in the query.
// Returns a *NotSingularError when exactly one TextMessage ID is not found.
// Returns a *NotFoundError when no entities are found.
func (tmq *TextMessageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = &NotSingularError{textmessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tmq *TextMessageQuery) OnlyIDX(ctx context.Context) int {
	id, err := tmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TextMessages.
func (tmq *TextMessageQuery) All(ctx context.Context) ([]*TextMessage, error) {
	if err := tmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tmq *TextMessageQuery) AllX(ctx context.Context) []*TextMessage {
	nodes, err := tmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TextMessage IDs.
func (tmq *TextMessageQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tmq.Select(textmessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tmq *TextMessageQuery) IDsX(ctx context.Context) []int {
	ids, err := tmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tmq *TextMessageQuery) Count(ctx context.Context) (int, error) {
	if err := tmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tmq *TextMessageQuery) CountX(ctx context.Context) int {
	count, err := tmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tmq *TextMessageQuery) Exist(ctx context.Context) (bool, error) {
	if err := tmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tmq *TextMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := tmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TextMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tmq *TextMessageQuery) Clone() *TextMessageQuery {
	if tmq == nil {
		return nil
	}
	return &TextMessageQuery{
		config:          tmq.config,
		limit:           tmq.limit,
		offset:          tmq.offset,
		order:           append([]OrderFunc{}, tmq.order...),
		predicates:      append([]predicate.TextMessage{}, tmq.predicates...),
		withTextmessage: tmq.withTextmessage.Clone(),
		// clone intermediate query.
		sql:  tmq.sql.Clone(),
		path: tmq.path,
	}
}

// WithTextmessage tells the query-builder to eager-load the nodes that are connected to
// the "textmessage" edge. The optional arguments are used to configure the query builder of the edge.
func (tmq *TextMessageQuery) WithTextmessage(opts ...func(*MessageQuery)) *TextMessageQuery {
	query := &MessageQuery{config: tmq.config}
	for _, opt := range opts {
		opt(query)
	}
	tmq.withTextmessage = query
	return tmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TextMessage.Query().
//		GroupBy(textmessage.FieldContent).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
//
func (tmq *TextMessageQuery) GroupBy(field string, fields ...string) *TextMessageGroupBy {
	group := &TextMessageGroupBy{config: tmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.TextMessage.Query().
//		Select(textmessage.FieldContent).
//		Scan(ctx, &v)
//
func (tmq *TextMessageQuery) Select(field string, fields ...string) *TextMessageSelect {
	tmq.fields = append([]string{field}, fields...)
	return &TextMessageSelect{TextMessageQuery: tmq}
}

func (tmq *TextMessageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tmq.fields {
		if !textmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if tmq.path != nil {
		prev, err := tmq.path(ctx)
		if err != nil {
			return err
		}
		tmq.sql = prev
	}
	return nil
}

func (tmq *TextMessageQuery) sqlAll(ctx context.Context) ([]*TextMessage, error) {
	var (
		nodes       = []*TextMessage{}
		withFKs     = tmq.withFKs
		_spec       = tmq.querySpec()
		loadedTypes = [1]bool{
			tmq.withTextmessage != nil,
		}
	)
	if tmq.withTextmessage != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, textmessage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TextMessage{config: tmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("entgen: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, tmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tmq.withTextmessage; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*TextMessage)
		for i := range nodes {
			fk := nodes[i].message_textmessage
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(message.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "message_textmessage" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Textmessage = n
			}
		}
	}

	return nodes, nil
}

func (tmq *TextMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tmq.querySpec()
	return sqlgraph.CountNodes(ctx, tmq.driver, _spec)
}

func (tmq *TextMessageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("entgen: check existence: %w", err)
	}
	return n > 0, nil
}

func (tmq *TextMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   textmessage.Table,
			Columns: textmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: textmessage.FieldID,
			},
		},
		From:   tmq.sql,
		Unique: true,
	}
	if fields := tmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, textmessage.FieldID)
		for i := range fields {
			if fields[i] != textmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, textmessage.ValidColumn)
			}
		}
	}
	return _spec
}

func (tmq *TextMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tmq.driver.Dialect())
	t1 := builder.Table(textmessage.Table)
	selector := builder.Select(t1.Columns(textmessage.Columns...)...).From(t1)
	if tmq.sql != nil {
		selector = tmq.sql
		selector.Select(selector.Columns(textmessage.Columns...)...)
	}
	for _, p := range tmq.predicates {
		p(selector)
	}
	for _, p := range tmq.order {
		p(selector, textmessage.ValidColumn)
	}
	if offset := tmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TextMessageGroupBy is the group-by builder for TextMessage entities.
type TextMessageGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tmgb *TextMessageGroupBy) Aggregate(fns ...AggregateFunc) *TextMessageGroupBy {
	tmgb.fns = append(tmgb.fns, fns...)
	return tmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (tmgb *TextMessageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := tmgb.path(ctx)
	if err != nil {
		return err
	}
	tmgb.sql = query
	return tmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tmgb.fields) > 1 {
		return nil, errors.New("entgen: TextMessageGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) StringsX(ctx context.Context) []string {
	v, err := tmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) StringX(ctx context.Context) string {
	v, err := tmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tmgb.fields) > 1 {
		return nil, errors.New("entgen: TextMessageGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) IntsX(ctx context.Context) []int {
	v, err := tmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) IntX(ctx context.Context) int {
	v, err := tmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tmgb.fields) > 1 {
		return nil, errors.New("entgen: TextMessageGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) Float64X(ctx context.Context) float64 {
	v, err := tmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tmgb.fields) > 1 {
		return nil, errors.New("entgen: TextMessageGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (tmgb *TextMessageGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tmgb *TextMessageGroupBy) BoolX(ctx context.Context) bool {
	v, err := tmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tmgb *TextMessageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range tmgb.fields {
		if !textmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tmgb *TextMessageGroupBy) sqlQuery() *sql.Selector {
	selector := tmgb.sql
	columns := make([]string, 0, len(tmgb.fields)+len(tmgb.fns))
	columns = append(columns, tmgb.fields...)
	for _, fn := range tmgb.fns {
		columns = append(columns, fn(selector, textmessage.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(tmgb.fields...)
}

// TextMessageSelect is the builder for selecting fields of TextMessage entities.
type TextMessageSelect struct {
	*TextMessageQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (tms *TextMessageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := tms.prepareQuery(ctx); err != nil {
		return err
	}
	tms.sql = tms.TextMessageQuery.sqlQuery(ctx)
	return tms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tms *TextMessageSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tms.fields) > 1 {
		return nil, errors.New("entgen: TextMessageSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tms *TextMessageSelect) StringsX(ctx context.Context) []string {
	v, err := tms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = tms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (tms *TextMessageSelect) StringX(ctx context.Context) string {
	v, err := tms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tms.fields) > 1 {
		return nil, errors.New("entgen: TextMessageSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tms *TextMessageSelect) IntsX(ctx context.Context) []int {
	v, err := tms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = tms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (tms *TextMessageSelect) IntX(ctx context.Context) int {
	v, err := tms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tms.fields) > 1 {
		return nil, errors.New("entgen: TextMessageSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tms *TextMessageSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = tms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (tms *TextMessageSelect) Float64X(ctx context.Context) float64 {
	v, err := tms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tms.fields) > 1 {
		return nil, errors.New("entgen: TextMessageSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tms *TextMessageSelect) BoolsX(ctx context.Context) []bool {
	v, err := tms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (tms *TextMessageSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = tms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{textmessage.Label}
	default:
		err = fmt.Errorf("entgen: TextMessageSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (tms *TextMessageSelect) BoolX(ctx context.Context) bool {
	v, err := tms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tms *TextMessageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tms.sqlQuery().Query()
	if err := tms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tms *TextMessageSelect) sqlQuery() sql.Querier {
	selector := tms.sql
	selector.Select(selector.Columns(tms.fields...)...)
	return selector
}
