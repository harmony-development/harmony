// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/filemessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// FileMessageUpdate is the builder for updating FileMessage entities.
type FileMessageUpdate struct {
	config
	hooks    []Hook
	mutation *FileMessageMutation
}

// Where adds a new predicate for the FileMessageUpdate builder.
func (fmu *FileMessageUpdate) Where(ps ...predicate.FileMessage) *FileMessageUpdate {
	fmu.mutation.predicates = append(fmu.mutation.predicates, ps...)
	return fmu
}

// Mutation returns the FileMessageMutation object of the builder.
func (fmu *FileMessageUpdate) Mutation() *FileMessageMutation {
	return fmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fmu *FileMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fmu.hooks) == 0 {
		affected, err = fmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fmu.mutation = mutation
			affected, err = fmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fmu.hooks) - 1; i >= 0; i-- {
			mut = fmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fmu *FileMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := fmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fmu *FileMessageUpdate) Exec(ctx context.Context) error {
	_, err := fmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmu *FileMessageUpdate) ExecX(ctx context.Context) {
	if err := fmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fmu *FileMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filemessage.Table,
			Columns: filemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filemessage.FieldID,
			},
		},
	}
	if ps := fmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filemessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FileMessageUpdateOne is the builder for updating a single FileMessage entity.
type FileMessageUpdateOne struct {
	config
	hooks    []Hook
	mutation *FileMessageMutation
}

// Mutation returns the FileMessageMutation object of the builder.
func (fmuo *FileMessageUpdateOne) Mutation() *FileMessageMutation {
	return fmuo.mutation
}

// Save executes the query and returns the updated FileMessage entity.
func (fmuo *FileMessageUpdateOne) Save(ctx context.Context) (*FileMessage, error) {
	var (
		err  error
		node *FileMessage
	)
	if len(fmuo.hooks) == 0 {
		node, err = fmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fmuo.mutation = mutation
			node, err = fmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fmuo.hooks) - 1; i >= 0; i-- {
			mut = fmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fmuo *FileMessageUpdateOne) SaveX(ctx context.Context) *FileMessage {
	node, err := fmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fmuo *FileMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := fmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmuo *FileMessageUpdateOne) ExecX(ctx context.Context) {
	if err := fmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fmuo *FileMessageUpdateOne) sqlSave(ctx context.Context) (_node *FileMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filemessage.Table,
			Columns: filemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filemessage.FieldID,
			},
		},
	}
	id, ok := fmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FileMessage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := fmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &FileMessage{config: fmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filemessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
