// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	v1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// EmbedMessageUpdate is the builder for updating EmbedMessage entities.
type EmbedMessageUpdate struct {
	config
	hooks    []Hook
	mutation *EmbedMessageMutation
}

// Where adds a new predicate for the EmbedMessageUpdate builder.
func (emu *EmbedMessageUpdate) Where(ps ...predicate.EmbedMessage) *EmbedMessageUpdate {
	emu.mutation.predicates = append(emu.mutation.predicates, ps...)
	return emu
}

// SetData sets the "data" field.
func (emu *EmbedMessageUpdate) SetData(v *v1.Embed) *EmbedMessageUpdate {
	emu.mutation.SetData(v)
	return emu
}

// AddEmbedFieldIDs adds the "embed_field" edge to the EmbedField entity by IDs.
func (emu *EmbedMessageUpdate) AddEmbedFieldIDs(ids ...int) *EmbedMessageUpdate {
	emu.mutation.AddEmbedFieldIDs(ids...)
	return emu
}

// AddEmbedField adds the "embed_field" edges to the EmbedField entity.
func (emu *EmbedMessageUpdate) AddEmbedField(e ...*EmbedField) *EmbedMessageUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.AddEmbedFieldIDs(ids...)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (emu *EmbedMessageUpdate) SetMessageID(id uint64) *EmbedMessageUpdate {
	emu.mutation.SetMessageID(id)
	return emu
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (emu *EmbedMessageUpdate) SetNillableMessageID(id *uint64) *EmbedMessageUpdate {
	if id != nil {
		emu = emu.SetMessageID(*id)
	}
	return emu
}

// SetMessage sets the "message" edge to the Message entity.
func (emu *EmbedMessageUpdate) SetMessage(m *Message) *EmbedMessageUpdate {
	return emu.SetMessageID(m.ID)
}

// Mutation returns the EmbedMessageMutation object of the builder.
func (emu *EmbedMessageUpdate) Mutation() *EmbedMessageMutation {
	return emu.mutation
}

// ClearEmbedField clears all "embed_field" edges to the EmbedField entity.
func (emu *EmbedMessageUpdate) ClearEmbedField() *EmbedMessageUpdate {
	emu.mutation.ClearEmbedField()
	return emu
}

// RemoveEmbedFieldIDs removes the "embed_field" edge to EmbedField entities by IDs.
func (emu *EmbedMessageUpdate) RemoveEmbedFieldIDs(ids ...int) *EmbedMessageUpdate {
	emu.mutation.RemoveEmbedFieldIDs(ids...)
	return emu
}

// RemoveEmbedField removes "embed_field" edges to EmbedField entities.
func (emu *EmbedMessageUpdate) RemoveEmbedField(e ...*EmbedField) *EmbedMessageUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emu.RemoveEmbedFieldIDs(ids...)
}

// ClearMessage clears the "message" edge to the Message entity.
func (emu *EmbedMessageUpdate) ClearMessage() *EmbedMessageUpdate {
	emu.mutation.ClearMessage()
	return emu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (emu *EmbedMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(emu.hooks) == 0 {
		affected, err = emu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			emu.mutation = mutation
			affected, err = emu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(emu.hooks) - 1; i >= 0; i-- {
			mut = emu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, emu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (emu *EmbedMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := emu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (emu *EmbedMessageUpdate) Exec(ctx context.Context) error {
	_, err := emu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emu *EmbedMessageUpdate) ExecX(ctx context.Context) {
	if err := emu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (emu *EmbedMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedmessage.Table,
			Columns: embedmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedmessage.FieldID,
			},
		},
	}
	if ps := emu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: embedmessage.FieldData,
		})
	}
	if emu.mutation.EmbedFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.RemovedEmbedFieldIDs(); len(nodes) > 0 && !emu.mutation.EmbedFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.EmbedFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   embedmessage.MessageTable,
			Columns: []string{embedmessage.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   embedmessage.MessageTable,
			Columns: []string{embedmessage.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, emu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedmessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmbedMessageUpdateOne is the builder for updating a single EmbedMessage entity.
type EmbedMessageUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmbedMessageMutation
}

// SetData sets the "data" field.
func (emuo *EmbedMessageUpdateOne) SetData(v *v1.Embed) *EmbedMessageUpdateOne {
	emuo.mutation.SetData(v)
	return emuo
}

// AddEmbedFieldIDs adds the "embed_field" edge to the EmbedField entity by IDs.
func (emuo *EmbedMessageUpdateOne) AddEmbedFieldIDs(ids ...int) *EmbedMessageUpdateOne {
	emuo.mutation.AddEmbedFieldIDs(ids...)
	return emuo
}

// AddEmbedField adds the "embed_field" edges to the EmbedField entity.
func (emuo *EmbedMessageUpdateOne) AddEmbedField(e ...*EmbedField) *EmbedMessageUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.AddEmbedFieldIDs(ids...)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (emuo *EmbedMessageUpdateOne) SetMessageID(id uint64) *EmbedMessageUpdateOne {
	emuo.mutation.SetMessageID(id)
	return emuo
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (emuo *EmbedMessageUpdateOne) SetNillableMessageID(id *uint64) *EmbedMessageUpdateOne {
	if id != nil {
		emuo = emuo.SetMessageID(*id)
	}
	return emuo
}

// SetMessage sets the "message" edge to the Message entity.
func (emuo *EmbedMessageUpdateOne) SetMessage(m *Message) *EmbedMessageUpdateOne {
	return emuo.SetMessageID(m.ID)
}

// Mutation returns the EmbedMessageMutation object of the builder.
func (emuo *EmbedMessageUpdateOne) Mutation() *EmbedMessageMutation {
	return emuo.mutation
}

// ClearEmbedField clears all "embed_field" edges to the EmbedField entity.
func (emuo *EmbedMessageUpdateOne) ClearEmbedField() *EmbedMessageUpdateOne {
	emuo.mutation.ClearEmbedField()
	return emuo
}

// RemoveEmbedFieldIDs removes the "embed_field" edge to EmbedField entities by IDs.
func (emuo *EmbedMessageUpdateOne) RemoveEmbedFieldIDs(ids ...int) *EmbedMessageUpdateOne {
	emuo.mutation.RemoveEmbedFieldIDs(ids...)
	return emuo
}

// RemoveEmbedField removes "embed_field" edges to EmbedField entities.
func (emuo *EmbedMessageUpdateOne) RemoveEmbedField(e ...*EmbedField) *EmbedMessageUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emuo.RemoveEmbedFieldIDs(ids...)
}

// ClearMessage clears the "message" edge to the Message entity.
func (emuo *EmbedMessageUpdateOne) ClearMessage() *EmbedMessageUpdateOne {
	emuo.mutation.ClearMessage()
	return emuo
}

// Save executes the query and returns the updated EmbedMessage entity.
func (emuo *EmbedMessageUpdateOne) Save(ctx context.Context) (*EmbedMessage, error) {
	var (
		err  error
		node *EmbedMessage
	)
	if len(emuo.hooks) == 0 {
		node, err = emuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			emuo.mutation = mutation
			node, err = emuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(emuo.hooks) - 1; i >= 0; i-- {
			mut = emuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, emuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (emuo *EmbedMessageUpdateOne) SaveX(ctx context.Context) *EmbedMessage {
	node, err := emuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (emuo *EmbedMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := emuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (emuo *EmbedMessageUpdateOne) ExecX(ctx context.Context) {
	if err := emuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (emuo *EmbedMessageUpdateOne) sqlSave(ctx context.Context) (_node *EmbedMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedmessage.Table,
			Columns: embedmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedmessage.FieldID,
			},
		},
	}
	id, ok := emuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EmbedMessage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := emuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := emuo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: embedmessage.FieldData,
		})
	}
	if emuo.mutation.EmbedFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.RemovedEmbedFieldIDs(); len(nodes) > 0 && !emuo.mutation.EmbedFieldCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.EmbedFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if emuo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   embedmessage.MessageTable,
			Columns: []string{embedmessage.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := emuo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   embedmessage.MessageTable,
			Columns: []string{embedmessage.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmbedMessage{config: emuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, emuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{embedmessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
