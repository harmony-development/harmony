// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package queries

import (
	"context"
	"database/sql"
)

const addForeignUser = `-- name: AddForeignUser :one
INSERT INTO Foreign_Users (User_ID, Home_Server, Local_User_ID)
VALUES ($1, $2, $3) ON CONFLICT (Local_User_ID) DO
UPDATE
SET Local_User_ID = Foreign_Users.Local_User_ID RETURNING Local_User_ID
`

type AddForeignUserParams struct {
	UserID      uint64 `json:"user_id"`
	HomeServer  string `json:"home_server"`
	LocalUserID uint64 `json:"local_user_id"`
}

func (q *Queries) AddForeignUser(ctx context.Context, arg AddForeignUserParams) (uint64, error) {
	row := q.queryRow(ctx, q.addForeignUserStmt, addForeignUser, arg.UserID, arg.HomeServer, arg.LocalUserID)
	var local_user_id uint64
	err := row.Scan(&local_user_id)
	return local_user_id, err
}

const addLocalUser = `-- name: AddLocalUser :exec
INSERT INTO Local_Users (User_ID, Email, Password)
VALUES ($1, $2, $3)
`

type AddLocalUserParams struct {
	UserID   uint64 `json:"user_id"`
	Email    string `json:"email"`
	Password []byte `json:"password"`
}

func (q *Queries) AddLocalUser(ctx context.Context, arg AddLocalUserParams) error {
	_, err := q.exec(ctx, q.addLocalUserStmt, addLocalUser, arg.UserID, arg.Email, arg.Password)
	return err
}

const addProfile = `-- name: AddProfile :exec
INSERT INTO Profiles(User_ID, Username, Avatar, Status)
VALUES ($1, $2, $3, $4)
`

type AddProfileParams struct {
	UserID   uint64         `json:"user_id"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Status   int16          `json:"status"`
}

func (q *Queries) AddProfile(ctx context.Context, arg AddProfileParams) error {
	_, err := q.exec(ctx, q.addProfileStmt, addProfile,
		arg.UserID,
		arg.Username,
		arg.Avatar,
		arg.Status,
	)
	return err
}

const addToGuildList = `-- name: AddToGuildList :exec
INSERT INTO Guild_List (User_ID, Guild_ID, Home_Server, Position)
VALUES($1, $2, $3, $4)
`

type AddToGuildListParams struct {
	UserID     uint64 `json:"user_id"`
	GuildID    uint64 `json:"guild_id"`
	HomeServer string `json:"home_server"`
	Position   string `json:"position"`
}

func (q *Queries) AddToGuildList(ctx context.Context, arg AddToGuildListParams) error {
	_, err := q.exec(ctx, q.addToGuildListStmt, addToGuildList,
		arg.UserID,
		arg.GuildID,
		arg.HomeServer,
		arg.Position,
	)
	return err
}

const addUser = `-- name: AddUser :exec
INSERT INTO Users (User_ID)
VALUES ($1)
`

func (q *Queries) AddUser(ctx context.Context, userID uint64) error {
	_, err := q.exec(ctx, q.addUserStmt, addUser, userID)
	return err
}

const emailExists = `-- name: EmailExists :one
SELECT COUNT(*)
FROM Local_Users
WHERE Email = $1
`

func (q *Queries) EmailExists(ctx context.Context, email string) (int64, error) {
	row := q.queryRow(ctx, q.emailExistsStmt, emailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAvatar = `-- name: GetAvatar :one
SELECT Avatar
FROM Profiles
WHERE User_ID = $1
`

func (q *Queries) GetAvatar(ctx context.Context, userID uint64) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getAvatarStmt, getAvatar, userID)
	var avatar sql.NullString
	err := row.Scan(&avatar)
	return avatar, err
}

const getGuildList = `-- name: GetGuildList :many
SELECT Guild_ID,
  Home_Server
FROM Guild_List
WHERE User_ID = $1
ORDER BY Position
`

type GetGuildListRow struct {
	GuildID    uint64 `json:"guild_id"`
	HomeServer string `json:"home_server"`
}

func (q *Queries) GetGuildList(ctx context.Context, userID uint64) ([]GetGuildListRow, error) {
	rows, err := q.query(ctx, q.getGuildListStmt, getGuildList, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGuildListRow
	for rows.Next() {
		var i GetGuildListRow
		if err := rows.Scan(&i.GuildID, &i.HomeServer); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildListPosition = `-- name: GetGuildListPosition :one
SELECT Position
FROM Guild_List
WHERE User_ID = $1
  AND Guild_ID = $2
  AND Home_Server = $3
`

type GetGuildListPositionParams struct {
	UserID     uint64 `json:"user_id"`
	GuildID    uint64 `json:"guild_id"`
	HomeServer string `json:"home_server"`
}

func (q *Queries) GetGuildListPosition(ctx context.Context, arg GetGuildListPositionParams) (string, error) {
	row := q.queryRow(ctx, q.getGuildListPositionStmt, getGuildListPosition, arg.UserID, arg.GuildID, arg.HomeServer)
	var position string
	err := row.Scan(&position)
	return position, err
}

const getLastGuildPositionInList = `-- name: GetLastGuildPositionInList :one
SELECT Position
FROM Guild_List
WHERE User_ID = $1
ORDER BY Position
LIMIT 1
`

func (q *Queries) GetLastGuildPositionInList(ctx context.Context, userID uint64) (string, error) {
	row := q.queryRow(ctx, q.getLastGuildPositionInListStmt, getLastGuildPositionInList, userID)
	var position string
	err := row.Scan(&position)
	return position, err
}

const getLocalUserID = `-- name: GetLocalUserID :one
SELECT Local_User_ID
FROM Foreign_Users
WHERE User_ID = $1
  AND Home_Server = $2
`

type GetLocalUserIDParams struct {
	UserID     uint64 `json:"user_id"`
	HomeServer string `json:"home_server"`
}

func (q *Queries) GetLocalUserID(ctx context.Context, arg GetLocalUserIDParams) (uint64, error) {
	row := q.queryRow(ctx, q.getLocalUserIDStmt, getLocalUserID, arg.UserID, arg.HomeServer)
	var local_user_id uint64
	err := row.Scan(&local_user_id)
	return local_user_id, err
}

const getUser = `-- name: GetUser :one
SELECT Users.User_ID,
  Profiles.Username,
  Profiles.Avatar,
  Profiles.Status
FROM Users
  INNER JOIN Profiles ON (Users.User_ID = Profiles.User_ID)
WHERE Users.User_ID = $1
`

type GetUserRow struct {
	UserID   uint64         `json:"user_id"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Status   int16          `json:"status"`
}

func (q *Queries) GetUser(ctx context.Context, userID uint64) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Avatar,
		&i.Status,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT Users.User_ID,
  Local_Users.Email,
  Profiles.Username,
  Profiles.Avatar,
  Profiles.Status,
  Local_Users.Password
FROM Local_Users
  INNER JOIN Users ON (Local_Users.User_ID = Users.User_ID)
  INNER JOIN Profiles ON (Local_Users.User_ID = Profiles.User_ID)
WHERE Local_Users.Email = $1
`

type GetUserByEmailRow struct {
	UserID   uint64         `json:"user_id"`
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Status   int16          `json:"status"`
	Password []byte         `json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.Status,
		&i.Password,
	)
	return i, err
}

const getUserMetadata = `-- name: GetUserMetadata :one
SELECT Metadata
FROM User_Metadata
WHERE User_ID = $1
  AND App_ID = $2
`

type GetUserMetadataParams struct {
	UserID uint64 `json:"user_id"`
	AppID  string `json:"app_id"`
}

func (q *Queries) GetUserMetadata(ctx context.Context, arg GetUserMetadataParams) (string, error) {
	row := q.queryRow(ctx, q.getUserMetadataStmt, getUserMetadata, arg.UserID, arg.AppID)
	var metadata string
	err := row.Scan(&metadata)
	return metadata, err
}

const isIPWhitelisted = `-- name: IsIPWhitelisted :one
SELECT EXISTS (
    SELECT 1
    FROM Rate_Limit_Whitelist_IP
    WHERE IP = $1
  )
`

func (q *Queries) IsIPWhitelisted(ctx context.Context, ip string) (bool, error) {
	row := q.queryRow(ctx, q.isIPWhitelistedStmt, isIPWhitelisted, ip)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUserWhitelisted = `-- name: IsUserWhitelisted :one
SELECT EXISTS (
    SELECT 1
    FROM Rate_Limit_Whitelist_User
    WHERE User_ID = $1
  )
`

func (q *Queries) IsUserWhitelisted(ctx context.Context, userID uint64) (bool, error) {
	row := q.queryRow(ctx, q.isUserWhitelistedStmt, isUserWhitelisted, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const moveGuild = `-- name: MoveGuild :exec
UPDATE Guild_List
SET Position = $1
WHERE User_ID = $1
  AND Guild_ID = $2
  AND Home_Server = $3
`

type MoveGuildParams struct {
	Position   string `json:"position"`
	GuildID    uint64 `json:"guild_id"`
	HomeServer string `json:"home_server"`
}

func (q *Queries) MoveGuild(ctx context.Context, arg MoveGuildParams) error {
	_, err := q.exec(ctx, q.moveGuildStmt, moveGuild, arg.Position, arg.GuildID, arg.HomeServer)
	return err
}

const removeGuildFromList = `-- name: RemoveGuildFromList :exec
DELETE FROM Guild_List
WHERE User_ID = $1
  AND Guild_ID = $2
  AND Home_Server = $3
`

type RemoveGuildFromListParams struct {
	UserID     uint64 `json:"user_id"`
	GuildID    uint64 `json:"guild_id"`
	HomeServer string `json:"home_server"`
}

func (q *Queries) RemoveGuildFromList(ctx context.Context, arg RemoveGuildFromListParams) error {
	_, err := q.exec(ctx, q.removeGuildFromListStmt, removeGuildFromList, arg.UserID, arg.GuildID, arg.HomeServer)
	return err
}

const setStatus = `-- name: SetStatus :exec
UPDATE Profiles
SET Status = $1
WHERE User_ID = $2
`

type SetStatusParams struct {
	Status int16  `json:"status"`
	UserID uint64 `json:"user_id"`
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.exec(ctx, q.setStatusStmt, setStatus, arg.Status, arg.UserID)
	return err
}

const updateAvatar = `-- name: UpdateAvatar :exec
UPDATE Profiles
SET Avatar = $1
WHERE User_ID = $2
`

type UpdateAvatarParams struct {
	Avatar sql.NullString `json:"avatar"`
	UserID uint64         `json:"user_id"`
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) error {
	_, err := q.exec(ctx, q.updateAvatarStmt, updateAvatar, arg.Avatar, arg.UserID)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE Profiles
SET Username = $1
WHERE User_ID = $2
`

type UpdateUsernameParams struct {
	Username string `json:"username"`
	UserID   uint64 `json:"user_id"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.exec(ctx, q.updateUsernameStmt, updateUsername, arg.Username, arg.UserID)
	return err
}

const userIsLocal = `-- name: UserIsLocal :one
SELECT EXISTS(
    SELECT 1
    FROM Local_Users
    WHERE User_ID = $1
  )
`

func (q *Queries) UserIsLocal(ctx context.Context, userID uint64) (bool, error) {
	row := q.queryRow(ctx, q.userIsLocalStmt, userIsLocal, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
