// Code generated by entc, DO NOT EDIT.

package file

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldContenttype holds the string denoting the contenttype field in the database.
	FieldContenttype = "contenttype"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// EdgeFilehash holds the string denoting the filehash edge name in mutations.
	EdgeFilehash = "filehash"
	// EdgeEmote holds the string denoting the emote edge name in mutations.
	EdgeEmote = "emote"
	// Table holds the table name of the file in the database.
	Table = "files"
	// FilehashTable is the table the holds the filehash relation/edge.
	FilehashTable = "files"
	// FilehashInverseTable is the table name for the FileHash entity.
	// It exists in this package in order to avoid circular dependency with the "filehash" package.
	FilehashInverseTable = "file_hashes"
	// FilehashColumn is the table column denoting the filehash relation/edge.
	FilehashColumn = "file_hash_file"
	// EmoteTable is the table the holds the emote relation/edge.
	EmoteTable = "files"
	// EmoteInverseTable is the table name for the Emote entity.
	// It exists in this package in order to avoid circular dependency with the "emote" package.
	EmoteInverseTable = "emotes"
	// EmoteColumn is the table column denoting the emote relation/edge.
	EmoteColumn = "emote_file"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldContenttype,
	FieldSize,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "files"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"emote_file",
	"file_hash_file",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
