// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/v1/core.proto

package corev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _core_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	// no validation rules for Url

	// no validation rules for Id

	// no validation rules for Type

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on EmbedHeading with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmbedHeading) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	// no validation rules for Subtext

	// no validation rules for Url

	// no validation rules for Icon

	return nil
}

// EmbedHeadingValidationError is the validation error returned by
// EmbedHeading.Validate if the designated constraints aren't met.
type EmbedHeadingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedHeadingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedHeadingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedHeadingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedHeadingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedHeadingValidationError) ErrorName() string { return "EmbedHeadingValidationError" }

// Error satisfies the builtin error interface
func (e EmbedHeadingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbedHeading.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedHeadingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedHeadingValidationError{}

// Validate checks the field values on EmbedField with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmbedField) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for Body

	// no validation rules for ImageUrl

	// no validation rules for Presentation

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmbedFieldValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EmbedFieldValidationError is the validation error returned by
// EmbedField.Validate if the designated constraints aren't met.
type EmbedFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedFieldValidationError) ErrorName() string { return "EmbedFieldValidationError" }

// Error satisfies the builtin error interface
func (e EmbedFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbedField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedFieldValidationError{}

// Validate checks the field values on Embed with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Embed) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for Color

	if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmbedValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFooter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmbedValidationError{
				field:  "Footer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmbedValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmbedValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EmbedValidationError is the validation error returned by Embed.Validate if
// the designated constraints aren't met.
type EmbedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedValidationError) ErrorName() string { return "EmbedValidationError" }

// Error satisfies the builtin error interface
func (e EmbedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedValidationError{}

// Validate checks the field values on CreateGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetGuildName()) < 1 {
		return CreateGuildRequestValidationError{
			field:  "GuildName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for PictureUrl

	return nil
}

// CreateGuildRequestValidationError is the validation error returned by
// CreateGuildRequest.Validate if the designated constraints aren't met.
type CreateGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuildRequestValidationError) ErrorName() string {
	return "CreateGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuildRequestValidationError{}

// Validate checks the field values on CreateGuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGuildResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	return nil
}

// CreateGuildResponseValidationError is the validation error returned by
// CreateGuildResponse.Validate if the designated constraints aren't met.
type CreateGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuildResponseValidationError) ErrorName() string {
	return "CreateGuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuildResponseValidationError{}

// Validate checks the field values on CreateInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInviteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return CreateInviteRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetForGuild() <= 0 {
		return CreateInviteRequestValidationError{
			field:  "ForGuild",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for PossibleUses

	return nil
}

// CreateInviteRequestValidationError is the validation error returned by
// CreateInviteRequest.Validate if the designated constraints aren't met.
type CreateInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteRequestValidationError) ErrorName() string {
	return "CreateInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteRequestValidationError{}

// Validate checks the field values on CreateInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInviteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// CreateInviteResponseValidationError is the validation error returned by
// CreateInviteResponse.Validate if the designated constraints aren't met.
type CreateInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInviteResponseValidationError) ErrorName() string {
	return "CreateInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInviteResponseValidationError{}

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChannelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return CreateChannelRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetChannelName()) < 1 {
		return CreateChannelRequestValidationError{
			field:  "ChannelName",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on CreateChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChannelResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelId

	return nil
}

// CreateChannelResponseValidationError is the validation error returned by
// CreateChannelResponse.Validate if the designated constraints aren't met.
type CreateChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelResponseValidationError) ErrorName() string {
	return "CreateChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelResponseValidationError{}

// Validate checks the field values on GetGuildRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return GetGuildRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetGuildRequestValidationError is the validation error returned by
// GetGuildRequest.Validate if the designated constraints aren't met.
type GetGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildRequestValidationError) ErrorName() string { return "GetGuildRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildRequestValidationError{}

// Validate checks the field values on GetGuildResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGuildResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildName

	// no validation rules for GuildOwner

	// no validation rules for GuildPicture

	return nil
}

// GetGuildResponseValidationError is the validation error returned by
// GetGuildResponse.Validate if the designated constraints aren't met.
type GetGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildResponseValidationError) ErrorName() string { return "GetGuildResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildResponseValidationError{}

// Validate checks the field values on GetGuildInvitesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildInvitesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return GetGuildInvitesRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetGuildInvitesRequestValidationError is the validation error returned by
// GetGuildInvitesRequest.Validate if the designated constraints aren't met.
type GetGuildInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInvitesRequestValidationError) ErrorName() string {
	return "GetGuildInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInvitesRequestValidationError{}

// Validate checks the field values on GetGuildInvitesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildInvitesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGuildInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGuildInvitesResponseValidationError is the validation error returned by
// GetGuildInvitesResponse.Validate if the designated constraints aren't met.
type GetGuildInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInvitesResponseValidationError) ErrorName() string {
	return "GetGuildInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInvitesResponseValidationError{}

// Validate checks the field values on GetGuildMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return GetGuildMembersRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetGuildMembersRequestValidationError is the validation error returned by
// GetGuildMembersRequest.Validate if the designated constraints aren't met.
type GetGuildMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildMembersRequestValidationError) ErrorName() string {
	return "GetGuildMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildMembersRequestValidationError{}

// Validate checks the field values on GetGuildMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetGuildMembersResponseValidationError is the validation error returned by
// GetGuildMembersResponse.Validate if the designated constraints aren't met.
type GetGuildMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildMembersResponseValidationError) ErrorName() string {
	return "GetGuildMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildMembersResponseValidationError{}

// Validate checks the field values on GetGuildChannelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildChannelsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return GetGuildChannelsRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetGuildChannelsRequestValidationError is the validation error returned by
// GetGuildChannelsRequest.Validate if the designated constraints aren't met.
type GetGuildChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsRequestValidationError) ErrorName() string {
	return "GetGuildChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsRequestValidationError{}

// Validate checks the field values on GetGuildChannelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildChannelsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGuildChannelsResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGuildChannelsResponseValidationError is the validation error returned by
// GetGuildChannelsResponse.Validate if the designated constraints aren't met.
type GetGuildChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsResponseValidationError) ErrorName() string {
	return "GetGuildChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsResponseValidationError{}

// Validate checks the field values on GetChannelMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetChannelMessagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return GetChannelMessagesRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetChannelId() <= 0 {
		return GetChannelMessagesRequestValidationError{
			field:  "ChannelId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for BeforeMessage

	return nil
}

// GetChannelMessagesRequestValidationError is the validation error returned by
// GetChannelMessagesRequest.Validate if the designated constraints aren't met.
type GetChannelMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMessagesRequestValidationError) ErrorName() string {
	return "GetChannelMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMessagesRequestValidationError{}

// Validate checks the field values on GetChannelMessagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetChannelMessagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChannelMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetChannelMessagesResponseValidationError is the validation error returned
// by GetChannelMessagesResponse.Validate if the designated constraints aren't met.
type GetChannelMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMessagesResponseValidationError) ErrorName() string {
	return "GetChannelMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMessagesResponseValidationError{}

// Validate checks the field values on UpdateGuildNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGuildNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return UpdateGuildNameRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetNewGuildName()) < 1 {
		return UpdateGuildNameRequestValidationError{
			field:  "NewGuildName",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UpdateGuildNameRequestValidationError is the validation error returned by
// UpdateGuildNameRequest.Validate if the designated constraints aren't met.
type UpdateGuildNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildNameRequestValidationError) ErrorName() string {
	return "UpdateGuildNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildNameRequestValidationError{}

// Validate checks the field values on UpdateGuildNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGuildNameResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGuildNameResponseValidationError is the validation error returned by
// UpdateGuildNameResponse.Validate if the designated constraints aren't met.
type UpdateGuildNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildNameResponseValidationError) ErrorName() string {
	return "UpdateGuildNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildNameResponseValidationError{}

// Validate checks the field values on UpdateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMessageId() <= 0 {
		return UpdateMessageRequestValidationError{
			field:  "MessageId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Content

	// no validation rules for UpdateContent

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMessageRequestValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateEmbeds

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMessageRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateActions

	return nil
}

// UpdateMessageRequestValidationError is the validation error returned by
// UpdateMessageRequest.Validate if the designated constraints aren't met.
type UpdateMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMessageRequestValidationError) ErrorName() string {
	return "UpdateMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMessageRequestValidationError{}

// Validate checks the field values on DeleteGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGuildRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return DeleteGuildRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteGuildRequestValidationError is the validation error returned by
// DeleteGuildRequest.Validate if the designated constraints aren't met.
type DeleteGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGuildRequestValidationError) ErrorName() string {
	return "DeleteGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGuildRequestValidationError{}

// Validate checks the field values on DeleteInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteInviteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for InviteId

	return nil
}

// DeleteInviteRequestValidationError is the validation error returned by
// DeleteInviteRequest.Validate if the designated constraints aren't met.
type DeleteInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInviteRequestValidationError) ErrorName() string {
	return "DeleteInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInviteRequestValidationError{}

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteChannelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return DeleteChannelRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetChannelId() <= 0 {
		return DeleteChannelRequestValidationError{
			field:  "ChannelId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteMessageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetGuildId() <= 0 {
		return DeleteMessageRequestValidationError{
			field:  "GuildId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetChannelId() <= 0 {
		return DeleteMessageRequestValidationError{
			field:  "ChannelId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMessageId() <= 0 {
		return DeleteMessageRequestValidationError{
			field:  "MessageId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DeleteMessageRequestValidationError is the validation error returned by
// DeleteMessageRequest.Validate if the designated constraints aren't met.
type DeleteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageRequestValidationError) ErrorName() string {
	return "DeleteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageRequestValidationError{}

// Validate checks the field values on GetGuildInvitesResponse_Invite with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildInvitesResponse_Invite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InviteId

	// no validation rules for PossibleUses

	// no validation rules for UseCount

	return nil
}

// GetGuildInvitesResponse_InviteValidationError is the validation error
// returned by GetGuildInvitesResponse_Invite.Validate if the designated
// constraints aren't met.
type GetGuildInvitesResponse_InviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInvitesResponse_InviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInvitesResponse_InviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInvitesResponse_InviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInvitesResponse_InviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInvitesResponse_InviteValidationError) ErrorName() string {
	return "GetGuildInvitesResponse_InviteValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInvitesResponse_InviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInvitesResponse_Invite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInvitesResponse_InviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInvitesResponse_InviteValidationError{}

// Validate checks the field values on GetGuildChannelsResponse_Channel with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetGuildChannelsResponse_Channel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelId

	// no validation rules for ChannelName

	return nil
}

// GetGuildChannelsResponse_ChannelValidationError is the validation error
// returned by GetGuildChannelsResponse_Channel.Validate if the designated
// constraints aren't met.
type GetGuildChannelsResponse_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsResponse_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsResponse_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsResponse_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsResponse_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsResponse_ChannelValidationError) ErrorName() string {
	return "GetGuildChannelsResponse_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsResponse_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsResponse_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsResponse_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsResponse_ChannelValidationError{}

// Validate checks the field values on GetChannelMessagesResponse_Message with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetChannelMessagesResponse_Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for MessageId

	// no validation rules for AuthorId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChannelMessagesResponse_MessageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEditedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChannelMessagesResponse_MessageValidationError{
				field:  "EditedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChannelMessagesResponse_MessageValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChannelMessagesResponse_MessageValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetChannelMessagesResponse_MessageValidationError is the validation error
// returned by GetChannelMessagesResponse_Message.Validate if the designated
// constraints aren't met.
type GetChannelMessagesResponse_MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelMessagesResponse_MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelMessagesResponse_MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelMessagesResponse_MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelMessagesResponse_MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelMessagesResponse_MessageValidationError) ErrorName() string {
	return "GetChannelMessagesResponse_MessageValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelMessagesResponse_MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelMessagesResponse_Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelMessagesResponse_MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelMessagesResponse_MessageValidationError{}
