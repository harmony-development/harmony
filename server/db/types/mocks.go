// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package types

import (
	harmonytypesv1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	"github.com/harmony-development/legato/server/db/ent/entgen"
	"sync"
	"time"
)

// Ensure, that IHarmonyDBMock does implement IHarmonyDB.
// If this is not the case, regenerate this file with moq.
var _ IHarmonyDB = &IHarmonyDBMock{}

// IHarmonyDBMock is a mock implementation of IHarmonyDB.
//
// 	func TestSomethingThatUsesIHarmonyDB(t *testing.T) {
//
// 		// make and configure a mocked IHarmonyDB
// 		mockedIHarmonyDB := &IHarmonyDBMock{
// 			AddChannelToGuildFunc: func(guildID uint64, channelID uint64, channelName string, previous *uint64, next *uint64, kind ChannelKind, md []byte) (entgen.Channel, error) {
// 				panic("mock out the AddChannelToGuild method")
// 			},
// 			AddEmbedMessageFunc: func(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, embeds []*harmonytypesv1.Embed) (time.Time, error) {
// 				panic("mock out the AddEmbedMessage method")
// 			},
// 			AddEmoteToPackFunc: func(packID uint64, imageID string, name string) error {
// 				panic("mock out the AddEmoteToPack method")
// 			},
// 			AddFileHashFunc: func(fileID string, hash []byte) error {
// 				panic("mock out the AddFileHash method")
// 			},
// 			AddFilesMessageFunc: func(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, files []*harmonytypesv1.Attachment) (time.Time, error) {
// 				panic("mock out the AddFilesMessage method")
// 			},
// 			AddForeignUserFunc: func(host string, userID uint64, localUserID uint64, username string, avatar string) error {
// 				panic("mock out the AddForeignUser method")
// 			},
// 			AddGuildToListFunc: func(userID uint64, guildID uint64, homeServer string) error {
// 				panic("mock out the AddGuildToList method")
// 			},
// 			AddLocalUserFunc: func(userID uint64, email string, username string, passwordHash []byte) error {
// 				panic("mock out the AddLocalUser method")
// 			},
// 			AddMemberToGuildFunc: func(userID uint64, guildID uint64) error {
// 				panic("mock out the AddMemberToGuild method")
// 			},
// 			AddRoleToGuildFunc: func(guildID uint64, roleID uint64, name string, color int, hoist bool, pingable bool) error {
// 				panic("mock out the AddRoleToGuild method")
// 			},
// 			AddSessionFunc: func(userID uint64, session string) error {
// 				panic("mock out the AddSession method")
// 			},
// 			AddTextMessageFunc: func(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, content string) (time.Time, error) {
// 				panic("mock out the AddTextMessage method")
// 			},
// 			BanUserFunc: func(guildID uint64, userID uint64) error {
// 				panic("mock out the BanUser method")
// 			},
// 			ChannelsForGuildFunc: func(guildID uint64) ([]*entgen.Channel, error) {
// 				panic("mock out the ChannelsForGuild method")
// 			},
// 			CountMembersInGuildFunc: func(guildID uint64) (int64, error) {
// 				panic("mock out the CountMembersInGuild method")
// 			},
// 			CreateEmotePackFunc: func(userID uint64, packID uint64, packName string) error {
// 				panic("mock out the CreateEmotePack method")
// 			},
// 			CreateGuildFunc: func(owner uint64, id uint64, channelID uint64, guildName string, picture string) (*entgen.Guild, error) {
// 				panic("mock out the CreateGuild method")
// 			},
// 			CreateInviteFunc: func(guildID uint64, possibleUses int32, name string) (*entgen.Invite, error) {
// 				panic("mock out the CreateInvite method")
// 			},
// 			DeleteChannelFromGuildFunc: func(guildID uint64, channelID uint64) error {
// 				panic("mock out the DeleteChannelFromGuild method")
// 			},
// 			DeleteEmoteFromPackFunc: func(packID uint64, emoteID string) error {
// 				panic("mock out the DeleteEmoteFromPack method")
// 			},
// 			DeleteEmotePackFunc: func(packID uint64) error {
// 				panic("mock out the DeleteEmotePack method")
// 			},
// 			DeleteFileMetaFunc: func(fileID string) error {
// 				panic("mock out the DeleteFileMeta method")
// 			},
// 			DeleteGuildFunc: func(guildID uint64) error {
// 				panic("mock out the DeleteGuild method")
// 			},
// 			DeleteInviteFunc: func(inviteID string) error {
// 				panic("mock out the DeleteInvite method")
// 			},
// 			DeleteMemberFunc: func(guildID uint64, userID uint64) error {
// 				panic("mock out the DeleteMember method")
// 			},
// 			DeleteMessageFunc: func(messageID uint64) error {
// 				panic("mock out the DeleteMessage method")
// 			},
// 			DequipEmotePackFunc: func(userID uint64, packID uint64) error {
// 				panic("mock out the DequipEmotePack method")
// 			},
// 			EmailExistsFunc: func(email string) (bool, error) {
// 				panic("mock out the EmailExists method")
// 			},
// 			ExpireSessionsFunc: func() error {
// 				panic("mock out the ExpireSessions method")
// 			},
// 			ExtendSessionFunc: func(session string) error {
// 				panic("mock out the ExtendSession method")
// 			},
// 			GetAvatarFunc: func(userID uint64) (*string, error) {
// 				panic("mock out the GetAvatar method")
// 			},
// 			GetChannelListPositionFunc: func(channelID uint64) (string, error) {
// 				panic("mock out the GetChannelListPosition method")
// 			},
// 			GetEmotePackEmotesFunc: func(packID uint64) ([]*entgen.Emote, error) {
// 				panic("mock out the GetEmotePackEmotes method")
// 			},
// 			GetEmotePacksFunc: func(userID uint64) ([]*entgen.EmotePack, error) {
// 				panic("mock out the GetEmotePacks method")
// 			},
// 			GetFileIDByHashFunc: func(hash []byte) (string, error) {
// 				panic("mock out the GetFileIDByHash method")
// 			},
// 			GetFileMetadataFunc: func(fileID string) (*entgen.File, error) {
// 				panic("mock out the GetFileMetadata method")
// 			},
// 			GetFirstChannelFunc: func(guildID uint64) (uint64, error) {
// 				panic("mock out the GetFirstChannel method")
// 			},
// 			GetGuildByIDFunc: func(guildID uint64) (*entgen.Guild, error) {
// 				panic("mock out the GetGuildByID method")
// 			},
// 			GetGuildListFunc: func(userID uint64) ([]*entgen.GuildListEntry, error) {
// 				panic("mock out the GetGuildList method")
// 			},
// 			GetGuildListPositionFunc: func(userID uint64, guildID uint64, homeServer string) (string, error) {
// 				panic("mock out the GetGuildListPosition method")
// 			},
// 			GetGuildPictureFunc: func(guildID uint64) (string, error) {
// 				panic("mock out the GetGuildPicture method")
// 			},
// 			GetGuildRolesFunc: func(guildID uint64) ([]*entgen.Role, error) {
// 				panic("mock out the GetGuildRoles method")
// 			},
// 			GetInvitesFunc: func(guildID uint64) ([]*entgen.Invite, error) {
// 				panic("mock out the GetInvites method")
// 			},
// 			GetLocalGuildsFunc: func(userID uint64) ([]uint64, error) {
// 				panic("mock out the GetLocalGuilds method")
// 			},
// 			GetLocalUserForForeignUserFunc: func(userID uint64, host string) (uint64, error) {
// 				panic("mock out the GetLocalUserForForeignUser method")
// 			},
// 			GetMessageFunc: func(messageID uint64) (*entgen.Message, error) {
// 				panic("mock out the GetMessage method")
// 			},
// 			GetMessagesFunc: func(channelID uint64) ([]*entgen.Message, error) {
// 				panic("mock out the GetMessages method")
// 			},
// 			GetMessagesBeforeFunc: func(channelID uint64, date time.Time) ([]*entgen.Message, error) {
// 				panic("mock out the GetMessagesBefore method")
// 			},
// 			GetOwnerFunc: func(guildID uint64) (uint64, error) {
// 				panic("mock out the GetOwner method")
// 			},
// 			GetPermissionsFunc: func(roleID uint64) ([]PermissionsNode, error) {
// 				panic("mock out the GetPermissions method")
// 			},
// 			GetPermissionsDataFunc: func(guildID uint64) (PermissionsData, error) {
// 				panic("mock out the GetPermissionsData method")
// 			},
// 			GetUserByEmailFunc: func(email string) (UserData, error) {
// 				panic("mock out the GetUserByEmail method")
// 			},
// 			GetUserByIDFunc: func(userID uint64) (UserData, error) {
// 				panic("mock out the GetUserByID method")
// 			},
// 			GetUserMetadataFunc: func(userID uint64, appID string) (string, error) {
// 				panic("mock out the GetUserMetadata method")
// 			},
// 			HasChannelWithIDFunc: func(guildID uint64, channelID uint64) (bool, error) {
// 				panic("mock out the HasChannelWithID method")
// 			},
// 			HasGuildWithIDFunc: func(guildID uint64) (bool, error) {
// 				panic("mock out the HasGuildWithID method")
// 			},
// 			HasMessageWithIDFunc: func(messageID uint64) (bool, error) {
// 				panic("mock out the HasMessageWithID method")
// 			},
// 			IncrementInviteFunc: func(inviteID string) error {
// 				panic("mock out the IncrementInvite method")
// 			},
// 			IsBannedFunc: func(guildID uint64, userID uint64) (bool, error) {
// 				panic("mock out the IsBanned method")
// 			},
// 			IsOwnerFunc: func(guildID uint64, userID uint64) (bool, error) {
// 				panic("mock out the IsOwner method")
// 			},
// 			IsPackOwnerFunc: func(userID uint64, packID uint64) (bool, error) {
// 				panic("mock out the IsPackOwner method")
// 			},
// 			ManageRolesFunc: func(guildID uint64, userID uint64, addRoles []uint64, removeRoles []uint64) error {
// 				panic("mock out the ManageRoles method")
// 			},
// 			MembersInGuildFunc: func(guildID uint64) ([]uint64, error) {
// 				panic("mock out the MembersInGuild method")
// 			},
// 			MigrateFunc: func() error {
// 				panic("mock out the Migrate method")
// 			},
// 			ModifyRoleFunc: func(guildID uint64, roleID uint64, name string, color int32, hoist bool, pingable bool, updateName bool, updateColor bool, updateHoist bool, updatePingable bool) error {
// 				panic("mock out the ModifyRole method")
// 			},
// 			MoveChannelFunc: func(channelID uint64, previousID *uint64, nextID *uint64) error {
// 				panic("mock out the MoveChannel method")
// 			},
// 			MoveGuildFunc: func(userID uint64, guildID uint64, homeServer string, nextGuildID uint64, prevGuildID uint64, nextHomeServer string, prevHomeServer string) error {
// 				panic("mock out the MoveGuild method")
// 			},
// 			MoveRoleFunc: func(guildID uint64, roleID uint64, previousRole uint64, nextRole uint64) error {
// 				panic("mock out the MoveRole method")
// 			},
// 			RemoveGuildFromListFunc: func(userID uint64, guildID uint64, homeServer string) error {
// 				panic("mock out the RemoveGuildFromList method")
// 			},
// 			RemoveRoleFromGuildFunc: func(guildID uint64, roleID uint64) error {
// 				panic("mock out the RemoveRoleFromGuild method")
// 			},
// 			ResolveGuildIDFunc: func(inviteID string) (uint64, error) {
// 				panic("mock out the ResolveGuildID method")
// 			},
// 			RolesForUserFunc: func(guildID uint64, userID uint64) ([]uint64, error) {
// 				panic("mock out the RolesForUser method")
// 			},
// 			SessionExpireRoutineFunc: func()  {
// 				panic("mock out the SessionExpireRoutine method")
// 			},
// 			SessionToUserIDFunc: func(session string) (uint64, error) {
// 				panic("mock out the SessionToUserID method")
// 			},
// 			SetAvatarFunc: func(userID uint64, avatar string) error {
// 				panic("mock out the SetAvatar method")
// 			},
// 			SetFileMetadataFunc: func(fileID string, contentType string, name string, size int32) error {
// 				panic("mock out the SetFileMetadata method")
// 			},
// 			SetIsBotFunc: func(userID uint64, isBot bool) error {
// 				panic("mock out the SetIsBot method")
// 			},
// 			SetPermissionsFunc: func(guildID uint64, channelID uint64, roleID uint64, permissions []PermissionsNode) error {
// 				panic("mock out the SetPermissions method")
// 			},
// 			SetStatusFunc: func(userID uint64, status harmonytypesv1.UserStatus) error {
// 				panic("mock out the SetStatus method")
// 			},
// 			SetUsernameFunc: func(userID uint64, username string) error {
// 				panic("mock out the SetUsername method")
// 			},
// 			UnbanUserFunc: func(guildID uint64, userID uint64) error {
// 				panic("mock out the UnbanUser method")
// 			},
// 			UpdateAvatarFunc: func(userID uint64, avatar string) error {
// 				panic("mock out the UpdateAvatar method")
// 			},
// 			UpdateChannelInformationFunc: func(guildID uint64, channelID uint64, name *string, metadata []byte) error {
// 				panic("mock out the UpdateChannelInformation method")
// 			},
// 			UpdateGuildInformationFunc: func(guildID uint64, name string, picture string, metadata *harmonytypesv1.Metadata, updateName bool, updatePicture bool, updateMetadata bool) error {
// 				panic("mock out the UpdateGuildInformation method")
// 			},
// 			UpdateTextMessageFunc: func(messageID uint64, content string) (time.Time, error) {
// 				panic("mock out the UpdateTextMessage method")
// 			},
// 			UpdateUsernameFunc: func(userID uint64, username string) error {
// 				panic("mock out the UpdateUsername method")
// 			},
// 			UserInGuildFunc: func(userID uint64, guildID uint64) (bool, error) {
// 				panic("mock out the UserInGuild method")
// 			},
// 			UserIsLocalFunc: func(userID uint64) error {
// 				panic("mock out the UserIsLocal method")
// 			},
// 		}
//
// 		// use mockedIHarmonyDB in code that requires IHarmonyDB
// 		// and then make assertions.
//
// 	}
type IHarmonyDBMock struct {
	// AddChannelToGuildFunc mocks the AddChannelToGuild method.
	AddChannelToGuildFunc func(guildID uint64, channelID uint64, channelName string, previous *uint64, next *uint64, kind ChannelKind, md []byte) (entgen.Channel, error)

	// AddEmbedMessageFunc mocks the AddEmbedMessage method.
	AddEmbedMessageFunc func(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, embeds []*harmonytypesv1.Embed) (time.Time, error)

	// AddEmoteToPackFunc mocks the AddEmoteToPack method.
	AddEmoteToPackFunc func(packID uint64, imageID string, name string) error

	// AddFileHashFunc mocks the AddFileHash method.
	AddFileHashFunc func(fileID string, hash []byte) error

	// AddFilesMessageFunc mocks the AddFilesMessage method.
	AddFilesMessageFunc func(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, files []*harmonytypesv1.Attachment) (time.Time, error)

	// AddForeignUserFunc mocks the AddForeignUser method.
	AddForeignUserFunc func(host string, userID uint64, localUserID uint64, username string, avatar string) error

	// AddGuildToListFunc mocks the AddGuildToList method.
	AddGuildToListFunc func(userID uint64, guildID uint64, homeServer string) error

	// AddLocalUserFunc mocks the AddLocalUser method.
	AddLocalUserFunc func(userID uint64, email string, username string, passwordHash []byte) error

	// AddMemberToGuildFunc mocks the AddMemberToGuild method.
	AddMemberToGuildFunc func(userID uint64, guildID uint64) error

	// AddRoleToGuildFunc mocks the AddRoleToGuild method.
	AddRoleToGuildFunc func(guildID uint64, roleID uint64, name string, color int, hoist bool, pingable bool) error

	// AddSessionFunc mocks the AddSession method.
	AddSessionFunc func(userID uint64, session string) error

	// AddTextMessageFunc mocks the AddTextMessage method.
	AddTextMessageFunc func(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, content string) (time.Time, error)

	// BanUserFunc mocks the BanUser method.
	BanUserFunc func(guildID uint64, userID uint64) error

	// ChannelsForGuildFunc mocks the ChannelsForGuild method.
	ChannelsForGuildFunc func(guildID uint64) ([]*entgen.Channel, error)

	// CountMembersInGuildFunc mocks the CountMembersInGuild method.
	CountMembersInGuildFunc func(guildID uint64) (int64, error)

	// CreateEmotePackFunc mocks the CreateEmotePack method.
	CreateEmotePackFunc func(userID uint64, packID uint64, packName string) error

	// CreateGuildFunc mocks the CreateGuild method.
	CreateGuildFunc func(owner uint64, id uint64, channelID uint64, guildName string, picture string) (*entgen.Guild, error)

	// CreateInviteFunc mocks the CreateInvite method.
	CreateInviteFunc func(guildID uint64, possibleUses int32, name string) (*entgen.Invite, error)

	// DeleteChannelFromGuildFunc mocks the DeleteChannelFromGuild method.
	DeleteChannelFromGuildFunc func(guildID uint64, channelID uint64) error

	// DeleteEmoteFromPackFunc mocks the DeleteEmoteFromPack method.
	DeleteEmoteFromPackFunc func(packID uint64, emoteID string) error

	// DeleteEmotePackFunc mocks the DeleteEmotePack method.
	DeleteEmotePackFunc func(packID uint64) error

	// DeleteFileMetaFunc mocks the DeleteFileMeta method.
	DeleteFileMetaFunc func(fileID string) error

	// DeleteGuildFunc mocks the DeleteGuild method.
	DeleteGuildFunc func(guildID uint64) error

	// DeleteInviteFunc mocks the DeleteInvite method.
	DeleteInviteFunc func(inviteID string) error

	// DeleteMemberFunc mocks the DeleteMember method.
	DeleteMemberFunc func(guildID uint64, userID uint64) error

	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(messageID uint64) error

	// DequipEmotePackFunc mocks the DequipEmotePack method.
	DequipEmotePackFunc func(userID uint64, packID uint64) error

	// EmailExistsFunc mocks the EmailExists method.
	EmailExistsFunc func(email string) (bool, error)

	// ExpireSessionsFunc mocks the ExpireSessions method.
	ExpireSessionsFunc func() error

	// ExtendSessionFunc mocks the ExtendSession method.
	ExtendSessionFunc func(session string) error

	// GetAvatarFunc mocks the GetAvatar method.
	GetAvatarFunc func(userID uint64) (*string, error)

	// GetChannelListPositionFunc mocks the GetChannelListPosition method.
	GetChannelListPositionFunc func(channelID uint64) (string, error)

	// GetEmotePackEmotesFunc mocks the GetEmotePackEmotes method.
	GetEmotePackEmotesFunc func(packID uint64) ([]*entgen.Emote, error)

	// GetEmotePacksFunc mocks the GetEmotePacks method.
	GetEmotePacksFunc func(userID uint64) ([]*entgen.EmotePack, error)

	// GetFileIDByHashFunc mocks the GetFileIDByHash method.
	GetFileIDByHashFunc func(hash []byte) (string, error)

	// GetFileMetadataFunc mocks the GetFileMetadata method.
	GetFileMetadataFunc func(fileID string) (*entgen.File, error)

	// GetFirstChannelFunc mocks the GetFirstChannel method.
	GetFirstChannelFunc func(guildID uint64) (uint64, error)

	// GetGuildByIDFunc mocks the GetGuildByID method.
	GetGuildByIDFunc func(guildID uint64) (*entgen.Guild, error)

	// GetGuildListFunc mocks the GetGuildList method.
	GetGuildListFunc func(userID uint64) ([]*entgen.GuildListEntry, error)

	// GetGuildListPositionFunc mocks the GetGuildListPosition method.
	GetGuildListPositionFunc func(userID uint64, guildID uint64, homeServer string) (string, error)

	// GetGuildPictureFunc mocks the GetGuildPicture method.
	GetGuildPictureFunc func(guildID uint64) (string, error)

	// GetGuildRolesFunc mocks the GetGuildRoles method.
	GetGuildRolesFunc func(guildID uint64) ([]*entgen.Role, error)

	// GetInvitesFunc mocks the GetInvites method.
	GetInvitesFunc func(guildID uint64) ([]*entgen.Invite, error)

	// GetLocalGuildsFunc mocks the GetLocalGuilds method.
	GetLocalGuildsFunc func(userID uint64) ([]uint64, error)

	// GetLocalUserForForeignUserFunc mocks the GetLocalUserForForeignUser method.
	GetLocalUserForForeignUserFunc func(userID uint64, host string) (uint64, error)

	// GetMessageFunc mocks the GetMessage method.
	GetMessageFunc func(messageID uint64) (*entgen.Message, error)

	// GetMessagesFunc mocks the GetMessages method.
	GetMessagesFunc func(channelID uint64) ([]*entgen.Message, error)

	// GetMessagesBeforeFunc mocks the GetMessagesBefore method.
	GetMessagesBeforeFunc func(channelID uint64, date time.Time) ([]*entgen.Message, error)

	// GetOwnerFunc mocks the GetOwner method.
	GetOwnerFunc func(guildID uint64) (uint64, error)

	// GetPermissionsFunc mocks the GetPermissions method.
	GetPermissionsFunc func(roleID uint64) ([]PermissionsNode, error)

	// GetPermissionsDataFunc mocks the GetPermissionsData method.
	GetPermissionsDataFunc func(guildID uint64) (PermissionsData, error)

	// GetUserByEmailFunc mocks the GetUserByEmail method.
	GetUserByEmailFunc func(email string) (UserData, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(userID uint64) (UserData, error)

	// GetUserMetadataFunc mocks the GetUserMetadata method.
	GetUserMetadataFunc func(userID uint64, appID string) (string, error)

	// HasChannelWithIDFunc mocks the HasChannelWithID method.
	HasChannelWithIDFunc func(guildID uint64, channelID uint64) (bool, error)

	// HasGuildWithIDFunc mocks the HasGuildWithID method.
	HasGuildWithIDFunc func(guildID uint64) (bool, error)

	// HasMessageWithIDFunc mocks the HasMessageWithID method.
	HasMessageWithIDFunc func(messageID uint64) (bool, error)

	// IncrementInviteFunc mocks the IncrementInvite method.
	IncrementInviteFunc func(inviteID string) error

	// IsBannedFunc mocks the IsBanned method.
	IsBannedFunc func(guildID uint64, userID uint64) (bool, error)

	// IsOwnerFunc mocks the IsOwner method.
	IsOwnerFunc func(guildID uint64, userID uint64) (bool, error)

	// IsPackOwnerFunc mocks the IsPackOwner method.
	IsPackOwnerFunc func(userID uint64, packID uint64) (bool, error)

	// ManageRolesFunc mocks the ManageRoles method.
	ManageRolesFunc func(guildID uint64, userID uint64, addRoles []uint64, removeRoles []uint64) error

	// MembersInGuildFunc mocks the MembersInGuild method.
	MembersInGuildFunc func(guildID uint64) ([]uint64, error)

	// MigrateFunc mocks the Migrate method.
	MigrateFunc func() error

	// ModifyRoleFunc mocks the ModifyRole method.
	ModifyRoleFunc func(guildID uint64, roleID uint64, name string, color int32, hoist bool, pingable bool, updateName bool, updateColor bool, updateHoist bool, updatePingable bool) error

	// MoveChannelFunc mocks the MoveChannel method.
	MoveChannelFunc func(channelID uint64, previousID *uint64, nextID *uint64) error

	// MoveGuildFunc mocks the MoveGuild method.
	MoveGuildFunc func(userID uint64, guildID uint64, homeServer string, nextGuildID uint64, prevGuildID uint64, nextHomeServer string, prevHomeServer string) error

	// MoveRoleFunc mocks the MoveRole method.
	MoveRoleFunc func(guildID uint64, roleID uint64, previousRole uint64, nextRole uint64) error

	// RemoveGuildFromListFunc mocks the RemoveGuildFromList method.
	RemoveGuildFromListFunc func(userID uint64, guildID uint64, homeServer string) error

	// RemoveRoleFromGuildFunc mocks the RemoveRoleFromGuild method.
	RemoveRoleFromGuildFunc func(guildID uint64, roleID uint64) error

	// ResolveGuildIDFunc mocks the ResolveGuildID method.
	ResolveGuildIDFunc func(inviteID string) (uint64, error)

	// RolesForUserFunc mocks the RolesForUser method.
	RolesForUserFunc func(guildID uint64, userID uint64) ([]uint64, error)

	// SessionExpireRoutineFunc mocks the SessionExpireRoutine method.
	SessionExpireRoutineFunc func()

	// SessionToUserIDFunc mocks the SessionToUserID method.
	SessionToUserIDFunc func(session string) (uint64, error)

	// SetAvatarFunc mocks the SetAvatar method.
	SetAvatarFunc func(userID uint64, avatar string) error

	// SetFileMetadataFunc mocks the SetFileMetadata method.
	SetFileMetadataFunc func(fileID string, contentType string, name string, size int32) error

	// SetIsBotFunc mocks the SetIsBot method.
	SetIsBotFunc func(userID uint64, isBot bool) error

	// SetPermissionsFunc mocks the SetPermissions method.
	SetPermissionsFunc func(guildID uint64, channelID uint64, roleID uint64, permissions []PermissionsNode) error

	// SetStatusFunc mocks the SetStatus method.
	SetStatusFunc func(userID uint64, status harmonytypesv1.UserStatus) error

	// SetUsernameFunc mocks the SetUsername method.
	SetUsernameFunc func(userID uint64, username string) error

	// UnbanUserFunc mocks the UnbanUser method.
	UnbanUserFunc func(guildID uint64, userID uint64) error

	// UpdateAvatarFunc mocks the UpdateAvatar method.
	UpdateAvatarFunc func(userID uint64, avatar string) error

	// UpdateChannelInformationFunc mocks the UpdateChannelInformation method.
	UpdateChannelInformationFunc func(guildID uint64, channelID uint64, name *string, metadata []byte) error

	// UpdateGuildInformationFunc mocks the UpdateGuildInformation method.
	UpdateGuildInformationFunc func(guildID uint64, name string, picture string, metadata *harmonytypesv1.Metadata, updateName bool, updatePicture bool, updateMetadata bool) error

	// UpdateTextMessageFunc mocks the UpdateTextMessage method.
	UpdateTextMessageFunc func(messageID uint64, content string) (time.Time, error)

	// UpdateUsernameFunc mocks the UpdateUsername method.
	UpdateUsernameFunc func(userID uint64, username string) error

	// UserInGuildFunc mocks the UserInGuild method.
	UserInGuildFunc func(userID uint64, guildID uint64) (bool, error)

	// UserIsLocalFunc mocks the UserIsLocal method.
	UserIsLocalFunc func(userID uint64) error

	// calls tracks calls to the methods.
	calls struct {
		// AddChannelToGuild holds details about calls to the AddChannelToGuild method.
		AddChannelToGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// ChannelName is the channelName argument value.
			ChannelName string
			// Previous is the previous argument value.
			Previous *uint64
			// Next is the next argument value.
			Next *uint64
			// Kind is the kind argument value.
			Kind ChannelKind
			// Md is the md argument value.
			Md []byte
		}
		// AddEmbedMessage holds details about calls to the AddEmbedMessage method.
		AddEmbedMessage []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// MessageID is the messageID argument value.
			MessageID uint64
			// AuthorID is the authorID argument value.
			AuthorID uint64
			// Actions is the actions argument value.
			Actions []*harmonytypesv1.Action
			// Overrides is the overrides argument value.
			Overrides *harmonytypesv1.Override
			// ReplyTo is the replyTo argument value.
			ReplyTo *uint64
			// Metadata is the metadata argument value.
			Metadata *harmonytypesv1.Metadata
			// Embeds is the embeds argument value.
			Embeds []*harmonytypesv1.Embed
		}
		// AddEmoteToPack holds details about calls to the AddEmoteToPack method.
		AddEmoteToPack []struct {
			// PackID is the packID argument value.
			PackID uint64
			// ImageID is the imageID argument value.
			ImageID string
			// Name is the name argument value.
			Name string
		}
		// AddFileHash holds details about calls to the AddFileHash method.
		AddFileHash []struct {
			// FileID is the fileID argument value.
			FileID string
			// Hash is the hash argument value.
			Hash []byte
		}
		// AddFilesMessage holds details about calls to the AddFilesMessage method.
		AddFilesMessage []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// MessageID is the messageID argument value.
			MessageID uint64
			// AuthorID is the authorID argument value.
			AuthorID uint64
			// Actions is the actions argument value.
			Actions []*harmonytypesv1.Action
			// Overrides is the overrides argument value.
			Overrides *harmonytypesv1.Override
			// ReplyTo is the replyTo argument value.
			ReplyTo *uint64
			// Metadata is the metadata argument value.
			Metadata *harmonytypesv1.Metadata
			// Files is the files argument value.
			Files []*harmonytypesv1.Attachment
		}
		// AddForeignUser holds details about calls to the AddForeignUser method.
		AddForeignUser []struct {
			// Host is the host argument value.
			Host string
			// UserID is the userID argument value.
			UserID uint64
			// LocalUserID is the localUserID argument value.
			LocalUserID uint64
			// Username is the username argument value.
			Username string
			// Avatar is the avatar argument value.
			Avatar string
		}
		// AddGuildToList holds details about calls to the AddGuildToList method.
		AddGuildToList []struct {
			// UserID is the userID argument value.
			UserID uint64
			// GuildID is the guildID argument value.
			GuildID uint64
			// HomeServer is the homeServer argument value.
			HomeServer string
		}
		// AddLocalUser holds details about calls to the AddLocalUser method.
		AddLocalUser []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Email is the email argument value.
			Email string
			// Username is the username argument value.
			Username string
			// PasswordHash is the passwordHash argument value.
			PasswordHash []byte
		}
		// AddMemberToGuild holds details about calls to the AddMemberToGuild method.
		AddMemberToGuild []struct {
			// UserID is the userID argument value.
			UserID uint64
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// AddRoleToGuild holds details about calls to the AddRoleToGuild method.
		AddRoleToGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// RoleID is the roleID argument value.
			RoleID uint64
			// Name is the name argument value.
			Name string
			// Color is the color argument value.
			Color int
			// Hoist is the hoist argument value.
			Hoist bool
			// Pingable is the pingable argument value.
			Pingable bool
		}
		// AddSession holds details about calls to the AddSession method.
		AddSession []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Session is the session argument value.
			Session string
		}
		// AddTextMessage holds details about calls to the AddTextMessage method.
		AddTextMessage []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// MessageID is the messageID argument value.
			MessageID uint64
			// AuthorID is the authorID argument value.
			AuthorID uint64
			// Actions is the actions argument value.
			Actions []*harmonytypesv1.Action
			// Overrides is the overrides argument value.
			Overrides *harmonytypesv1.Override
			// ReplyTo is the replyTo argument value.
			ReplyTo *uint64
			// Metadata is the metadata argument value.
			Metadata *harmonytypesv1.Metadata
			// Content is the content argument value.
			Content string
		}
		// BanUser holds details about calls to the BanUser method.
		BanUser []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// ChannelsForGuild holds details about calls to the ChannelsForGuild method.
		ChannelsForGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// CountMembersInGuild holds details about calls to the CountMembersInGuild method.
		CountMembersInGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// CreateEmotePack holds details about calls to the CreateEmotePack method.
		CreateEmotePack []struct {
			// UserID is the userID argument value.
			UserID uint64
			// PackID is the packID argument value.
			PackID uint64
			// PackName is the packName argument value.
			PackName string
		}
		// CreateGuild holds details about calls to the CreateGuild method.
		CreateGuild []struct {
			// Owner is the owner argument value.
			Owner uint64
			// ID is the id argument value.
			ID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// GuildName is the guildName argument value.
			GuildName string
			// Picture is the picture argument value.
			Picture string
		}
		// CreateInvite holds details about calls to the CreateInvite method.
		CreateInvite []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// PossibleUses is the possibleUses argument value.
			PossibleUses int32
			// Name is the name argument value.
			Name string
		}
		// DeleteChannelFromGuild holds details about calls to the DeleteChannelFromGuild method.
		DeleteChannelFromGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// DeleteEmoteFromPack holds details about calls to the DeleteEmoteFromPack method.
		DeleteEmoteFromPack []struct {
			// PackID is the packID argument value.
			PackID uint64
			// EmoteID is the emoteID argument value.
			EmoteID string
		}
		// DeleteEmotePack holds details about calls to the DeleteEmotePack method.
		DeleteEmotePack []struct {
			// PackID is the packID argument value.
			PackID uint64
		}
		// DeleteFileMeta holds details about calls to the DeleteFileMeta method.
		DeleteFileMeta []struct {
			// FileID is the fileID argument value.
			FileID string
		}
		// DeleteGuild holds details about calls to the DeleteGuild method.
		DeleteGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// DeleteInvite holds details about calls to the DeleteInvite method.
		DeleteInvite []struct {
			// InviteID is the inviteID argument value.
			InviteID string
		}
		// DeleteMember holds details about calls to the DeleteMember method.
		DeleteMember []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
		}
		// DequipEmotePack holds details about calls to the DequipEmotePack method.
		DequipEmotePack []struct {
			// UserID is the userID argument value.
			UserID uint64
			// PackID is the packID argument value.
			PackID uint64
		}
		// EmailExists holds details about calls to the EmailExists method.
		EmailExists []struct {
			// Email is the email argument value.
			Email string
		}
		// ExpireSessions holds details about calls to the ExpireSessions method.
		ExpireSessions []struct {
		}
		// ExtendSession holds details about calls to the ExtendSession method.
		ExtendSession []struct {
			// Session is the session argument value.
			Session string
		}
		// GetAvatar holds details about calls to the GetAvatar method.
		GetAvatar []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetChannelListPosition holds details about calls to the GetChannelListPosition method.
		GetChannelListPosition []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// GetEmotePackEmotes holds details about calls to the GetEmotePackEmotes method.
		GetEmotePackEmotes []struct {
			// PackID is the packID argument value.
			PackID uint64
		}
		// GetEmotePacks holds details about calls to the GetEmotePacks method.
		GetEmotePacks []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetFileIDByHash holds details about calls to the GetFileIDByHash method.
		GetFileIDByHash []struct {
			// Hash is the hash argument value.
			Hash []byte
		}
		// GetFileMetadata holds details about calls to the GetFileMetadata method.
		GetFileMetadata []struct {
			// FileID is the fileID argument value.
			FileID string
		}
		// GetFirstChannel holds details about calls to the GetFirstChannel method.
		GetFirstChannel []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetGuildByID holds details about calls to the GetGuildByID method.
		GetGuildByID []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetGuildList holds details about calls to the GetGuildList method.
		GetGuildList []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetGuildListPosition holds details about calls to the GetGuildListPosition method.
		GetGuildListPosition []struct {
			// UserID is the userID argument value.
			UserID uint64
			// GuildID is the guildID argument value.
			GuildID uint64
			// HomeServer is the homeServer argument value.
			HomeServer string
		}
		// GetGuildPicture holds details about calls to the GetGuildPicture method.
		GetGuildPicture []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetGuildRoles holds details about calls to the GetGuildRoles method.
		GetGuildRoles []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetInvites holds details about calls to the GetInvites method.
		GetInvites []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetLocalGuilds holds details about calls to the GetLocalGuilds method.
		GetLocalGuilds []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetLocalUserForForeignUser holds details about calls to the GetLocalUserForForeignUser method.
		GetLocalUserForForeignUser []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Host is the host argument value.
			Host string
		}
		// GetMessage holds details about calls to the GetMessage method.
		GetMessage []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
		}
		// GetMessages holds details about calls to the GetMessages method.
		GetMessages []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// GetMessagesBefore holds details about calls to the GetMessagesBefore method.
		GetMessagesBefore []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// Date is the date argument value.
			Date time.Time
		}
		// GetOwner holds details about calls to the GetOwner method.
		GetOwner []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetPermissions holds details about calls to the GetPermissions method.
		GetPermissions []struct {
			// RoleID is the roleID argument value.
			RoleID uint64
		}
		// GetPermissionsData holds details about calls to the GetPermissionsData method.
		GetPermissionsData []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// GetUserByEmail holds details about calls to the GetUserByEmail method.
		GetUserByEmail []struct {
			// Email is the email argument value.
			Email string
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
		// GetUserMetadata holds details about calls to the GetUserMetadata method.
		GetUserMetadata []struct {
			// UserID is the userID argument value.
			UserID uint64
			// AppID is the appID argument value.
			AppID string
		}
		// HasChannelWithID holds details about calls to the HasChannelWithID method.
		HasChannelWithID []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
		}
		// HasGuildWithID holds details about calls to the HasGuildWithID method.
		HasGuildWithID []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// HasMessageWithID holds details about calls to the HasMessageWithID method.
		HasMessageWithID []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
		}
		// IncrementInvite holds details about calls to the IncrementInvite method.
		IncrementInvite []struct {
			// InviteID is the inviteID argument value.
			InviteID string
		}
		// IsBanned holds details about calls to the IsBanned method.
		IsBanned []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// IsOwner holds details about calls to the IsOwner method.
		IsOwner []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// IsPackOwner holds details about calls to the IsPackOwner method.
		IsPackOwner []struct {
			// UserID is the userID argument value.
			UserID uint64
			// PackID is the packID argument value.
			PackID uint64
		}
		// ManageRoles holds details about calls to the ManageRoles method.
		ManageRoles []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
			// AddRoles is the addRoles argument value.
			AddRoles []uint64
			// RemoveRoles is the removeRoles argument value.
			RemoveRoles []uint64
		}
		// MembersInGuild holds details about calls to the MembersInGuild method.
		MembersInGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// Migrate holds details about calls to the Migrate method.
		Migrate []struct {
		}
		// ModifyRole holds details about calls to the ModifyRole method.
		ModifyRole []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// RoleID is the roleID argument value.
			RoleID uint64
			// Name is the name argument value.
			Name string
			// Color is the color argument value.
			Color int32
			// Hoist is the hoist argument value.
			Hoist bool
			// Pingable is the pingable argument value.
			Pingable bool
			// UpdateName is the updateName argument value.
			UpdateName bool
			// UpdateColor is the updateColor argument value.
			UpdateColor bool
			// UpdateHoist is the updateHoist argument value.
			UpdateHoist bool
			// UpdatePingable is the updatePingable argument value.
			UpdatePingable bool
		}
		// MoveChannel holds details about calls to the MoveChannel method.
		MoveChannel []struct {
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// PreviousID is the previousID argument value.
			PreviousID *uint64
			// NextID is the nextID argument value.
			NextID *uint64
		}
		// MoveGuild holds details about calls to the MoveGuild method.
		MoveGuild []struct {
			// UserID is the userID argument value.
			UserID uint64
			// GuildID is the guildID argument value.
			GuildID uint64
			// HomeServer is the homeServer argument value.
			HomeServer string
			// NextGuildID is the nextGuildID argument value.
			NextGuildID uint64
			// PrevGuildID is the prevGuildID argument value.
			PrevGuildID uint64
			// NextHomeServer is the nextHomeServer argument value.
			NextHomeServer string
			// PrevHomeServer is the prevHomeServer argument value.
			PrevHomeServer string
		}
		// MoveRole holds details about calls to the MoveRole method.
		MoveRole []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// RoleID is the roleID argument value.
			RoleID uint64
			// PreviousRole is the previousRole argument value.
			PreviousRole uint64
			// NextRole is the nextRole argument value.
			NextRole uint64
		}
		// RemoveGuildFromList holds details about calls to the RemoveGuildFromList method.
		RemoveGuildFromList []struct {
			// UserID is the userID argument value.
			UserID uint64
			// GuildID is the guildID argument value.
			GuildID uint64
			// HomeServer is the homeServer argument value.
			HomeServer string
		}
		// RemoveRoleFromGuild holds details about calls to the RemoveRoleFromGuild method.
		RemoveRoleFromGuild []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// RoleID is the roleID argument value.
			RoleID uint64
		}
		// ResolveGuildID holds details about calls to the ResolveGuildID method.
		ResolveGuildID []struct {
			// InviteID is the inviteID argument value.
			InviteID string
		}
		// RolesForUser holds details about calls to the RolesForUser method.
		RolesForUser []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// SessionExpireRoutine holds details about calls to the SessionExpireRoutine method.
		SessionExpireRoutine []struct {
		}
		// SessionToUserID holds details about calls to the SessionToUserID method.
		SessionToUserID []struct {
			// Session is the session argument value.
			Session string
		}
		// SetAvatar holds details about calls to the SetAvatar method.
		SetAvatar []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Avatar is the avatar argument value.
			Avatar string
		}
		// SetFileMetadata holds details about calls to the SetFileMetadata method.
		SetFileMetadata []struct {
			// FileID is the fileID argument value.
			FileID string
			// ContentType is the contentType argument value.
			ContentType string
			// Name is the name argument value.
			Name string
			// Size is the size argument value.
			Size int32
		}
		// SetIsBot holds details about calls to the SetIsBot method.
		SetIsBot []struct {
			// UserID is the userID argument value.
			UserID uint64
			// IsBot is the isBot argument value.
			IsBot bool
		}
		// SetPermissions holds details about calls to the SetPermissions method.
		SetPermissions []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// RoleID is the roleID argument value.
			RoleID uint64
			// Permissions is the permissions argument value.
			Permissions []PermissionsNode
		}
		// SetStatus holds details about calls to the SetStatus method.
		SetStatus []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Status is the status argument value.
			Status harmonytypesv1.UserStatus
		}
		// SetUsername holds details about calls to the SetUsername method.
		SetUsername []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Username is the username argument value.
			Username string
		}
		// UnbanUser holds details about calls to the UnbanUser method.
		UnbanUser []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// UserID is the userID argument value.
			UserID uint64
		}
		// UpdateAvatar holds details about calls to the UpdateAvatar method.
		UpdateAvatar []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Avatar is the avatar argument value.
			Avatar string
		}
		// UpdateChannelInformation holds details about calls to the UpdateChannelInformation method.
		UpdateChannelInformation []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// ChannelID is the channelID argument value.
			ChannelID uint64
			// Name is the name argument value.
			Name *string
			// Metadata is the metadata argument value.
			Metadata []byte
		}
		// UpdateGuildInformation holds details about calls to the UpdateGuildInformation method.
		UpdateGuildInformation []struct {
			// GuildID is the guildID argument value.
			GuildID uint64
			// Name is the name argument value.
			Name string
			// Picture is the picture argument value.
			Picture string
			// Metadata is the metadata argument value.
			Metadata *harmonytypesv1.Metadata
			// UpdateName is the updateName argument value.
			UpdateName bool
			// UpdatePicture is the updatePicture argument value.
			UpdatePicture bool
			// UpdateMetadata is the updateMetadata argument value.
			UpdateMetadata bool
		}
		// UpdateTextMessage holds details about calls to the UpdateTextMessage method.
		UpdateTextMessage []struct {
			// MessageID is the messageID argument value.
			MessageID uint64
			// Content is the content argument value.
			Content string
		}
		// UpdateUsername holds details about calls to the UpdateUsername method.
		UpdateUsername []struct {
			// UserID is the userID argument value.
			UserID uint64
			// Username is the username argument value.
			Username string
		}
		// UserInGuild holds details about calls to the UserInGuild method.
		UserInGuild []struct {
			// UserID is the userID argument value.
			UserID uint64
			// GuildID is the guildID argument value.
			GuildID uint64
		}
		// UserIsLocal holds details about calls to the UserIsLocal method.
		UserIsLocal []struct {
			// UserID is the userID argument value.
			UserID uint64
		}
	}
	lockAddChannelToGuild          sync.RWMutex
	lockAddEmbedMessage            sync.RWMutex
	lockAddEmoteToPack             sync.RWMutex
	lockAddFileHash                sync.RWMutex
	lockAddFilesMessage            sync.RWMutex
	lockAddForeignUser             sync.RWMutex
	lockAddGuildToList             sync.RWMutex
	lockAddLocalUser               sync.RWMutex
	lockAddMemberToGuild           sync.RWMutex
	lockAddRoleToGuild             sync.RWMutex
	lockAddSession                 sync.RWMutex
	lockAddTextMessage             sync.RWMutex
	lockBanUser                    sync.RWMutex
	lockChannelsForGuild           sync.RWMutex
	lockCountMembersInGuild        sync.RWMutex
	lockCreateEmotePack            sync.RWMutex
	lockCreateGuild                sync.RWMutex
	lockCreateInvite               sync.RWMutex
	lockDeleteChannelFromGuild     sync.RWMutex
	lockDeleteEmoteFromPack        sync.RWMutex
	lockDeleteEmotePack            sync.RWMutex
	lockDeleteFileMeta             sync.RWMutex
	lockDeleteGuild                sync.RWMutex
	lockDeleteInvite               sync.RWMutex
	lockDeleteMember               sync.RWMutex
	lockDeleteMessage              sync.RWMutex
	lockDequipEmotePack            sync.RWMutex
	lockEmailExists                sync.RWMutex
	lockExpireSessions             sync.RWMutex
	lockExtendSession              sync.RWMutex
	lockGetAvatar                  sync.RWMutex
	lockGetChannelListPosition     sync.RWMutex
	lockGetEmotePackEmotes         sync.RWMutex
	lockGetEmotePacks              sync.RWMutex
	lockGetFileIDByHash            sync.RWMutex
	lockGetFileMetadata            sync.RWMutex
	lockGetFirstChannel            sync.RWMutex
	lockGetGuildByID               sync.RWMutex
	lockGetGuildList               sync.RWMutex
	lockGetGuildListPosition       sync.RWMutex
	lockGetGuildPicture            sync.RWMutex
	lockGetGuildRoles              sync.RWMutex
	lockGetInvites                 sync.RWMutex
	lockGetLocalGuilds             sync.RWMutex
	lockGetLocalUserForForeignUser sync.RWMutex
	lockGetMessage                 sync.RWMutex
	lockGetMessages                sync.RWMutex
	lockGetMessagesBefore          sync.RWMutex
	lockGetOwner                   sync.RWMutex
	lockGetPermissions             sync.RWMutex
	lockGetPermissionsData         sync.RWMutex
	lockGetUserByEmail             sync.RWMutex
	lockGetUserByID                sync.RWMutex
	lockGetUserMetadata            sync.RWMutex
	lockHasChannelWithID           sync.RWMutex
	lockHasGuildWithID             sync.RWMutex
	lockHasMessageWithID           sync.RWMutex
	lockIncrementInvite            sync.RWMutex
	lockIsBanned                   sync.RWMutex
	lockIsOwner                    sync.RWMutex
	lockIsPackOwner                sync.RWMutex
	lockManageRoles                sync.RWMutex
	lockMembersInGuild             sync.RWMutex
	lockMigrate                    sync.RWMutex
	lockModifyRole                 sync.RWMutex
	lockMoveChannel                sync.RWMutex
	lockMoveGuild                  sync.RWMutex
	lockMoveRole                   sync.RWMutex
	lockRemoveGuildFromList        sync.RWMutex
	lockRemoveRoleFromGuild        sync.RWMutex
	lockResolveGuildID             sync.RWMutex
	lockRolesForUser               sync.RWMutex
	lockSessionExpireRoutine       sync.RWMutex
	lockSessionToUserID            sync.RWMutex
	lockSetAvatar                  sync.RWMutex
	lockSetFileMetadata            sync.RWMutex
	lockSetIsBot                   sync.RWMutex
	lockSetPermissions             sync.RWMutex
	lockSetStatus                  sync.RWMutex
	lockSetUsername                sync.RWMutex
	lockUnbanUser                  sync.RWMutex
	lockUpdateAvatar               sync.RWMutex
	lockUpdateChannelInformation   sync.RWMutex
	lockUpdateGuildInformation     sync.RWMutex
	lockUpdateTextMessage          sync.RWMutex
	lockUpdateUsername             sync.RWMutex
	lockUserInGuild                sync.RWMutex
	lockUserIsLocal                sync.RWMutex
}

// AddChannelToGuild calls AddChannelToGuildFunc.
func (mock *IHarmonyDBMock) AddChannelToGuild(guildID uint64, channelID uint64, channelName string, previous *uint64, next *uint64, kind ChannelKind, md []byte) (entgen.Channel, error) {
	if mock.AddChannelToGuildFunc == nil {
		panic("IHarmonyDBMock.AddChannelToGuildFunc: method is nil but IHarmonyDB.AddChannelToGuild was just called")
	}
	callInfo := struct {
		GuildID     uint64
		ChannelID   uint64
		ChannelName string
		Previous    *uint64
		Next        *uint64
		Kind        ChannelKind
		Md          []byte
	}{
		GuildID:     guildID,
		ChannelID:   channelID,
		ChannelName: channelName,
		Previous:    previous,
		Next:        next,
		Kind:        kind,
		Md:          md,
	}
	mock.lockAddChannelToGuild.Lock()
	mock.calls.AddChannelToGuild = append(mock.calls.AddChannelToGuild, callInfo)
	mock.lockAddChannelToGuild.Unlock()
	return mock.AddChannelToGuildFunc(guildID, channelID, channelName, previous, next, kind, md)
}

// AddChannelToGuildCalls gets all the calls that were made to AddChannelToGuild.
// Check the length with:
//     len(mockedIHarmonyDB.AddChannelToGuildCalls())
func (mock *IHarmonyDBMock) AddChannelToGuildCalls() []struct {
	GuildID     uint64
	ChannelID   uint64
	ChannelName string
	Previous    *uint64
	Next        *uint64
	Kind        ChannelKind
	Md          []byte
} {
	var calls []struct {
		GuildID     uint64
		ChannelID   uint64
		ChannelName string
		Previous    *uint64
		Next        *uint64
		Kind        ChannelKind
		Md          []byte
	}
	mock.lockAddChannelToGuild.RLock()
	calls = mock.calls.AddChannelToGuild
	mock.lockAddChannelToGuild.RUnlock()
	return calls
}

// AddEmbedMessage calls AddEmbedMessageFunc.
func (mock *IHarmonyDBMock) AddEmbedMessage(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, embeds []*harmonytypesv1.Embed) (time.Time, error) {
	if mock.AddEmbedMessageFunc == nil {
		panic("IHarmonyDBMock.AddEmbedMessageFunc: method is nil but IHarmonyDB.AddEmbedMessage was just called")
	}
	callInfo := struct {
		GuildID   uint64
		ChannelID uint64
		MessageID uint64
		AuthorID  uint64
		Actions   []*harmonytypesv1.Action
		Overrides *harmonytypesv1.Override
		ReplyTo   *uint64
		Metadata  *harmonytypesv1.Metadata
		Embeds    []*harmonytypesv1.Embed
	}{
		GuildID:   guildID,
		ChannelID: channelID,
		MessageID: messageID,
		AuthorID:  authorID,
		Actions:   actions,
		Overrides: overrides,
		ReplyTo:   replyTo,
		Metadata:  metadata,
		Embeds:    embeds,
	}
	mock.lockAddEmbedMessage.Lock()
	mock.calls.AddEmbedMessage = append(mock.calls.AddEmbedMessage, callInfo)
	mock.lockAddEmbedMessage.Unlock()
	return mock.AddEmbedMessageFunc(guildID, channelID, messageID, authorID, actions, overrides, replyTo, metadata, embeds)
}

// AddEmbedMessageCalls gets all the calls that were made to AddEmbedMessage.
// Check the length with:
//     len(mockedIHarmonyDB.AddEmbedMessageCalls())
func (mock *IHarmonyDBMock) AddEmbedMessageCalls() []struct {
	GuildID   uint64
	ChannelID uint64
	MessageID uint64
	AuthorID  uint64
	Actions   []*harmonytypesv1.Action
	Overrides *harmonytypesv1.Override
	ReplyTo   *uint64
	Metadata  *harmonytypesv1.Metadata
	Embeds    []*harmonytypesv1.Embed
} {
	var calls []struct {
		GuildID   uint64
		ChannelID uint64
		MessageID uint64
		AuthorID  uint64
		Actions   []*harmonytypesv1.Action
		Overrides *harmonytypesv1.Override
		ReplyTo   *uint64
		Metadata  *harmonytypesv1.Metadata
		Embeds    []*harmonytypesv1.Embed
	}
	mock.lockAddEmbedMessage.RLock()
	calls = mock.calls.AddEmbedMessage
	mock.lockAddEmbedMessage.RUnlock()
	return calls
}

// AddEmoteToPack calls AddEmoteToPackFunc.
func (mock *IHarmonyDBMock) AddEmoteToPack(packID uint64, imageID string, name string) error {
	if mock.AddEmoteToPackFunc == nil {
		panic("IHarmonyDBMock.AddEmoteToPackFunc: method is nil but IHarmonyDB.AddEmoteToPack was just called")
	}
	callInfo := struct {
		PackID  uint64
		ImageID string
		Name    string
	}{
		PackID:  packID,
		ImageID: imageID,
		Name:    name,
	}
	mock.lockAddEmoteToPack.Lock()
	mock.calls.AddEmoteToPack = append(mock.calls.AddEmoteToPack, callInfo)
	mock.lockAddEmoteToPack.Unlock()
	return mock.AddEmoteToPackFunc(packID, imageID, name)
}

// AddEmoteToPackCalls gets all the calls that were made to AddEmoteToPack.
// Check the length with:
//     len(mockedIHarmonyDB.AddEmoteToPackCalls())
func (mock *IHarmonyDBMock) AddEmoteToPackCalls() []struct {
	PackID  uint64
	ImageID string
	Name    string
} {
	var calls []struct {
		PackID  uint64
		ImageID string
		Name    string
	}
	mock.lockAddEmoteToPack.RLock()
	calls = mock.calls.AddEmoteToPack
	mock.lockAddEmoteToPack.RUnlock()
	return calls
}

// AddFileHash calls AddFileHashFunc.
func (mock *IHarmonyDBMock) AddFileHash(fileID string, hash []byte) error {
	if mock.AddFileHashFunc == nil {
		panic("IHarmonyDBMock.AddFileHashFunc: method is nil but IHarmonyDB.AddFileHash was just called")
	}
	callInfo := struct {
		FileID string
		Hash   []byte
	}{
		FileID: fileID,
		Hash:   hash,
	}
	mock.lockAddFileHash.Lock()
	mock.calls.AddFileHash = append(mock.calls.AddFileHash, callInfo)
	mock.lockAddFileHash.Unlock()
	return mock.AddFileHashFunc(fileID, hash)
}

// AddFileHashCalls gets all the calls that were made to AddFileHash.
// Check the length with:
//     len(mockedIHarmonyDB.AddFileHashCalls())
func (mock *IHarmonyDBMock) AddFileHashCalls() []struct {
	FileID string
	Hash   []byte
} {
	var calls []struct {
		FileID string
		Hash   []byte
	}
	mock.lockAddFileHash.RLock()
	calls = mock.calls.AddFileHash
	mock.lockAddFileHash.RUnlock()
	return calls
}

// AddFilesMessage calls AddFilesMessageFunc.
func (mock *IHarmonyDBMock) AddFilesMessage(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, files []*harmonytypesv1.Attachment) (time.Time, error) {
	if mock.AddFilesMessageFunc == nil {
		panic("IHarmonyDBMock.AddFilesMessageFunc: method is nil but IHarmonyDB.AddFilesMessage was just called")
	}
	callInfo := struct {
		GuildID   uint64
		ChannelID uint64
		MessageID uint64
		AuthorID  uint64
		Actions   []*harmonytypesv1.Action
		Overrides *harmonytypesv1.Override
		ReplyTo   *uint64
		Metadata  *harmonytypesv1.Metadata
		Files     []*harmonytypesv1.Attachment
	}{
		GuildID:   guildID,
		ChannelID: channelID,
		MessageID: messageID,
		AuthorID:  authorID,
		Actions:   actions,
		Overrides: overrides,
		ReplyTo:   replyTo,
		Metadata:  metadata,
		Files:     files,
	}
	mock.lockAddFilesMessage.Lock()
	mock.calls.AddFilesMessage = append(mock.calls.AddFilesMessage, callInfo)
	mock.lockAddFilesMessage.Unlock()
	return mock.AddFilesMessageFunc(guildID, channelID, messageID, authorID, actions, overrides, replyTo, metadata, files)
}

// AddFilesMessageCalls gets all the calls that were made to AddFilesMessage.
// Check the length with:
//     len(mockedIHarmonyDB.AddFilesMessageCalls())
func (mock *IHarmonyDBMock) AddFilesMessageCalls() []struct {
	GuildID   uint64
	ChannelID uint64
	MessageID uint64
	AuthorID  uint64
	Actions   []*harmonytypesv1.Action
	Overrides *harmonytypesv1.Override
	ReplyTo   *uint64
	Metadata  *harmonytypesv1.Metadata
	Files     []*harmonytypesv1.Attachment
} {
	var calls []struct {
		GuildID   uint64
		ChannelID uint64
		MessageID uint64
		AuthorID  uint64
		Actions   []*harmonytypesv1.Action
		Overrides *harmonytypesv1.Override
		ReplyTo   *uint64
		Metadata  *harmonytypesv1.Metadata
		Files     []*harmonytypesv1.Attachment
	}
	mock.lockAddFilesMessage.RLock()
	calls = mock.calls.AddFilesMessage
	mock.lockAddFilesMessage.RUnlock()
	return calls
}

// AddForeignUser calls AddForeignUserFunc.
func (mock *IHarmonyDBMock) AddForeignUser(host string, userID uint64, localUserID uint64, username string, avatar string) error {
	if mock.AddForeignUserFunc == nil {
		panic("IHarmonyDBMock.AddForeignUserFunc: method is nil but IHarmonyDB.AddForeignUser was just called")
	}
	callInfo := struct {
		Host        string
		UserID      uint64
		LocalUserID uint64
		Username    string
		Avatar      string
	}{
		Host:        host,
		UserID:      userID,
		LocalUserID: localUserID,
		Username:    username,
		Avatar:      avatar,
	}
	mock.lockAddForeignUser.Lock()
	mock.calls.AddForeignUser = append(mock.calls.AddForeignUser, callInfo)
	mock.lockAddForeignUser.Unlock()
	return mock.AddForeignUserFunc(host, userID, localUserID, username, avatar)
}

// AddForeignUserCalls gets all the calls that were made to AddForeignUser.
// Check the length with:
//     len(mockedIHarmonyDB.AddForeignUserCalls())
func (mock *IHarmonyDBMock) AddForeignUserCalls() []struct {
	Host        string
	UserID      uint64
	LocalUserID uint64
	Username    string
	Avatar      string
} {
	var calls []struct {
		Host        string
		UserID      uint64
		LocalUserID uint64
		Username    string
		Avatar      string
	}
	mock.lockAddForeignUser.RLock()
	calls = mock.calls.AddForeignUser
	mock.lockAddForeignUser.RUnlock()
	return calls
}

// AddGuildToList calls AddGuildToListFunc.
func (mock *IHarmonyDBMock) AddGuildToList(userID uint64, guildID uint64, homeServer string) error {
	if mock.AddGuildToListFunc == nil {
		panic("IHarmonyDBMock.AddGuildToListFunc: method is nil but IHarmonyDB.AddGuildToList was just called")
	}
	callInfo := struct {
		UserID     uint64
		GuildID    uint64
		HomeServer string
	}{
		UserID:     userID,
		GuildID:    guildID,
		HomeServer: homeServer,
	}
	mock.lockAddGuildToList.Lock()
	mock.calls.AddGuildToList = append(mock.calls.AddGuildToList, callInfo)
	mock.lockAddGuildToList.Unlock()
	return mock.AddGuildToListFunc(userID, guildID, homeServer)
}

// AddGuildToListCalls gets all the calls that were made to AddGuildToList.
// Check the length with:
//     len(mockedIHarmonyDB.AddGuildToListCalls())
func (mock *IHarmonyDBMock) AddGuildToListCalls() []struct {
	UserID     uint64
	GuildID    uint64
	HomeServer string
} {
	var calls []struct {
		UserID     uint64
		GuildID    uint64
		HomeServer string
	}
	mock.lockAddGuildToList.RLock()
	calls = mock.calls.AddGuildToList
	mock.lockAddGuildToList.RUnlock()
	return calls
}

// AddLocalUser calls AddLocalUserFunc.
func (mock *IHarmonyDBMock) AddLocalUser(userID uint64, email string, username string, passwordHash []byte) error {
	if mock.AddLocalUserFunc == nil {
		panic("IHarmonyDBMock.AddLocalUserFunc: method is nil but IHarmonyDB.AddLocalUser was just called")
	}
	callInfo := struct {
		UserID       uint64
		Email        string
		Username     string
		PasswordHash []byte
	}{
		UserID:       userID,
		Email:        email,
		Username:     username,
		PasswordHash: passwordHash,
	}
	mock.lockAddLocalUser.Lock()
	mock.calls.AddLocalUser = append(mock.calls.AddLocalUser, callInfo)
	mock.lockAddLocalUser.Unlock()
	return mock.AddLocalUserFunc(userID, email, username, passwordHash)
}

// AddLocalUserCalls gets all the calls that were made to AddLocalUser.
// Check the length with:
//     len(mockedIHarmonyDB.AddLocalUserCalls())
func (mock *IHarmonyDBMock) AddLocalUserCalls() []struct {
	UserID       uint64
	Email        string
	Username     string
	PasswordHash []byte
} {
	var calls []struct {
		UserID       uint64
		Email        string
		Username     string
		PasswordHash []byte
	}
	mock.lockAddLocalUser.RLock()
	calls = mock.calls.AddLocalUser
	mock.lockAddLocalUser.RUnlock()
	return calls
}

// AddMemberToGuild calls AddMemberToGuildFunc.
func (mock *IHarmonyDBMock) AddMemberToGuild(userID uint64, guildID uint64) error {
	if mock.AddMemberToGuildFunc == nil {
		panic("IHarmonyDBMock.AddMemberToGuildFunc: method is nil but IHarmonyDB.AddMemberToGuild was just called")
	}
	callInfo := struct {
		UserID  uint64
		GuildID uint64
	}{
		UserID:  userID,
		GuildID: guildID,
	}
	mock.lockAddMemberToGuild.Lock()
	mock.calls.AddMemberToGuild = append(mock.calls.AddMemberToGuild, callInfo)
	mock.lockAddMemberToGuild.Unlock()
	return mock.AddMemberToGuildFunc(userID, guildID)
}

// AddMemberToGuildCalls gets all the calls that were made to AddMemberToGuild.
// Check the length with:
//     len(mockedIHarmonyDB.AddMemberToGuildCalls())
func (mock *IHarmonyDBMock) AddMemberToGuildCalls() []struct {
	UserID  uint64
	GuildID uint64
} {
	var calls []struct {
		UserID  uint64
		GuildID uint64
	}
	mock.lockAddMemberToGuild.RLock()
	calls = mock.calls.AddMemberToGuild
	mock.lockAddMemberToGuild.RUnlock()
	return calls
}

// AddRoleToGuild calls AddRoleToGuildFunc.
func (mock *IHarmonyDBMock) AddRoleToGuild(guildID uint64, roleID uint64, name string, color int, hoist bool, pingable bool) error {
	if mock.AddRoleToGuildFunc == nil {
		panic("IHarmonyDBMock.AddRoleToGuildFunc: method is nil but IHarmonyDB.AddRoleToGuild was just called")
	}
	callInfo := struct {
		GuildID  uint64
		RoleID   uint64
		Name     string
		Color    int
		Hoist    bool
		Pingable bool
	}{
		GuildID:  guildID,
		RoleID:   roleID,
		Name:     name,
		Color:    color,
		Hoist:    hoist,
		Pingable: pingable,
	}
	mock.lockAddRoleToGuild.Lock()
	mock.calls.AddRoleToGuild = append(mock.calls.AddRoleToGuild, callInfo)
	mock.lockAddRoleToGuild.Unlock()
	return mock.AddRoleToGuildFunc(guildID, roleID, name, color, hoist, pingable)
}

// AddRoleToGuildCalls gets all the calls that were made to AddRoleToGuild.
// Check the length with:
//     len(mockedIHarmonyDB.AddRoleToGuildCalls())
func (mock *IHarmonyDBMock) AddRoleToGuildCalls() []struct {
	GuildID  uint64
	RoleID   uint64
	Name     string
	Color    int
	Hoist    bool
	Pingable bool
} {
	var calls []struct {
		GuildID  uint64
		RoleID   uint64
		Name     string
		Color    int
		Hoist    bool
		Pingable bool
	}
	mock.lockAddRoleToGuild.RLock()
	calls = mock.calls.AddRoleToGuild
	mock.lockAddRoleToGuild.RUnlock()
	return calls
}

// AddSession calls AddSessionFunc.
func (mock *IHarmonyDBMock) AddSession(userID uint64, session string) error {
	if mock.AddSessionFunc == nil {
		panic("IHarmonyDBMock.AddSessionFunc: method is nil but IHarmonyDB.AddSession was just called")
	}
	callInfo := struct {
		UserID  uint64
		Session string
	}{
		UserID:  userID,
		Session: session,
	}
	mock.lockAddSession.Lock()
	mock.calls.AddSession = append(mock.calls.AddSession, callInfo)
	mock.lockAddSession.Unlock()
	return mock.AddSessionFunc(userID, session)
}

// AddSessionCalls gets all the calls that were made to AddSession.
// Check the length with:
//     len(mockedIHarmonyDB.AddSessionCalls())
func (mock *IHarmonyDBMock) AddSessionCalls() []struct {
	UserID  uint64
	Session string
} {
	var calls []struct {
		UserID  uint64
		Session string
	}
	mock.lockAddSession.RLock()
	calls = mock.calls.AddSession
	mock.lockAddSession.RUnlock()
	return calls
}

// AddTextMessage calls AddTextMessageFunc.
func (mock *IHarmonyDBMock) AddTextMessage(guildID uint64, channelID uint64, messageID uint64, authorID uint64, actions []*harmonytypesv1.Action, overrides *harmonytypesv1.Override, replyTo *uint64, metadata *harmonytypesv1.Metadata, content string) (time.Time, error) {
	if mock.AddTextMessageFunc == nil {
		panic("IHarmonyDBMock.AddTextMessageFunc: method is nil but IHarmonyDB.AddTextMessage was just called")
	}
	callInfo := struct {
		GuildID   uint64
		ChannelID uint64
		MessageID uint64
		AuthorID  uint64
		Actions   []*harmonytypesv1.Action
		Overrides *harmonytypesv1.Override
		ReplyTo   *uint64
		Metadata  *harmonytypesv1.Metadata
		Content   string
	}{
		GuildID:   guildID,
		ChannelID: channelID,
		MessageID: messageID,
		AuthorID:  authorID,
		Actions:   actions,
		Overrides: overrides,
		ReplyTo:   replyTo,
		Metadata:  metadata,
		Content:   content,
	}
	mock.lockAddTextMessage.Lock()
	mock.calls.AddTextMessage = append(mock.calls.AddTextMessage, callInfo)
	mock.lockAddTextMessage.Unlock()
	return mock.AddTextMessageFunc(guildID, channelID, messageID, authorID, actions, overrides, replyTo, metadata, content)
}

// AddTextMessageCalls gets all the calls that were made to AddTextMessage.
// Check the length with:
//     len(mockedIHarmonyDB.AddTextMessageCalls())
func (mock *IHarmonyDBMock) AddTextMessageCalls() []struct {
	GuildID   uint64
	ChannelID uint64
	MessageID uint64
	AuthorID  uint64
	Actions   []*harmonytypesv1.Action
	Overrides *harmonytypesv1.Override
	ReplyTo   *uint64
	Metadata  *harmonytypesv1.Metadata
	Content   string
} {
	var calls []struct {
		GuildID   uint64
		ChannelID uint64
		MessageID uint64
		AuthorID  uint64
		Actions   []*harmonytypesv1.Action
		Overrides *harmonytypesv1.Override
		ReplyTo   *uint64
		Metadata  *harmonytypesv1.Metadata
		Content   string
	}
	mock.lockAddTextMessage.RLock()
	calls = mock.calls.AddTextMessage
	mock.lockAddTextMessage.RUnlock()
	return calls
}

// BanUser calls BanUserFunc.
func (mock *IHarmonyDBMock) BanUser(guildID uint64, userID uint64) error {
	if mock.BanUserFunc == nil {
		panic("IHarmonyDBMock.BanUserFunc: method is nil but IHarmonyDB.BanUser was just called")
	}
	callInfo := struct {
		GuildID uint64
		UserID  uint64
	}{
		GuildID: guildID,
		UserID:  userID,
	}
	mock.lockBanUser.Lock()
	mock.calls.BanUser = append(mock.calls.BanUser, callInfo)
	mock.lockBanUser.Unlock()
	return mock.BanUserFunc(guildID, userID)
}

// BanUserCalls gets all the calls that were made to BanUser.
// Check the length with:
//     len(mockedIHarmonyDB.BanUserCalls())
func (mock *IHarmonyDBMock) BanUserCalls() []struct {
	GuildID uint64
	UserID  uint64
} {
	var calls []struct {
		GuildID uint64
		UserID  uint64
	}
	mock.lockBanUser.RLock()
	calls = mock.calls.BanUser
	mock.lockBanUser.RUnlock()
	return calls
}

// ChannelsForGuild calls ChannelsForGuildFunc.
func (mock *IHarmonyDBMock) ChannelsForGuild(guildID uint64) ([]*entgen.Channel, error) {
	if mock.ChannelsForGuildFunc == nil {
		panic("IHarmonyDBMock.ChannelsForGuildFunc: method is nil but IHarmonyDB.ChannelsForGuild was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockChannelsForGuild.Lock()
	mock.calls.ChannelsForGuild = append(mock.calls.ChannelsForGuild, callInfo)
	mock.lockChannelsForGuild.Unlock()
	return mock.ChannelsForGuildFunc(guildID)
}

// ChannelsForGuildCalls gets all the calls that were made to ChannelsForGuild.
// Check the length with:
//     len(mockedIHarmonyDB.ChannelsForGuildCalls())
func (mock *IHarmonyDBMock) ChannelsForGuildCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockChannelsForGuild.RLock()
	calls = mock.calls.ChannelsForGuild
	mock.lockChannelsForGuild.RUnlock()
	return calls
}

// CountMembersInGuild calls CountMembersInGuildFunc.
func (mock *IHarmonyDBMock) CountMembersInGuild(guildID uint64) (int64, error) {
	if mock.CountMembersInGuildFunc == nil {
		panic("IHarmonyDBMock.CountMembersInGuildFunc: method is nil but IHarmonyDB.CountMembersInGuild was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockCountMembersInGuild.Lock()
	mock.calls.CountMembersInGuild = append(mock.calls.CountMembersInGuild, callInfo)
	mock.lockCountMembersInGuild.Unlock()
	return mock.CountMembersInGuildFunc(guildID)
}

// CountMembersInGuildCalls gets all the calls that were made to CountMembersInGuild.
// Check the length with:
//     len(mockedIHarmonyDB.CountMembersInGuildCalls())
func (mock *IHarmonyDBMock) CountMembersInGuildCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockCountMembersInGuild.RLock()
	calls = mock.calls.CountMembersInGuild
	mock.lockCountMembersInGuild.RUnlock()
	return calls
}

// CreateEmotePack calls CreateEmotePackFunc.
func (mock *IHarmonyDBMock) CreateEmotePack(userID uint64, packID uint64, packName string) error {
	if mock.CreateEmotePackFunc == nil {
		panic("IHarmonyDBMock.CreateEmotePackFunc: method is nil but IHarmonyDB.CreateEmotePack was just called")
	}
	callInfo := struct {
		UserID   uint64
		PackID   uint64
		PackName string
	}{
		UserID:   userID,
		PackID:   packID,
		PackName: packName,
	}
	mock.lockCreateEmotePack.Lock()
	mock.calls.CreateEmotePack = append(mock.calls.CreateEmotePack, callInfo)
	mock.lockCreateEmotePack.Unlock()
	return mock.CreateEmotePackFunc(userID, packID, packName)
}

// CreateEmotePackCalls gets all the calls that were made to CreateEmotePack.
// Check the length with:
//     len(mockedIHarmonyDB.CreateEmotePackCalls())
func (mock *IHarmonyDBMock) CreateEmotePackCalls() []struct {
	UserID   uint64
	PackID   uint64
	PackName string
} {
	var calls []struct {
		UserID   uint64
		PackID   uint64
		PackName string
	}
	mock.lockCreateEmotePack.RLock()
	calls = mock.calls.CreateEmotePack
	mock.lockCreateEmotePack.RUnlock()
	return calls
}

// CreateGuild calls CreateGuildFunc.
func (mock *IHarmonyDBMock) CreateGuild(owner uint64, id uint64, channelID uint64, guildName string, picture string) (*entgen.Guild, error) {
	if mock.CreateGuildFunc == nil {
		panic("IHarmonyDBMock.CreateGuildFunc: method is nil but IHarmonyDB.CreateGuild was just called")
	}
	callInfo := struct {
		Owner     uint64
		ID        uint64
		ChannelID uint64
		GuildName string
		Picture   string
	}{
		Owner:     owner,
		ID:        id,
		ChannelID: channelID,
		GuildName: guildName,
		Picture:   picture,
	}
	mock.lockCreateGuild.Lock()
	mock.calls.CreateGuild = append(mock.calls.CreateGuild, callInfo)
	mock.lockCreateGuild.Unlock()
	return mock.CreateGuildFunc(owner, id, channelID, guildName, picture)
}

// CreateGuildCalls gets all the calls that were made to CreateGuild.
// Check the length with:
//     len(mockedIHarmonyDB.CreateGuildCalls())
func (mock *IHarmonyDBMock) CreateGuildCalls() []struct {
	Owner     uint64
	ID        uint64
	ChannelID uint64
	GuildName string
	Picture   string
} {
	var calls []struct {
		Owner     uint64
		ID        uint64
		ChannelID uint64
		GuildName string
		Picture   string
	}
	mock.lockCreateGuild.RLock()
	calls = mock.calls.CreateGuild
	mock.lockCreateGuild.RUnlock()
	return calls
}

// CreateInvite calls CreateInviteFunc.
func (mock *IHarmonyDBMock) CreateInvite(guildID uint64, possibleUses int32, name string) (*entgen.Invite, error) {
	if mock.CreateInviteFunc == nil {
		panic("IHarmonyDBMock.CreateInviteFunc: method is nil but IHarmonyDB.CreateInvite was just called")
	}
	callInfo := struct {
		GuildID      uint64
		PossibleUses int32
		Name         string
	}{
		GuildID:      guildID,
		PossibleUses: possibleUses,
		Name:         name,
	}
	mock.lockCreateInvite.Lock()
	mock.calls.CreateInvite = append(mock.calls.CreateInvite, callInfo)
	mock.lockCreateInvite.Unlock()
	return mock.CreateInviteFunc(guildID, possibleUses, name)
}

// CreateInviteCalls gets all the calls that were made to CreateInvite.
// Check the length with:
//     len(mockedIHarmonyDB.CreateInviteCalls())
func (mock *IHarmonyDBMock) CreateInviteCalls() []struct {
	GuildID      uint64
	PossibleUses int32
	Name         string
} {
	var calls []struct {
		GuildID      uint64
		PossibleUses int32
		Name         string
	}
	mock.lockCreateInvite.RLock()
	calls = mock.calls.CreateInvite
	mock.lockCreateInvite.RUnlock()
	return calls
}

// DeleteChannelFromGuild calls DeleteChannelFromGuildFunc.
func (mock *IHarmonyDBMock) DeleteChannelFromGuild(guildID uint64, channelID uint64) error {
	if mock.DeleteChannelFromGuildFunc == nil {
		panic("IHarmonyDBMock.DeleteChannelFromGuildFunc: method is nil but IHarmonyDB.DeleteChannelFromGuild was just called")
	}
	callInfo := struct {
		GuildID   uint64
		ChannelID uint64
	}{
		GuildID:   guildID,
		ChannelID: channelID,
	}
	mock.lockDeleteChannelFromGuild.Lock()
	mock.calls.DeleteChannelFromGuild = append(mock.calls.DeleteChannelFromGuild, callInfo)
	mock.lockDeleteChannelFromGuild.Unlock()
	return mock.DeleteChannelFromGuildFunc(guildID, channelID)
}

// DeleteChannelFromGuildCalls gets all the calls that were made to DeleteChannelFromGuild.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteChannelFromGuildCalls())
func (mock *IHarmonyDBMock) DeleteChannelFromGuildCalls() []struct {
	GuildID   uint64
	ChannelID uint64
} {
	var calls []struct {
		GuildID   uint64
		ChannelID uint64
	}
	mock.lockDeleteChannelFromGuild.RLock()
	calls = mock.calls.DeleteChannelFromGuild
	mock.lockDeleteChannelFromGuild.RUnlock()
	return calls
}

// DeleteEmoteFromPack calls DeleteEmoteFromPackFunc.
func (mock *IHarmonyDBMock) DeleteEmoteFromPack(packID uint64, emoteID string) error {
	if mock.DeleteEmoteFromPackFunc == nil {
		panic("IHarmonyDBMock.DeleteEmoteFromPackFunc: method is nil but IHarmonyDB.DeleteEmoteFromPack was just called")
	}
	callInfo := struct {
		PackID  uint64
		EmoteID string
	}{
		PackID:  packID,
		EmoteID: emoteID,
	}
	mock.lockDeleteEmoteFromPack.Lock()
	mock.calls.DeleteEmoteFromPack = append(mock.calls.DeleteEmoteFromPack, callInfo)
	mock.lockDeleteEmoteFromPack.Unlock()
	return mock.DeleteEmoteFromPackFunc(packID, emoteID)
}

// DeleteEmoteFromPackCalls gets all the calls that were made to DeleteEmoteFromPack.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteEmoteFromPackCalls())
func (mock *IHarmonyDBMock) DeleteEmoteFromPackCalls() []struct {
	PackID  uint64
	EmoteID string
} {
	var calls []struct {
		PackID  uint64
		EmoteID string
	}
	mock.lockDeleteEmoteFromPack.RLock()
	calls = mock.calls.DeleteEmoteFromPack
	mock.lockDeleteEmoteFromPack.RUnlock()
	return calls
}

// DeleteEmotePack calls DeleteEmotePackFunc.
func (mock *IHarmonyDBMock) DeleteEmotePack(packID uint64) error {
	if mock.DeleteEmotePackFunc == nil {
		panic("IHarmonyDBMock.DeleteEmotePackFunc: method is nil but IHarmonyDB.DeleteEmotePack was just called")
	}
	callInfo := struct {
		PackID uint64
	}{
		PackID: packID,
	}
	mock.lockDeleteEmotePack.Lock()
	mock.calls.DeleteEmotePack = append(mock.calls.DeleteEmotePack, callInfo)
	mock.lockDeleteEmotePack.Unlock()
	return mock.DeleteEmotePackFunc(packID)
}

// DeleteEmotePackCalls gets all the calls that were made to DeleteEmotePack.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteEmotePackCalls())
func (mock *IHarmonyDBMock) DeleteEmotePackCalls() []struct {
	PackID uint64
} {
	var calls []struct {
		PackID uint64
	}
	mock.lockDeleteEmotePack.RLock()
	calls = mock.calls.DeleteEmotePack
	mock.lockDeleteEmotePack.RUnlock()
	return calls
}

// DeleteFileMeta calls DeleteFileMetaFunc.
func (mock *IHarmonyDBMock) DeleteFileMeta(fileID string) error {
	if mock.DeleteFileMetaFunc == nil {
		panic("IHarmonyDBMock.DeleteFileMetaFunc: method is nil but IHarmonyDB.DeleteFileMeta was just called")
	}
	callInfo := struct {
		FileID string
	}{
		FileID: fileID,
	}
	mock.lockDeleteFileMeta.Lock()
	mock.calls.DeleteFileMeta = append(mock.calls.DeleteFileMeta, callInfo)
	mock.lockDeleteFileMeta.Unlock()
	return mock.DeleteFileMetaFunc(fileID)
}

// DeleteFileMetaCalls gets all the calls that were made to DeleteFileMeta.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteFileMetaCalls())
func (mock *IHarmonyDBMock) DeleteFileMetaCalls() []struct {
	FileID string
} {
	var calls []struct {
		FileID string
	}
	mock.lockDeleteFileMeta.RLock()
	calls = mock.calls.DeleteFileMeta
	mock.lockDeleteFileMeta.RUnlock()
	return calls
}

// DeleteGuild calls DeleteGuildFunc.
func (mock *IHarmonyDBMock) DeleteGuild(guildID uint64) error {
	if mock.DeleteGuildFunc == nil {
		panic("IHarmonyDBMock.DeleteGuildFunc: method is nil but IHarmonyDB.DeleteGuild was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockDeleteGuild.Lock()
	mock.calls.DeleteGuild = append(mock.calls.DeleteGuild, callInfo)
	mock.lockDeleteGuild.Unlock()
	return mock.DeleteGuildFunc(guildID)
}

// DeleteGuildCalls gets all the calls that were made to DeleteGuild.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteGuildCalls())
func (mock *IHarmonyDBMock) DeleteGuildCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockDeleteGuild.RLock()
	calls = mock.calls.DeleteGuild
	mock.lockDeleteGuild.RUnlock()
	return calls
}

// DeleteInvite calls DeleteInviteFunc.
func (mock *IHarmonyDBMock) DeleteInvite(inviteID string) error {
	if mock.DeleteInviteFunc == nil {
		panic("IHarmonyDBMock.DeleteInviteFunc: method is nil but IHarmonyDB.DeleteInvite was just called")
	}
	callInfo := struct {
		InviteID string
	}{
		InviteID: inviteID,
	}
	mock.lockDeleteInvite.Lock()
	mock.calls.DeleteInvite = append(mock.calls.DeleteInvite, callInfo)
	mock.lockDeleteInvite.Unlock()
	return mock.DeleteInviteFunc(inviteID)
}

// DeleteInviteCalls gets all the calls that were made to DeleteInvite.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteInviteCalls())
func (mock *IHarmonyDBMock) DeleteInviteCalls() []struct {
	InviteID string
} {
	var calls []struct {
		InviteID string
	}
	mock.lockDeleteInvite.RLock()
	calls = mock.calls.DeleteInvite
	mock.lockDeleteInvite.RUnlock()
	return calls
}

// DeleteMember calls DeleteMemberFunc.
func (mock *IHarmonyDBMock) DeleteMember(guildID uint64, userID uint64) error {
	if mock.DeleteMemberFunc == nil {
		panic("IHarmonyDBMock.DeleteMemberFunc: method is nil but IHarmonyDB.DeleteMember was just called")
	}
	callInfo := struct {
		GuildID uint64
		UserID  uint64
	}{
		GuildID: guildID,
		UserID:  userID,
	}
	mock.lockDeleteMember.Lock()
	mock.calls.DeleteMember = append(mock.calls.DeleteMember, callInfo)
	mock.lockDeleteMember.Unlock()
	return mock.DeleteMemberFunc(guildID, userID)
}

// DeleteMemberCalls gets all the calls that were made to DeleteMember.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteMemberCalls())
func (mock *IHarmonyDBMock) DeleteMemberCalls() []struct {
	GuildID uint64
	UserID  uint64
} {
	var calls []struct {
		GuildID uint64
		UserID  uint64
	}
	mock.lockDeleteMember.RLock()
	calls = mock.calls.DeleteMember
	mock.lockDeleteMember.RUnlock()
	return calls
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *IHarmonyDBMock) DeleteMessage(messageID uint64) error {
	if mock.DeleteMessageFunc == nil {
		panic("IHarmonyDBMock.DeleteMessageFunc: method is nil but IHarmonyDB.DeleteMessage was just called")
	}
	callInfo := struct {
		MessageID uint64
	}{
		MessageID: messageID,
	}
	mock.lockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	mock.lockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(messageID)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//     len(mockedIHarmonyDB.DeleteMessageCalls())
func (mock *IHarmonyDBMock) DeleteMessageCalls() []struct {
	MessageID uint64
} {
	var calls []struct {
		MessageID uint64
	}
	mock.lockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	mock.lockDeleteMessage.RUnlock()
	return calls
}

// DequipEmotePack calls DequipEmotePackFunc.
func (mock *IHarmonyDBMock) DequipEmotePack(userID uint64, packID uint64) error {
	if mock.DequipEmotePackFunc == nil {
		panic("IHarmonyDBMock.DequipEmotePackFunc: method is nil but IHarmonyDB.DequipEmotePack was just called")
	}
	callInfo := struct {
		UserID uint64
		PackID uint64
	}{
		UserID: userID,
		PackID: packID,
	}
	mock.lockDequipEmotePack.Lock()
	mock.calls.DequipEmotePack = append(mock.calls.DequipEmotePack, callInfo)
	mock.lockDequipEmotePack.Unlock()
	return mock.DequipEmotePackFunc(userID, packID)
}

// DequipEmotePackCalls gets all the calls that were made to DequipEmotePack.
// Check the length with:
//     len(mockedIHarmonyDB.DequipEmotePackCalls())
func (mock *IHarmonyDBMock) DequipEmotePackCalls() []struct {
	UserID uint64
	PackID uint64
} {
	var calls []struct {
		UserID uint64
		PackID uint64
	}
	mock.lockDequipEmotePack.RLock()
	calls = mock.calls.DequipEmotePack
	mock.lockDequipEmotePack.RUnlock()
	return calls
}

// EmailExists calls EmailExistsFunc.
func (mock *IHarmonyDBMock) EmailExists(email string) (bool, error) {
	if mock.EmailExistsFunc == nil {
		panic("IHarmonyDBMock.EmailExistsFunc: method is nil but IHarmonyDB.EmailExists was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	mock.lockEmailExists.Lock()
	mock.calls.EmailExists = append(mock.calls.EmailExists, callInfo)
	mock.lockEmailExists.Unlock()
	return mock.EmailExistsFunc(email)
}

// EmailExistsCalls gets all the calls that were made to EmailExists.
// Check the length with:
//     len(mockedIHarmonyDB.EmailExistsCalls())
func (mock *IHarmonyDBMock) EmailExistsCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	mock.lockEmailExists.RLock()
	calls = mock.calls.EmailExists
	mock.lockEmailExists.RUnlock()
	return calls
}

// ExpireSessions calls ExpireSessionsFunc.
func (mock *IHarmonyDBMock) ExpireSessions() error {
	if mock.ExpireSessionsFunc == nil {
		panic("IHarmonyDBMock.ExpireSessionsFunc: method is nil but IHarmonyDB.ExpireSessions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockExpireSessions.Lock()
	mock.calls.ExpireSessions = append(mock.calls.ExpireSessions, callInfo)
	mock.lockExpireSessions.Unlock()
	return mock.ExpireSessionsFunc()
}

// ExpireSessionsCalls gets all the calls that were made to ExpireSessions.
// Check the length with:
//     len(mockedIHarmonyDB.ExpireSessionsCalls())
func (mock *IHarmonyDBMock) ExpireSessionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockExpireSessions.RLock()
	calls = mock.calls.ExpireSessions
	mock.lockExpireSessions.RUnlock()
	return calls
}

// ExtendSession calls ExtendSessionFunc.
func (mock *IHarmonyDBMock) ExtendSession(session string) error {
	if mock.ExtendSessionFunc == nil {
		panic("IHarmonyDBMock.ExtendSessionFunc: method is nil but IHarmonyDB.ExtendSession was just called")
	}
	callInfo := struct {
		Session string
	}{
		Session: session,
	}
	mock.lockExtendSession.Lock()
	mock.calls.ExtendSession = append(mock.calls.ExtendSession, callInfo)
	mock.lockExtendSession.Unlock()
	return mock.ExtendSessionFunc(session)
}

// ExtendSessionCalls gets all the calls that were made to ExtendSession.
// Check the length with:
//     len(mockedIHarmonyDB.ExtendSessionCalls())
func (mock *IHarmonyDBMock) ExtendSessionCalls() []struct {
	Session string
} {
	var calls []struct {
		Session string
	}
	mock.lockExtendSession.RLock()
	calls = mock.calls.ExtendSession
	mock.lockExtendSession.RUnlock()
	return calls
}

// GetAvatar calls GetAvatarFunc.
func (mock *IHarmonyDBMock) GetAvatar(userID uint64) (*string, error) {
	if mock.GetAvatarFunc == nil {
		panic("IHarmonyDBMock.GetAvatarFunc: method is nil but IHarmonyDB.GetAvatar was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockGetAvatar.Lock()
	mock.calls.GetAvatar = append(mock.calls.GetAvatar, callInfo)
	mock.lockGetAvatar.Unlock()
	return mock.GetAvatarFunc(userID)
}

// GetAvatarCalls gets all the calls that were made to GetAvatar.
// Check the length with:
//     len(mockedIHarmonyDB.GetAvatarCalls())
func (mock *IHarmonyDBMock) GetAvatarCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockGetAvatar.RLock()
	calls = mock.calls.GetAvatar
	mock.lockGetAvatar.RUnlock()
	return calls
}

// GetChannelListPosition calls GetChannelListPositionFunc.
func (mock *IHarmonyDBMock) GetChannelListPosition(channelID uint64) (string, error) {
	if mock.GetChannelListPositionFunc == nil {
		panic("IHarmonyDBMock.GetChannelListPositionFunc: method is nil but IHarmonyDB.GetChannelListPosition was just called")
	}
	callInfo := struct {
		ChannelID uint64
	}{
		ChannelID: channelID,
	}
	mock.lockGetChannelListPosition.Lock()
	mock.calls.GetChannelListPosition = append(mock.calls.GetChannelListPosition, callInfo)
	mock.lockGetChannelListPosition.Unlock()
	return mock.GetChannelListPositionFunc(channelID)
}

// GetChannelListPositionCalls gets all the calls that were made to GetChannelListPosition.
// Check the length with:
//     len(mockedIHarmonyDB.GetChannelListPositionCalls())
func (mock *IHarmonyDBMock) GetChannelListPositionCalls() []struct {
	ChannelID uint64
} {
	var calls []struct {
		ChannelID uint64
	}
	mock.lockGetChannelListPosition.RLock()
	calls = mock.calls.GetChannelListPosition
	mock.lockGetChannelListPosition.RUnlock()
	return calls
}

// GetEmotePackEmotes calls GetEmotePackEmotesFunc.
func (mock *IHarmonyDBMock) GetEmotePackEmotes(packID uint64) ([]*entgen.Emote, error) {
	if mock.GetEmotePackEmotesFunc == nil {
		panic("IHarmonyDBMock.GetEmotePackEmotesFunc: method is nil but IHarmonyDB.GetEmotePackEmotes was just called")
	}
	callInfo := struct {
		PackID uint64
	}{
		PackID: packID,
	}
	mock.lockGetEmotePackEmotes.Lock()
	mock.calls.GetEmotePackEmotes = append(mock.calls.GetEmotePackEmotes, callInfo)
	mock.lockGetEmotePackEmotes.Unlock()
	return mock.GetEmotePackEmotesFunc(packID)
}

// GetEmotePackEmotesCalls gets all the calls that were made to GetEmotePackEmotes.
// Check the length with:
//     len(mockedIHarmonyDB.GetEmotePackEmotesCalls())
func (mock *IHarmonyDBMock) GetEmotePackEmotesCalls() []struct {
	PackID uint64
} {
	var calls []struct {
		PackID uint64
	}
	mock.lockGetEmotePackEmotes.RLock()
	calls = mock.calls.GetEmotePackEmotes
	mock.lockGetEmotePackEmotes.RUnlock()
	return calls
}

// GetEmotePacks calls GetEmotePacksFunc.
func (mock *IHarmonyDBMock) GetEmotePacks(userID uint64) ([]*entgen.EmotePack, error) {
	if mock.GetEmotePacksFunc == nil {
		panic("IHarmonyDBMock.GetEmotePacksFunc: method is nil but IHarmonyDB.GetEmotePacks was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockGetEmotePacks.Lock()
	mock.calls.GetEmotePacks = append(mock.calls.GetEmotePacks, callInfo)
	mock.lockGetEmotePacks.Unlock()
	return mock.GetEmotePacksFunc(userID)
}

// GetEmotePacksCalls gets all the calls that were made to GetEmotePacks.
// Check the length with:
//     len(mockedIHarmonyDB.GetEmotePacksCalls())
func (mock *IHarmonyDBMock) GetEmotePacksCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockGetEmotePacks.RLock()
	calls = mock.calls.GetEmotePacks
	mock.lockGetEmotePacks.RUnlock()
	return calls
}

// GetFileIDByHash calls GetFileIDByHashFunc.
func (mock *IHarmonyDBMock) GetFileIDByHash(hash []byte) (string, error) {
	if mock.GetFileIDByHashFunc == nil {
		panic("IHarmonyDBMock.GetFileIDByHashFunc: method is nil but IHarmonyDB.GetFileIDByHash was just called")
	}
	callInfo := struct {
		Hash []byte
	}{
		Hash: hash,
	}
	mock.lockGetFileIDByHash.Lock()
	mock.calls.GetFileIDByHash = append(mock.calls.GetFileIDByHash, callInfo)
	mock.lockGetFileIDByHash.Unlock()
	return mock.GetFileIDByHashFunc(hash)
}

// GetFileIDByHashCalls gets all the calls that were made to GetFileIDByHash.
// Check the length with:
//     len(mockedIHarmonyDB.GetFileIDByHashCalls())
func (mock *IHarmonyDBMock) GetFileIDByHashCalls() []struct {
	Hash []byte
} {
	var calls []struct {
		Hash []byte
	}
	mock.lockGetFileIDByHash.RLock()
	calls = mock.calls.GetFileIDByHash
	mock.lockGetFileIDByHash.RUnlock()
	return calls
}

// GetFileMetadata calls GetFileMetadataFunc.
func (mock *IHarmonyDBMock) GetFileMetadata(fileID string) (*entgen.File, error) {
	if mock.GetFileMetadataFunc == nil {
		panic("IHarmonyDBMock.GetFileMetadataFunc: method is nil but IHarmonyDB.GetFileMetadata was just called")
	}
	callInfo := struct {
		FileID string
	}{
		FileID: fileID,
	}
	mock.lockGetFileMetadata.Lock()
	mock.calls.GetFileMetadata = append(mock.calls.GetFileMetadata, callInfo)
	mock.lockGetFileMetadata.Unlock()
	return mock.GetFileMetadataFunc(fileID)
}

// GetFileMetadataCalls gets all the calls that were made to GetFileMetadata.
// Check the length with:
//     len(mockedIHarmonyDB.GetFileMetadataCalls())
func (mock *IHarmonyDBMock) GetFileMetadataCalls() []struct {
	FileID string
} {
	var calls []struct {
		FileID string
	}
	mock.lockGetFileMetadata.RLock()
	calls = mock.calls.GetFileMetadata
	mock.lockGetFileMetadata.RUnlock()
	return calls
}

// GetFirstChannel calls GetFirstChannelFunc.
func (mock *IHarmonyDBMock) GetFirstChannel(guildID uint64) (uint64, error) {
	if mock.GetFirstChannelFunc == nil {
		panic("IHarmonyDBMock.GetFirstChannelFunc: method is nil but IHarmonyDB.GetFirstChannel was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetFirstChannel.Lock()
	mock.calls.GetFirstChannel = append(mock.calls.GetFirstChannel, callInfo)
	mock.lockGetFirstChannel.Unlock()
	return mock.GetFirstChannelFunc(guildID)
}

// GetFirstChannelCalls gets all the calls that were made to GetFirstChannel.
// Check the length with:
//     len(mockedIHarmonyDB.GetFirstChannelCalls())
func (mock *IHarmonyDBMock) GetFirstChannelCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetFirstChannel.RLock()
	calls = mock.calls.GetFirstChannel
	mock.lockGetFirstChannel.RUnlock()
	return calls
}

// GetGuildByID calls GetGuildByIDFunc.
func (mock *IHarmonyDBMock) GetGuildByID(guildID uint64) (*entgen.Guild, error) {
	if mock.GetGuildByIDFunc == nil {
		panic("IHarmonyDBMock.GetGuildByIDFunc: method is nil but IHarmonyDB.GetGuildByID was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetGuildByID.Lock()
	mock.calls.GetGuildByID = append(mock.calls.GetGuildByID, callInfo)
	mock.lockGetGuildByID.Unlock()
	return mock.GetGuildByIDFunc(guildID)
}

// GetGuildByIDCalls gets all the calls that were made to GetGuildByID.
// Check the length with:
//     len(mockedIHarmonyDB.GetGuildByIDCalls())
func (mock *IHarmonyDBMock) GetGuildByIDCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetGuildByID.RLock()
	calls = mock.calls.GetGuildByID
	mock.lockGetGuildByID.RUnlock()
	return calls
}

// GetGuildList calls GetGuildListFunc.
func (mock *IHarmonyDBMock) GetGuildList(userID uint64) ([]*entgen.GuildListEntry, error) {
	if mock.GetGuildListFunc == nil {
		panic("IHarmonyDBMock.GetGuildListFunc: method is nil but IHarmonyDB.GetGuildList was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockGetGuildList.Lock()
	mock.calls.GetGuildList = append(mock.calls.GetGuildList, callInfo)
	mock.lockGetGuildList.Unlock()
	return mock.GetGuildListFunc(userID)
}

// GetGuildListCalls gets all the calls that were made to GetGuildList.
// Check the length with:
//     len(mockedIHarmonyDB.GetGuildListCalls())
func (mock *IHarmonyDBMock) GetGuildListCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockGetGuildList.RLock()
	calls = mock.calls.GetGuildList
	mock.lockGetGuildList.RUnlock()
	return calls
}

// GetGuildListPosition calls GetGuildListPositionFunc.
func (mock *IHarmonyDBMock) GetGuildListPosition(userID uint64, guildID uint64, homeServer string) (string, error) {
	if mock.GetGuildListPositionFunc == nil {
		panic("IHarmonyDBMock.GetGuildListPositionFunc: method is nil but IHarmonyDB.GetGuildListPosition was just called")
	}
	callInfo := struct {
		UserID     uint64
		GuildID    uint64
		HomeServer string
	}{
		UserID:     userID,
		GuildID:    guildID,
		HomeServer: homeServer,
	}
	mock.lockGetGuildListPosition.Lock()
	mock.calls.GetGuildListPosition = append(mock.calls.GetGuildListPosition, callInfo)
	mock.lockGetGuildListPosition.Unlock()
	return mock.GetGuildListPositionFunc(userID, guildID, homeServer)
}

// GetGuildListPositionCalls gets all the calls that were made to GetGuildListPosition.
// Check the length with:
//     len(mockedIHarmonyDB.GetGuildListPositionCalls())
func (mock *IHarmonyDBMock) GetGuildListPositionCalls() []struct {
	UserID     uint64
	GuildID    uint64
	HomeServer string
} {
	var calls []struct {
		UserID     uint64
		GuildID    uint64
		HomeServer string
	}
	mock.lockGetGuildListPosition.RLock()
	calls = mock.calls.GetGuildListPosition
	mock.lockGetGuildListPosition.RUnlock()
	return calls
}

// GetGuildPicture calls GetGuildPictureFunc.
func (mock *IHarmonyDBMock) GetGuildPicture(guildID uint64) (string, error) {
	if mock.GetGuildPictureFunc == nil {
		panic("IHarmonyDBMock.GetGuildPictureFunc: method is nil but IHarmonyDB.GetGuildPicture was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetGuildPicture.Lock()
	mock.calls.GetGuildPicture = append(mock.calls.GetGuildPicture, callInfo)
	mock.lockGetGuildPicture.Unlock()
	return mock.GetGuildPictureFunc(guildID)
}

// GetGuildPictureCalls gets all the calls that were made to GetGuildPicture.
// Check the length with:
//     len(mockedIHarmonyDB.GetGuildPictureCalls())
func (mock *IHarmonyDBMock) GetGuildPictureCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetGuildPicture.RLock()
	calls = mock.calls.GetGuildPicture
	mock.lockGetGuildPicture.RUnlock()
	return calls
}

// GetGuildRoles calls GetGuildRolesFunc.
func (mock *IHarmonyDBMock) GetGuildRoles(guildID uint64) ([]*entgen.Role, error) {
	if mock.GetGuildRolesFunc == nil {
		panic("IHarmonyDBMock.GetGuildRolesFunc: method is nil but IHarmonyDB.GetGuildRoles was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetGuildRoles.Lock()
	mock.calls.GetGuildRoles = append(mock.calls.GetGuildRoles, callInfo)
	mock.lockGetGuildRoles.Unlock()
	return mock.GetGuildRolesFunc(guildID)
}

// GetGuildRolesCalls gets all the calls that were made to GetGuildRoles.
// Check the length with:
//     len(mockedIHarmonyDB.GetGuildRolesCalls())
func (mock *IHarmonyDBMock) GetGuildRolesCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetGuildRoles.RLock()
	calls = mock.calls.GetGuildRoles
	mock.lockGetGuildRoles.RUnlock()
	return calls
}

// GetInvites calls GetInvitesFunc.
func (mock *IHarmonyDBMock) GetInvites(guildID uint64) ([]*entgen.Invite, error) {
	if mock.GetInvitesFunc == nil {
		panic("IHarmonyDBMock.GetInvitesFunc: method is nil but IHarmonyDB.GetInvites was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetInvites.Lock()
	mock.calls.GetInvites = append(mock.calls.GetInvites, callInfo)
	mock.lockGetInvites.Unlock()
	return mock.GetInvitesFunc(guildID)
}

// GetInvitesCalls gets all the calls that were made to GetInvites.
// Check the length with:
//     len(mockedIHarmonyDB.GetInvitesCalls())
func (mock *IHarmonyDBMock) GetInvitesCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetInvites.RLock()
	calls = mock.calls.GetInvites
	mock.lockGetInvites.RUnlock()
	return calls
}

// GetLocalGuilds calls GetLocalGuildsFunc.
func (mock *IHarmonyDBMock) GetLocalGuilds(userID uint64) ([]uint64, error) {
	if mock.GetLocalGuildsFunc == nil {
		panic("IHarmonyDBMock.GetLocalGuildsFunc: method is nil but IHarmonyDB.GetLocalGuilds was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockGetLocalGuilds.Lock()
	mock.calls.GetLocalGuilds = append(mock.calls.GetLocalGuilds, callInfo)
	mock.lockGetLocalGuilds.Unlock()
	return mock.GetLocalGuildsFunc(userID)
}

// GetLocalGuildsCalls gets all the calls that were made to GetLocalGuilds.
// Check the length with:
//     len(mockedIHarmonyDB.GetLocalGuildsCalls())
func (mock *IHarmonyDBMock) GetLocalGuildsCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockGetLocalGuilds.RLock()
	calls = mock.calls.GetLocalGuilds
	mock.lockGetLocalGuilds.RUnlock()
	return calls
}

// GetLocalUserForForeignUser calls GetLocalUserForForeignUserFunc.
func (mock *IHarmonyDBMock) GetLocalUserForForeignUser(userID uint64, host string) (uint64, error) {
	if mock.GetLocalUserForForeignUserFunc == nil {
		panic("IHarmonyDBMock.GetLocalUserForForeignUserFunc: method is nil but IHarmonyDB.GetLocalUserForForeignUser was just called")
	}
	callInfo := struct {
		UserID uint64
		Host   string
	}{
		UserID: userID,
		Host:   host,
	}
	mock.lockGetLocalUserForForeignUser.Lock()
	mock.calls.GetLocalUserForForeignUser = append(mock.calls.GetLocalUserForForeignUser, callInfo)
	mock.lockGetLocalUserForForeignUser.Unlock()
	return mock.GetLocalUserForForeignUserFunc(userID, host)
}

// GetLocalUserForForeignUserCalls gets all the calls that were made to GetLocalUserForForeignUser.
// Check the length with:
//     len(mockedIHarmonyDB.GetLocalUserForForeignUserCalls())
func (mock *IHarmonyDBMock) GetLocalUserForForeignUserCalls() []struct {
	UserID uint64
	Host   string
} {
	var calls []struct {
		UserID uint64
		Host   string
	}
	mock.lockGetLocalUserForForeignUser.RLock()
	calls = mock.calls.GetLocalUserForForeignUser
	mock.lockGetLocalUserForForeignUser.RUnlock()
	return calls
}

// GetMessage calls GetMessageFunc.
func (mock *IHarmonyDBMock) GetMessage(messageID uint64) (*entgen.Message, error) {
	if mock.GetMessageFunc == nil {
		panic("IHarmonyDBMock.GetMessageFunc: method is nil but IHarmonyDB.GetMessage was just called")
	}
	callInfo := struct {
		MessageID uint64
	}{
		MessageID: messageID,
	}
	mock.lockGetMessage.Lock()
	mock.calls.GetMessage = append(mock.calls.GetMessage, callInfo)
	mock.lockGetMessage.Unlock()
	return mock.GetMessageFunc(messageID)
}

// GetMessageCalls gets all the calls that were made to GetMessage.
// Check the length with:
//     len(mockedIHarmonyDB.GetMessageCalls())
func (mock *IHarmonyDBMock) GetMessageCalls() []struct {
	MessageID uint64
} {
	var calls []struct {
		MessageID uint64
	}
	mock.lockGetMessage.RLock()
	calls = mock.calls.GetMessage
	mock.lockGetMessage.RUnlock()
	return calls
}

// GetMessages calls GetMessagesFunc.
func (mock *IHarmonyDBMock) GetMessages(channelID uint64) ([]*entgen.Message, error) {
	if mock.GetMessagesFunc == nil {
		panic("IHarmonyDBMock.GetMessagesFunc: method is nil but IHarmonyDB.GetMessages was just called")
	}
	callInfo := struct {
		ChannelID uint64
	}{
		ChannelID: channelID,
	}
	mock.lockGetMessages.Lock()
	mock.calls.GetMessages = append(mock.calls.GetMessages, callInfo)
	mock.lockGetMessages.Unlock()
	return mock.GetMessagesFunc(channelID)
}

// GetMessagesCalls gets all the calls that were made to GetMessages.
// Check the length with:
//     len(mockedIHarmonyDB.GetMessagesCalls())
func (mock *IHarmonyDBMock) GetMessagesCalls() []struct {
	ChannelID uint64
} {
	var calls []struct {
		ChannelID uint64
	}
	mock.lockGetMessages.RLock()
	calls = mock.calls.GetMessages
	mock.lockGetMessages.RUnlock()
	return calls
}

// GetMessagesBefore calls GetMessagesBeforeFunc.
func (mock *IHarmonyDBMock) GetMessagesBefore(channelID uint64, date time.Time) ([]*entgen.Message, error) {
	if mock.GetMessagesBeforeFunc == nil {
		panic("IHarmonyDBMock.GetMessagesBeforeFunc: method is nil but IHarmonyDB.GetMessagesBefore was just called")
	}
	callInfo := struct {
		ChannelID uint64
		Date      time.Time
	}{
		ChannelID: channelID,
		Date:      date,
	}
	mock.lockGetMessagesBefore.Lock()
	mock.calls.GetMessagesBefore = append(mock.calls.GetMessagesBefore, callInfo)
	mock.lockGetMessagesBefore.Unlock()
	return mock.GetMessagesBeforeFunc(channelID, date)
}

// GetMessagesBeforeCalls gets all the calls that were made to GetMessagesBefore.
// Check the length with:
//     len(mockedIHarmonyDB.GetMessagesBeforeCalls())
func (mock *IHarmonyDBMock) GetMessagesBeforeCalls() []struct {
	ChannelID uint64
	Date      time.Time
} {
	var calls []struct {
		ChannelID uint64
		Date      time.Time
	}
	mock.lockGetMessagesBefore.RLock()
	calls = mock.calls.GetMessagesBefore
	mock.lockGetMessagesBefore.RUnlock()
	return calls
}

// GetOwner calls GetOwnerFunc.
func (mock *IHarmonyDBMock) GetOwner(guildID uint64) (uint64, error) {
	if mock.GetOwnerFunc == nil {
		panic("IHarmonyDBMock.GetOwnerFunc: method is nil but IHarmonyDB.GetOwner was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetOwner.Lock()
	mock.calls.GetOwner = append(mock.calls.GetOwner, callInfo)
	mock.lockGetOwner.Unlock()
	return mock.GetOwnerFunc(guildID)
}

// GetOwnerCalls gets all the calls that were made to GetOwner.
// Check the length with:
//     len(mockedIHarmonyDB.GetOwnerCalls())
func (mock *IHarmonyDBMock) GetOwnerCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetOwner.RLock()
	calls = mock.calls.GetOwner
	mock.lockGetOwner.RUnlock()
	return calls
}

// GetPermissions calls GetPermissionsFunc.
func (mock *IHarmonyDBMock) GetPermissions(roleID uint64) ([]PermissionsNode, error) {
	if mock.GetPermissionsFunc == nil {
		panic("IHarmonyDBMock.GetPermissionsFunc: method is nil but IHarmonyDB.GetPermissions was just called")
	}
	callInfo := struct {
		RoleID uint64
	}{
		RoleID: roleID,
	}
	mock.lockGetPermissions.Lock()
	mock.calls.GetPermissions = append(mock.calls.GetPermissions, callInfo)
	mock.lockGetPermissions.Unlock()
	return mock.GetPermissionsFunc(roleID)
}

// GetPermissionsCalls gets all the calls that were made to GetPermissions.
// Check the length with:
//     len(mockedIHarmonyDB.GetPermissionsCalls())
func (mock *IHarmonyDBMock) GetPermissionsCalls() []struct {
	RoleID uint64
} {
	var calls []struct {
		RoleID uint64
	}
	mock.lockGetPermissions.RLock()
	calls = mock.calls.GetPermissions
	mock.lockGetPermissions.RUnlock()
	return calls
}

// GetPermissionsData calls GetPermissionsDataFunc.
func (mock *IHarmonyDBMock) GetPermissionsData(guildID uint64) (PermissionsData, error) {
	if mock.GetPermissionsDataFunc == nil {
		panic("IHarmonyDBMock.GetPermissionsDataFunc: method is nil but IHarmonyDB.GetPermissionsData was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockGetPermissionsData.Lock()
	mock.calls.GetPermissionsData = append(mock.calls.GetPermissionsData, callInfo)
	mock.lockGetPermissionsData.Unlock()
	return mock.GetPermissionsDataFunc(guildID)
}

// GetPermissionsDataCalls gets all the calls that were made to GetPermissionsData.
// Check the length with:
//     len(mockedIHarmonyDB.GetPermissionsDataCalls())
func (mock *IHarmonyDBMock) GetPermissionsDataCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockGetPermissionsData.RLock()
	calls = mock.calls.GetPermissionsData
	mock.lockGetPermissionsData.RUnlock()
	return calls
}

// GetUserByEmail calls GetUserByEmailFunc.
func (mock *IHarmonyDBMock) GetUserByEmail(email string) (UserData, error) {
	if mock.GetUserByEmailFunc == nil {
		panic("IHarmonyDBMock.GetUserByEmailFunc: method is nil but IHarmonyDB.GetUserByEmail was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	mock.lockGetUserByEmail.Lock()
	mock.calls.GetUserByEmail = append(mock.calls.GetUserByEmail, callInfo)
	mock.lockGetUserByEmail.Unlock()
	return mock.GetUserByEmailFunc(email)
}

// GetUserByEmailCalls gets all the calls that were made to GetUserByEmail.
// Check the length with:
//     len(mockedIHarmonyDB.GetUserByEmailCalls())
func (mock *IHarmonyDBMock) GetUserByEmailCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	mock.lockGetUserByEmail.RLock()
	calls = mock.calls.GetUserByEmail
	mock.lockGetUserByEmail.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *IHarmonyDBMock) GetUserByID(userID uint64) (UserData, error) {
	if mock.GetUserByIDFunc == nil {
		panic("IHarmonyDBMock.GetUserByIDFunc: method is nil but IHarmonyDB.GetUserByID was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(userID)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockedIHarmonyDB.GetUserByIDCalls())
func (mock *IHarmonyDBMock) GetUserByIDCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// GetUserMetadata calls GetUserMetadataFunc.
func (mock *IHarmonyDBMock) GetUserMetadata(userID uint64, appID string) (string, error) {
	if mock.GetUserMetadataFunc == nil {
		panic("IHarmonyDBMock.GetUserMetadataFunc: method is nil but IHarmonyDB.GetUserMetadata was just called")
	}
	callInfo := struct {
		UserID uint64
		AppID  string
	}{
		UserID: userID,
		AppID:  appID,
	}
	mock.lockGetUserMetadata.Lock()
	mock.calls.GetUserMetadata = append(mock.calls.GetUserMetadata, callInfo)
	mock.lockGetUserMetadata.Unlock()
	return mock.GetUserMetadataFunc(userID, appID)
}

// GetUserMetadataCalls gets all the calls that were made to GetUserMetadata.
// Check the length with:
//     len(mockedIHarmonyDB.GetUserMetadataCalls())
func (mock *IHarmonyDBMock) GetUserMetadataCalls() []struct {
	UserID uint64
	AppID  string
} {
	var calls []struct {
		UserID uint64
		AppID  string
	}
	mock.lockGetUserMetadata.RLock()
	calls = mock.calls.GetUserMetadata
	mock.lockGetUserMetadata.RUnlock()
	return calls
}

// HasChannelWithID calls HasChannelWithIDFunc.
func (mock *IHarmonyDBMock) HasChannelWithID(guildID uint64, channelID uint64) (bool, error) {
	if mock.HasChannelWithIDFunc == nil {
		panic("IHarmonyDBMock.HasChannelWithIDFunc: method is nil but IHarmonyDB.HasChannelWithID was just called")
	}
	callInfo := struct {
		GuildID   uint64
		ChannelID uint64
	}{
		GuildID:   guildID,
		ChannelID: channelID,
	}
	mock.lockHasChannelWithID.Lock()
	mock.calls.HasChannelWithID = append(mock.calls.HasChannelWithID, callInfo)
	mock.lockHasChannelWithID.Unlock()
	return mock.HasChannelWithIDFunc(guildID, channelID)
}

// HasChannelWithIDCalls gets all the calls that were made to HasChannelWithID.
// Check the length with:
//     len(mockedIHarmonyDB.HasChannelWithIDCalls())
func (mock *IHarmonyDBMock) HasChannelWithIDCalls() []struct {
	GuildID   uint64
	ChannelID uint64
} {
	var calls []struct {
		GuildID   uint64
		ChannelID uint64
	}
	mock.lockHasChannelWithID.RLock()
	calls = mock.calls.HasChannelWithID
	mock.lockHasChannelWithID.RUnlock()
	return calls
}

// HasGuildWithID calls HasGuildWithIDFunc.
func (mock *IHarmonyDBMock) HasGuildWithID(guildID uint64) (bool, error) {
	if mock.HasGuildWithIDFunc == nil {
		panic("IHarmonyDBMock.HasGuildWithIDFunc: method is nil but IHarmonyDB.HasGuildWithID was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockHasGuildWithID.Lock()
	mock.calls.HasGuildWithID = append(mock.calls.HasGuildWithID, callInfo)
	mock.lockHasGuildWithID.Unlock()
	return mock.HasGuildWithIDFunc(guildID)
}

// HasGuildWithIDCalls gets all the calls that were made to HasGuildWithID.
// Check the length with:
//     len(mockedIHarmonyDB.HasGuildWithIDCalls())
func (mock *IHarmonyDBMock) HasGuildWithIDCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockHasGuildWithID.RLock()
	calls = mock.calls.HasGuildWithID
	mock.lockHasGuildWithID.RUnlock()
	return calls
}

// HasMessageWithID calls HasMessageWithIDFunc.
func (mock *IHarmonyDBMock) HasMessageWithID(messageID uint64) (bool, error) {
	if mock.HasMessageWithIDFunc == nil {
		panic("IHarmonyDBMock.HasMessageWithIDFunc: method is nil but IHarmonyDB.HasMessageWithID was just called")
	}
	callInfo := struct {
		MessageID uint64
	}{
		MessageID: messageID,
	}
	mock.lockHasMessageWithID.Lock()
	mock.calls.HasMessageWithID = append(mock.calls.HasMessageWithID, callInfo)
	mock.lockHasMessageWithID.Unlock()
	return mock.HasMessageWithIDFunc(messageID)
}

// HasMessageWithIDCalls gets all the calls that were made to HasMessageWithID.
// Check the length with:
//     len(mockedIHarmonyDB.HasMessageWithIDCalls())
func (mock *IHarmonyDBMock) HasMessageWithIDCalls() []struct {
	MessageID uint64
} {
	var calls []struct {
		MessageID uint64
	}
	mock.lockHasMessageWithID.RLock()
	calls = mock.calls.HasMessageWithID
	mock.lockHasMessageWithID.RUnlock()
	return calls
}

// IncrementInvite calls IncrementInviteFunc.
func (mock *IHarmonyDBMock) IncrementInvite(inviteID string) error {
	if mock.IncrementInviteFunc == nil {
		panic("IHarmonyDBMock.IncrementInviteFunc: method is nil but IHarmonyDB.IncrementInvite was just called")
	}
	callInfo := struct {
		InviteID string
	}{
		InviteID: inviteID,
	}
	mock.lockIncrementInvite.Lock()
	mock.calls.IncrementInvite = append(mock.calls.IncrementInvite, callInfo)
	mock.lockIncrementInvite.Unlock()
	return mock.IncrementInviteFunc(inviteID)
}

// IncrementInviteCalls gets all the calls that were made to IncrementInvite.
// Check the length with:
//     len(mockedIHarmonyDB.IncrementInviteCalls())
func (mock *IHarmonyDBMock) IncrementInviteCalls() []struct {
	InviteID string
} {
	var calls []struct {
		InviteID string
	}
	mock.lockIncrementInvite.RLock()
	calls = mock.calls.IncrementInvite
	mock.lockIncrementInvite.RUnlock()
	return calls
}

// IsBanned calls IsBannedFunc.
func (mock *IHarmonyDBMock) IsBanned(guildID uint64, userID uint64) (bool, error) {
	if mock.IsBannedFunc == nil {
		panic("IHarmonyDBMock.IsBannedFunc: method is nil but IHarmonyDB.IsBanned was just called")
	}
	callInfo := struct {
		GuildID uint64
		UserID  uint64
	}{
		GuildID: guildID,
		UserID:  userID,
	}
	mock.lockIsBanned.Lock()
	mock.calls.IsBanned = append(mock.calls.IsBanned, callInfo)
	mock.lockIsBanned.Unlock()
	return mock.IsBannedFunc(guildID, userID)
}

// IsBannedCalls gets all the calls that were made to IsBanned.
// Check the length with:
//     len(mockedIHarmonyDB.IsBannedCalls())
func (mock *IHarmonyDBMock) IsBannedCalls() []struct {
	GuildID uint64
	UserID  uint64
} {
	var calls []struct {
		GuildID uint64
		UserID  uint64
	}
	mock.lockIsBanned.RLock()
	calls = mock.calls.IsBanned
	mock.lockIsBanned.RUnlock()
	return calls
}

// IsOwner calls IsOwnerFunc.
func (mock *IHarmonyDBMock) IsOwner(guildID uint64, userID uint64) (bool, error) {
	if mock.IsOwnerFunc == nil {
		panic("IHarmonyDBMock.IsOwnerFunc: method is nil but IHarmonyDB.IsOwner was just called")
	}
	callInfo := struct {
		GuildID uint64
		UserID  uint64
	}{
		GuildID: guildID,
		UserID:  userID,
	}
	mock.lockIsOwner.Lock()
	mock.calls.IsOwner = append(mock.calls.IsOwner, callInfo)
	mock.lockIsOwner.Unlock()
	return mock.IsOwnerFunc(guildID, userID)
}

// IsOwnerCalls gets all the calls that were made to IsOwner.
// Check the length with:
//     len(mockedIHarmonyDB.IsOwnerCalls())
func (mock *IHarmonyDBMock) IsOwnerCalls() []struct {
	GuildID uint64
	UserID  uint64
} {
	var calls []struct {
		GuildID uint64
		UserID  uint64
	}
	mock.lockIsOwner.RLock()
	calls = mock.calls.IsOwner
	mock.lockIsOwner.RUnlock()
	return calls
}

// IsPackOwner calls IsPackOwnerFunc.
func (mock *IHarmonyDBMock) IsPackOwner(userID uint64, packID uint64) (bool, error) {
	if mock.IsPackOwnerFunc == nil {
		panic("IHarmonyDBMock.IsPackOwnerFunc: method is nil but IHarmonyDB.IsPackOwner was just called")
	}
	callInfo := struct {
		UserID uint64
		PackID uint64
	}{
		UserID: userID,
		PackID: packID,
	}
	mock.lockIsPackOwner.Lock()
	mock.calls.IsPackOwner = append(mock.calls.IsPackOwner, callInfo)
	mock.lockIsPackOwner.Unlock()
	return mock.IsPackOwnerFunc(userID, packID)
}

// IsPackOwnerCalls gets all the calls that were made to IsPackOwner.
// Check the length with:
//     len(mockedIHarmonyDB.IsPackOwnerCalls())
func (mock *IHarmonyDBMock) IsPackOwnerCalls() []struct {
	UserID uint64
	PackID uint64
} {
	var calls []struct {
		UserID uint64
		PackID uint64
	}
	mock.lockIsPackOwner.RLock()
	calls = mock.calls.IsPackOwner
	mock.lockIsPackOwner.RUnlock()
	return calls
}

// ManageRoles calls ManageRolesFunc.
func (mock *IHarmonyDBMock) ManageRoles(guildID uint64, userID uint64, addRoles []uint64, removeRoles []uint64) error {
	if mock.ManageRolesFunc == nil {
		panic("IHarmonyDBMock.ManageRolesFunc: method is nil but IHarmonyDB.ManageRoles was just called")
	}
	callInfo := struct {
		GuildID     uint64
		UserID      uint64
		AddRoles    []uint64
		RemoveRoles []uint64
	}{
		GuildID:     guildID,
		UserID:      userID,
		AddRoles:    addRoles,
		RemoveRoles: removeRoles,
	}
	mock.lockManageRoles.Lock()
	mock.calls.ManageRoles = append(mock.calls.ManageRoles, callInfo)
	mock.lockManageRoles.Unlock()
	return mock.ManageRolesFunc(guildID, userID, addRoles, removeRoles)
}

// ManageRolesCalls gets all the calls that were made to ManageRoles.
// Check the length with:
//     len(mockedIHarmonyDB.ManageRolesCalls())
func (mock *IHarmonyDBMock) ManageRolesCalls() []struct {
	GuildID     uint64
	UserID      uint64
	AddRoles    []uint64
	RemoveRoles []uint64
} {
	var calls []struct {
		GuildID     uint64
		UserID      uint64
		AddRoles    []uint64
		RemoveRoles []uint64
	}
	mock.lockManageRoles.RLock()
	calls = mock.calls.ManageRoles
	mock.lockManageRoles.RUnlock()
	return calls
}

// MembersInGuild calls MembersInGuildFunc.
func (mock *IHarmonyDBMock) MembersInGuild(guildID uint64) ([]uint64, error) {
	if mock.MembersInGuildFunc == nil {
		panic("IHarmonyDBMock.MembersInGuildFunc: method is nil but IHarmonyDB.MembersInGuild was just called")
	}
	callInfo := struct {
		GuildID uint64
	}{
		GuildID: guildID,
	}
	mock.lockMembersInGuild.Lock()
	mock.calls.MembersInGuild = append(mock.calls.MembersInGuild, callInfo)
	mock.lockMembersInGuild.Unlock()
	return mock.MembersInGuildFunc(guildID)
}

// MembersInGuildCalls gets all the calls that were made to MembersInGuild.
// Check the length with:
//     len(mockedIHarmonyDB.MembersInGuildCalls())
func (mock *IHarmonyDBMock) MembersInGuildCalls() []struct {
	GuildID uint64
} {
	var calls []struct {
		GuildID uint64
	}
	mock.lockMembersInGuild.RLock()
	calls = mock.calls.MembersInGuild
	mock.lockMembersInGuild.RUnlock()
	return calls
}

// Migrate calls MigrateFunc.
func (mock *IHarmonyDBMock) Migrate() error {
	if mock.MigrateFunc == nil {
		panic("IHarmonyDBMock.MigrateFunc: method is nil but IHarmonyDB.Migrate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMigrate.Lock()
	mock.calls.Migrate = append(mock.calls.Migrate, callInfo)
	mock.lockMigrate.Unlock()
	return mock.MigrateFunc()
}

// MigrateCalls gets all the calls that were made to Migrate.
// Check the length with:
//     len(mockedIHarmonyDB.MigrateCalls())
func (mock *IHarmonyDBMock) MigrateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMigrate.RLock()
	calls = mock.calls.Migrate
	mock.lockMigrate.RUnlock()
	return calls
}

// ModifyRole calls ModifyRoleFunc.
func (mock *IHarmonyDBMock) ModifyRole(guildID uint64, roleID uint64, name string, color int32, hoist bool, pingable bool, updateName bool, updateColor bool, updateHoist bool, updatePingable bool) error {
	if mock.ModifyRoleFunc == nil {
		panic("IHarmonyDBMock.ModifyRoleFunc: method is nil but IHarmonyDB.ModifyRole was just called")
	}
	callInfo := struct {
		GuildID        uint64
		RoleID         uint64
		Name           string
		Color          int32
		Hoist          bool
		Pingable       bool
		UpdateName     bool
		UpdateColor    bool
		UpdateHoist    bool
		UpdatePingable bool
	}{
		GuildID:        guildID,
		RoleID:         roleID,
		Name:           name,
		Color:          color,
		Hoist:          hoist,
		Pingable:       pingable,
		UpdateName:     updateName,
		UpdateColor:    updateColor,
		UpdateHoist:    updateHoist,
		UpdatePingable: updatePingable,
	}
	mock.lockModifyRole.Lock()
	mock.calls.ModifyRole = append(mock.calls.ModifyRole, callInfo)
	mock.lockModifyRole.Unlock()
	return mock.ModifyRoleFunc(guildID, roleID, name, color, hoist, pingable, updateName, updateColor, updateHoist, updatePingable)
}

// ModifyRoleCalls gets all the calls that were made to ModifyRole.
// Check the length with:
//     len(mockedIHarmonyDB.ModifyRoleCalls())
func (mock *IHarmonyDBMock) ModifyRoleCalls() []struct {
	GuildID        uint64
	RoleID         uint64
	Name           string
	Color          int32
	Hoist          bool
	Pingable       bool
	UpdateName     bool
	UpdateColor    bool
	UpdateHoist    bool
	UpdatePingable bool
} {
	var calls []struct {
		GuildID        uint64
		RoleID         uint64
		Name           string
		Color          int32
		Hoist          bool
		Pingable       bool
		UpdateName     bool
		UpdateColor    bool
		UpdateHoist    bool
		UpdatePingable bool
	}
	mock.lockModifyRole.RLock()
	calls = mock.calls.ModifyRole
	mock.lockModifyRole.RUnlock()
	return calls
}

// MoveChannel calls MoveChannelFunc.
func (mock *IHarmonyDBMock) MoveChannel(channelID uint64, previousID *uint64, nextID *uint64) error {
	if mock.MoveChannelFunc == nil {
		panic("IHarmonyDBMock.MoveChannelFunc: method is nil but IHarmonyDB.MoveChannel was just called")
	}
	callInfo := struct {
		ChannelID  uint64
		PreviousID *uint64
		NextID     *uint64
	}{
		ChannelID:  channelID,
		PreviousID: previousID,
		NextID:     nextID,
	}
	mock.lockMoveChannel.Lock()
	mock.calls.MoveChannel = append(mock.calls.MoveChannel, callInfo)
	mock.lockMoveChannel.Unlock()
	return mock.MoveChannelFunc(channelID, previousID, nextID)
}

// MoveChannelCalls gets all the calls that were made to MoveChannel.
// Check the length with:
//     len(mockedIHarmonyDB.MoveChannelCalls())
func (mock *IHarmonyDBMock) MoveChannelCalls() []struct {
	ChannelID  uint64
	PreviousID *uint64
	NextID     *uint64
} {
	var calls []struct {
		ChannelID  uint64
		PreviousID *uint64
		NextID     *uint64
	}
	mock.lockMoveChannel.RLock()
	calls = mock.calls.MoveChannel
	mock.lockMoveChannel.RUnlock()
	return calls
}

// MoveGuild calls MoveGuildFunc.
func (mock *IHarmonyDBMock) MoveGuild(userID uint64, guildID uint64, homeServer string, nextGuildID uint64, prevGuildID uint64, nextHomeServer string, prevHomeServer string) error {
	if mock.MoveGuildFunc == nil {
		panic("IHarmonyDBMock.MoveGuildFunc: method is nil but IHarmonyDB.MoveGuild was just called")
	}
	callInfo := struct {
		UserID         uint64
		GuildID        uint64
		HomeServer     string
		NextGuildID    uint64
		PrevGuildID    uint64
		NextHomeServer string
		PrevHomeServer string
	}{
		UserID:         userID,
		GuildID:        guildID,
		HomeServer:     homeServer,
		NextGuildID:    nextGuildID,
		PrevGuildID:    prevGuildID,
		NextHomeServer: nextHomeServer,
		PrevHomeServer: prevHomeServer,
	}
	mock.lockMoveGuild.Lock()
	mock.calls.MoveGuild = append(mock.calls.MoveGuild, callInfo)
	mock.lockMoveGuild.Unlock()
	return mock.MoveGuildFunc(userID, guildID, homeServer, nextGuildID, prevGuildID, nextHomeServer, prevHomeServer)
}

// MoveGuildCalls gets all the calls that were made to MoveGuild.
// Check the length with:
//     len(mockedIHarmonyDB.MoveGuildCalls())
func (mock *IHarmonyDBMock) MoveGuildCalls() []struct {
	UserID         uint64
	GuildID        uint64
	HomeServer     string
	NextGuildID    uint64
	PrevGuildID    uint64
	NextHomeServer string
	PrevHomeServer string
} {
	var calls []struct {
		UserID         uint64
		GuildID        uint64
		HomeServer     string
		NextGuildID    uint64
		PrevGuildID    uint64
		NextHomeServer string
		PrevHomeServer string
	}
	mock.lockMoveGuild.RLock()
	calls = mock.calls.MoveGuild
	mock.lockMoveGuild.RUnlock()
	return calls
}

// MoveRole calls MoveRoleFunc.
func (mock *IHarmonyDBMock) MoveRole(guildID uint64, roleID uint64, previousRole uint64, nextRole uint64) error {
	if mock.MoveRoleFunc == nil {
		panic("IHarmonyDBMock.MoveRoleFunc: method is nil but IHarmonyDB.MoveRole was just called")
	}
	callInfo := struct {
		GuildID      uint64
		RoleID       uint64
		PreviousRole uint64
		NextRole     uint64
	}{
		GuildID:      guildID,
		RoleID:       roleID,
		PreviousRole: previousRole,
		NextRole:     nextRole,
	}
	mock.lockMoveRole.Lock()
	mock.calls.MoveRole = append(mock.calls.MoveRole, callInfo)
	mock.lockMoveRole.Unlock()
	return mock.MoveRoleFunc(guildID, roleID, previousRole, nextRole)
}

// MoveRoleCalls gets all the calls that were made to MoveRole.
// Check the length with:
//     len(mockedIHarmonyDB.MoveRoleCalls())
func (mock *IHarmonyDBMock) MoveRoleCalls() []struct {
	GuildID      uint64
	RoleID       uint64
	PreviousRole uint64
	NextRole     uint64
} {
	var calls []struct {
		GuildID      uint64
		RoleID       uint64
		PreviousRole uint64
		NextRole     uint64
	}
	mock.lockMoveRole.RLock()
	calls = mock.calls.MoveRole
	mock.lockMoveRole.RUnlock()
	return calls
}

// RemoveGuildFromList calls RemoveGuildFromListFunc.
func (mock *IHarmonyDBMock) RemoveGuildFromList(userID uint64, guildID uint64, homeServer string) error {
	if mock.RemoveGuildFromListFunc == nil {
		panic("IHarmonyDBMock.RemoveGuildFromListFunc: method is nil but IHarmonyDB.RemoveGuildFromList was just called")
	}
	callInfo := struct {
		UserID     uint64
		GuildID    uint64
		HomeServer string
	}{
		UserID:     userID,
		GuildID:    guildID,
		HomeServer: homeServer,
	}
	mock.lockRemoveGuildFromList.Lock()
	mock.calls.RemoveGuildFromList = append(mock.calls.RemoveGuildFromList, callInfo)
	mock.lockRemoveGuildFromList.Unlock()
	return mock.RemoveGuildFromListFunc(userID, guildID, homeServer)
}

// RemoveGuildFromListCalls gets all the calls that were made to RemoveGuildFromList.
// Check the length with:
//     len(mockedIHarmonyDB.RemoveGuildFromListCalls())
func (mock *IHarmonyDBMock) RemoveGuildFromListCalls() []struct {
	UserID     uint64
	GuildID    uint64
	HomeServer string
} {
	var calls []struct {
		UserID     uint64
		GuildID    uint64
		HomeServer string
	}
	mock.lockRemoveGuildFromList.RLock()
	calls = mock.calls.RemoveGuildFromList
	mock.lockRemoveGuildFromList.RUnlock()
	return calls
}

// RemoveRoleFromGuild calls RemoveRoleFromGuildFunc.
func (mock *IHarmonyDBMock) RemoveRoleFromGuild(guildID uint64, roleID uint64) error {
	if mock.RemoveRoleFromGuildFunc == nil {
		panic("IHarmonyDBMock.RemoveRoleFromGuildFunc: method is nil but IHarmonyDB.RemoveRoleFromGuild was just called")
	}
	callInfo := struct {
		GuildID uint64
		RoleID  uint64
	}{
		GuildID: guildID,
		RoleID:  roleID,
	}
	mock.lockRemoveRoleFromGuild.Lock()
	mock.calls.RemoveRoleFromGuild = append(mock.calls.RemoveRoleFromGuild, callInfo)
	mock.lockRemoveRoleFromGuild.Unlock()
	return mock.RemoveRoleFromGuildFunc(guildID, roleID)
}

// RemoveRoleFromGuildCalls gets all the calls that were made to RemoveRoleFromGuild.
// Check the length with:
//     len(mockedIHarmonyDB.RemoveRoleFromGuildCalls())
func (mock *IHarmonyDBMock) RemoveRoleFromGuildCalls() []struct {
	GuildID uint64
	RoleID  uint64
} {
	var calls []struct {
		GuildID uint64
		RoleID  uint64
	}
	mock.lockRemoveRoleFromGuild.RLock()
	calls = mock.calls.RemoveRoleFromGuild
	mock.lockRemoveRoleFromGuild.RUnlock()
	return calls
}

// ResolveGuildID calls ResolveGuildIDFunc.
func (mock *IHarmonyDBMock) ResolveGuildID(inviteID string) (uint64, error) {
	if mock.ResolveGuildIDFunc == nil {
		panic("IHarmonyDBMock.ResolveGuildIDFunc: method is nil but IHarmonyDB.ResolveGuildID was just called")
	}
	callInfo := struct {
		InviteID string
	}{
		InviteID: inviteID,
	}
	mock.lockResolveGuildID.Lock()
	mock.calls.ResolveGuildID = append(mock.calls.ResolveGuildID, callInfo)
	mock.lockResolveGuildID.Unlock()
	return mock.ResolveGuildIDFunc(inviteID)
}

// ResolveGuildIDCalls gets all the calls that were made to ResolveGuildID.
// Check the length with:
//     len(mockedIHarmonyDB.ResolveGuildIDCalls())
func (mock *IHarmonyDBMock) ResolveGuildIDCalls() []struct {
	InviteID string
} {
	var calls []struct {
		InviteID string
	}
	mock.lockResolveGuildID.RLock()
	calls = mock.calls.ResolveGuildID
	mock.lockResolveGuildID.RUnlock()
	return calls
}

// RolesForUser calls RolesForUserFunc.
func (mock *IHarmonyDBMock) RolesForUser(guildID uint64, userID uint64) ([]uint64, error) {
	if mock.RolesForUserFunc == nil {
		panic("IHarmonyDBMock.RolesForUserFunc: method is nil but IHarmonyDB.RolesForUser was just called")
	}
	callInfo := struct {
		GuildID uint64
		UserID  uint64
	}{
		GuildID: guildID,
		UserID:  userID,
	}
	mock.lockRolesForUser.Lock()
	mock.calls.RolesForUser = append(mock.calls.RolesForUser, callInfo)
	mock.lockRolesForUser.Unlock()
	return mock.RolesForUserFunc(guildID, userID)
}

// RolesForUserCalls gets all the calls that were made to RolesForUser.
// Check the length with:
//     len(mockedIHarmonyDB.RolesForUserCalls())
func (mock *IHarmonyDBMock) RolesForUserCalls() []struct {
	GuildID uint64
	UserID  uint64
} {
	var calls []struct {
		GuildID uint64
		UserID  uint64
	}
	mock.lockRolesForUser.RLock()
	calls = mock.calls.RolesForUser
	mock.lockRolesForUser.RUnlock()
	return calls
}

// SessionExpireRoutine calls SessionExpireRoutineFunc.
func (mock *IHarmonyDBMock) SessionExpireRoutine() {
	if mock.SessionExpireRoutineFunc == nil {
		panic("IHarmonyDBMock.SessionExpireRoutineFunc: method is nil but IHarmonyDB.SessionExpireRoutine was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSessionExpireRoutine.Lock()
	mock.calls.SessionExpireRoutine = append(mock.calls.SessionExpireRoutine, callInfo)
	mock.lockSessionExpireRoutine.Unlock()
	mock.SessionExpireRoutineFunc()
}

// SessionExpireRoutineCalls gets all the calls that were made to SessionExpireRoutine.
// Check the length with:
//     len(mockedIHarmonyDB.SessionExpireRoutineCalls())
func (mock *IHarmonyDBMock) SessionExpireRoutineCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSessionExpireRoutine.RLock()
	calls = mock.calls.SessionExpireRoutine
	mock.lockSessionExpireRoutine.RUnlock()
	return calls
}

// SessionToUserID calls SessionToUserIDFunc.
func (mock *IHarmonyDBMock) SessionToUserID(session string) (uint64, error) {
	if mock.SessionToUserIDFunc == nil {
		panic("IHarmonyDBMock.SessionToUserIDFunc: method is nil but IHarmonyDB.SessionToUserID was just called")
	}
	callInfo := struct {
		Session string
	}{
		Session: session,
	}
	mock.lockSessionToUserID.Lock()
	mock.calls.SessionToUserID = append(mock.calls.SessionToUserID, callInfo)
	mock.lockSessionToUserID.Unlock()
	return mock.SessionToUserIDFunc(session)
}

// SessionToUserIDCalls gets all the calls that were made to SessionToUserID.
// Check the length with:
//     len(mockedIHarmonyDB.SessionToUserIDCalls())
func (mock *IHarmonyDBMock) SessionToUserIDCalls() []struct {
	Session string
} {
	var calls []struct {
		Session string
	}
	mock.lockSessionToUserID.RLock()
	calls = mock.calls.SessionToUserID
	mock.lockSessionToUserID.RUnlock()
	return calls
}

// SetAvatar calls SetAvatarFunc.
func (mock *IHarmonyDBMock) SetAvatar(userID uint64, avatar string) error {
	if mock.SetAvatarFunc == nil {
		panic("IHarmonyDBMock.SetAvatarFunc: method is nil but IHarmonyDB.SetAvatar was just called")
	}
	callInfo := struct {
		UserID uint64
		Avatar string
	}{
		UserID: userID,
		Avatar: avatar,
	}
	mock.lockSetAvatar.Lock()
	mock.calls.SetAvatar = append(mock.calls.SetAvatar, callInfo)
	mock.lockSetAvatar.Unlock()
	return mock.SetAvatarFunc(userID, avatar)
}

// SetAvatarCalls gets all the calls that were made to SetAvatar.
// Check the length with:
//     len(mockedIHarmonyDB.SetAvatarCalls())
func (mock *IHarmonyDBMock) SetAvatarCalls() []struct {
	UserID uint64
	Avatar string
} {
	var calls []struct {
		UserID uint64
		Avatar string
	}
	mock.lockSetAvatar.RLock()
	calls = mock.calls.SetAvatar
	mock.lockSetAvatar.RUnlock()
	return calls
}

// SetFileMetadata calls SetFileMetadataFunc.
func (mock *IHarmonyDBMock) SetFileMetadata(fileID string, contentType string, name string, size int32) error {
	if mock.SetFileMetadataFunc == nil {
		panic("IHarmonyDBMock.SetFileMetadataFunc: method is nil but IHarmonyDB.SetFileMetadata was just called")
	}
	callInfo := struct {
		FileID      string
		ContentType string
		Name        string
		Size        int32
	}{
		FileID:      fileID,
		ContentType: contentType,
		Name:        name,
		Size:        size,
	}
	mock.lockSetFileMetadata.Lock()
	mock.calls.SetFileMetadata = append(mock.calls.SetFileMetadata, callInfo)
	mock.lockSetFileMetadata.Unlock()
	return mock.SetFileMetadataFunc(fileID, contentType, name, size)
}

// SetFileMetadataCalls gets all the calls that were made to SetFileMetadata.
// Check the length with:
//     len(mockedIHarmonyDB.SetFileMetadataCalls())
func (mock *IHarmonyDBMock) SetFileMetadataCalls() []struct {
	FileID      string
	ContentType string
	Name        string
	Size        int32
} {
	var calls []struct {
		FileID      string
		ContentType string
		Name        string
		Size        int32
	}
	mock.lockSetFileMetadata.RLock()
	calls = mock.calls.SetFileMetadata
	mock.lockSetFileMetadata.RUnlock()
	return calls
}

// SetIsBot calls SetIsBotFunc.
func (mock *IHarmonyDBMock) SetIsBot(userID uint64, isBot bool) error {
	if mock.SetIsBotFunc == nil {
		panic("IHarmonyDBMock.SetIsBotFunc: method is nil but IHarmonyDB.SetIsBot was just called")
	}
	callInfo := struct {
		UserID uint64
		IsBot  bool
	}{
		UserID: userID,
		IsBot:  isBot,
	}
	mock.lockSetIsBot.Lock()
	mock.calls.SetIsBot = append(mock.calls.SetIsBot, callInfo)
	mock.lockSetIsBot.Unlock()
	return mock.SetIsBotFunc(userID, isBot)
}

// SetIsBotCalls gets all the calls that were made to SetIsBot.
// Check the length with:
//     len(mockedIHarmonyDB.SetIsBotCalls())
func (mock *IHarmonyDBMock) SetIsBotCalls() []struct {
	UserID uint64
	IsBot  bool
} {
	var calls []struct {
		UserID uint64
		IsBot  bool
	}
	mock.lockSetIsBot.RLock()
	calls = mock.calls.SetIsBot
	mock.lockSetIsBot.RUnlock()
	return calls
}

// SetPermissions calls SetPermissionsFunc.
func (mock *IHarmonyDBMock) SetPermissions(guildID uint64, channelID uint64, roleID uint64, permissions []PermissionsNode) error {
	if mock.SetPermissionsFunc == nil {
		panic("IHarmonyDBMock.SetPermissionsFunc: method is nil but IHarmonyDB.SetPermissions was just called")
	}
	callInfo := struct {
		GuildID     uint64
		ChannelID   uint64
		RoleID      uint64
		Permissions []PermissionsNode
	}{
		GuildID:     guildID,
		ChannelID:   channelID,
		RoleID:      roleID,
		Permissions: permissions,
	}
	mock.lockSetPermissions.Lock()
	mock.calls.SetPermissions = append(mock.calls.SetPermissions, callInfo)
	mock.lockSetPermissions.Unlock()
	return mock.SetPermissionsFunc(guildID, channelID, roleID, permissions)
}

// SetPermissionsCalls gets all the calls that were made to SetPermissions.
// Check the length with:
//     len(mockedIHarmonyDB.SetPermissionsCalls())
func (mock *IHarmonyDBMock) SetPermissionsCalls() []struct {
	GuildID     uint64
	ChannelID   uint64
	RoleID      uint64
	Permissions []PermissionsNode
} {
	var calls []struct {
		GuildID     uint64
		ChannelID   uint64
		RoleID      uint64
		Permissions []PermissionsNode
	}
	mock.lockSetPermissions.RLock()
	calls = mock.calls.SetPermissions
	mock.lockSetPermissions.RUnlock()
	return calls
}

// SetStatus calls SetStatusFunc.
func (mock *IHarmonyDBMock) SetStatus(userID uint64, status harmonytypesv1.UserStatus) error {
	if mock.SetStatusFunc == nil {
		panic("IHarmonyDBMock.SetStatusFunc: method is nil but IHarmonyDB.SetStatus was just called")
	}
	callInfo := struct {
		UserID uint64
		Status harmonytypesv1.UserStatus
	}{
		UserID: userID,
		Status: status,
	}
	mock.lockSetStatus.Lock()
	mock.calls.SetStatus = append(mock.calls.SetStatus, callInfo)
	mock.lockSetStatus.Unlock()
	return mock.SetStatusFunc(userID, status)
}

// SetStatusCalls gets all the calls that were made to SetStatus.
// Check the length with:
//     len(mockedIHarmonyDB.SetStatusCalls())
func (mock *IHarmonyDBMock) SetStatusCalls() []struct {
	UserID uint64
	Status harmonytypesv1.UserStatus
} {
	var calls []struct {
		UserID uint64
		Status harmonytypesv1.UserStatus
	}
	mock.lockSetStatus.RLock()
	calls = mock.calls.SetStatus
	mock.lockSetStatus.RUnlock()
	return calls
}

// SetUsername calls SetUsernameFunc.
func (mock *IHarmonyDBMock) SetUsername(userID uint64, username string) error {
	if mock.SetUsernameFunc == nil {
		panic("IHarmonyDBMock.SetUsernameFunc: method is nil but IHarmonyDB.SetUsername was just called")
	}
	callInfo := struct {
		UserID   uint64
		Username string
	}{
		UserID:   userID,
		Username: username,
	}
	mock.lockSetUsername.Lock()
	mock.calls.SetUsername = append(mock.calls.SetUsername, callInfo)
	mock.lockSetUsername.Unlock()
	return mock.SetUsernameFunc(userID, username)
}

// SetUsernameCalls gets all the calls that were made to SetUsername.
// Check the length with:
//     len(mockedIHarmonyDB.SetUsernameCalls())
func (mock *IHarmonyDBMock) SetUsernameCalls() []struct {
	UserID   uint64
	Username string
} {
	var calls []struct {
		UserID   uint64
		Username string
	}
	mock.lockSetUsername.RLock()
	calls = mock.calls.SetUsername
	mock.lockSetUsername.RUnlock()
	return calls
}

// UnbanUser calls UnbanUserFunc.
func (mock *IHarmonyDBMock) UnbanUser(guildID uint64, userID uint64) error {
	if mock.UnbanUserFunc == nil {
		panic("IHarmonyDBMock.UnbanUserFunc: method is nil but IHarmonyDB.UnbanUser was just called")
	}
	callInfo := struct {
		GuildID uint64
		UserID  uint64
	}{
		GuildID: guildID,
		UserID:  userID,
	}
	mock.lockUnbanUser.Lock()
	mock.calls.UnbanUser = append(mock.calls.UnbanUser, callInfo)
	mock.lockUnbanUser.Unlock()
	return mock.UnbanUserFunc(guildID, userID)
}

// UnbanUserCalls gets all the calls that were made to UnbanUser.
// Check the length with:
//     len(mockedIHarmonyDB.UnbanUserCalls())
func (mock *IHarmonyDBMock) UnbanUserCalls() []struct {
	GuildID uint64
	UserID  uint64
} {
	var calls []struct {
		GuildID uint64
		UserID  uint64
	}
	mock.lockUnbanUser.RLock()
	calls = mock.calls.UnbanUser
	mock.lockUnbanUser.RUnlock()
	return calls
}

// UpdateAvatar calls UpdateAvatarFunc.
func (mock *IHarmonyDBMock) UpdateAvatar(userID uint64, avatar string) error {
	if mock.UpdateAvatarFunc == nil {
		panic("IHarmonyDBMock.UpdateAvatarFunc: method is nil but IHarmonyDB.UpdateAvatar was just called")
	}
	callInfo := struct {
		UserID uint64
		Avatar string
	}{
		UserID: userID,
		Avatar: avatar,
	}
	mock.lockUpdateAvatar.Lock()
	mock.calls.UpdateAvatar = append(mock.calls.UpdateAvatar, callInfo)
	mock.lockUpdateAvatar.Unlock()
	return mock.UpdateAvatarFunc(userID, avatar)
}

// UpdateAvatarCalls gets all the calls that were made to UpdateAvatar.
// Check the length with:
//     len(mockedIHarmonyDB.UpdateAvatarCalls())
func (mock *IHarmonyDBMock) UpdateAvatarCalls() []struct {
	UserID uint64
	Avatar string
} {
	var calls []struct {
		UserID uint64
		Avatar string
	}
	mock.lockUpdateAvatar.RLock()
	calls = mock.calls.UpdateAvatar
	mock.lockUpdateAvatar.RUnlock()
	return calls
}

// UpdateChannelInformation calls UpdateChannelInformationFunc.
func (mock *IHarmonyDBMock) UpdateChannelInformation(guildID uint64, channelID uint64, name *string, metadata []byte) error {
	if mock.UpdateChannelInformationFunc == nil {
		panic("IHarmonyDBMock.UpdateChannelInformationFunc: method is nil but IHarmonyDB.UpdateChannelInformation was just called")
	}
	callInfo := struct {
		GuildID   uint64
		ChannelID uint64
		Name      *string
		Metadata  []byte
	}{
		GuildID:   guildID,
		ChannelID: channelID,
		Name:      name,
		Metadata:  metadata,
	}
	mock.lockUpdateChannelInformation.Lock()
	mock.calls.UpdateChannelInformation = append(mock.calls.UpdateChannelInformation, callInfo)
	mock.lockUpdateChannelInformation.Unlock()
	return mock.UpdateChannelInformationFunc(guildID, channelID, name, metadata)
}

// UpdateChannelInformationCalls gets all the calls that were made to UpdateChannelInformation.
// Check the length with:
//     len(mockedIHarmonyDB.UpdateChannelInformationCalls())
func (mock *IHarmonyDBMock) UpdateChannelInformationCalls() []struct {
	GuildID   uint64
	ChannelID uint64
	Name      *string
	Metadata  []byte
} {
	var calls []struct {
		GuildID   uint64
		ChannelID uint64
		Name      *string
		Metadata  []byte
	}
	mock.lockUpdateChannelInformation.RLock()
	calls = mock.calls.UpdateChannelInformation
	mock.lockUpdateChannelInformation.RUnlock()
	return calls
}

// UpdateGuildInformation calls UpdateGuildInformationFunc.
func (mock *IHarmonyDBMock) UpdateGuildInformation(guildID uint64, name string, picture string, metadata *harmonytypesv1.Metadata, updateName bool, updatePicture bool, updateMetadata bool) error {
	if mock.UpdateGuildInformationFunc == nil {
		panic("IHarmonyDBMock.UpdateGuildInformationFunc: method is nil but IHarmonyDB.UpdateGuildInformation was just called")
	}
	callInfo := struct {
		GuildID        uint64
		Name           string
		Picture        string
		Metadata       *harmonytypesv1.Metadata
		UpdateName     bool
		UpdatePicture  bool
		UpdateMetadata bool
	}{
		GuildID:        guildID,
		Name:           name,
		Picture:        picture,
		Metadata:       metadata,
		UpdateName:     updateName,
		UpdatePicture:  updatePicture,
		UpdateMetadata: updateMetadata,
	}
	mock.lockUpdateGuildInformation.Lock()
	mock.calls.UpdateGuildInformation = append(mock.calls.UpdateGuildInformation, callInfo)
	mock.lockUpdateGuildInformation.Unlock()
	return mock.UpdateGuildInformationFunc(guildID, name, picture, metadata, updateName, updatePicture, updateMetadata)
}

// UpdateGuildInformationCalls gets all the calls that were made to UpdateGuildInformation.
// Check the length with:
//     len(mockedIHarmonyDB.UpdateGuildInformationCalls())
func (mock *IHarmonyDBMock) UpdateGuildInformationCalls() []struct {
	GuildID        uint64
	Name           string
	Picture        string
	Metadata       *harmonytypesv1.Metadata
	UpdateName     bool
	UpdatePicture  bool
	UpdateMetadata bool
} {
	var calls []struct {
		GuildID        uint64
		Name           string
		Picture        string
		Metadata       *harmonytypesv1.Metadata
		UpdateName     bool
		UpdatePicture  bool
		UpdateMetadata bool
	}
	mock.lockUpdateGuildInformation.RLock()
	calls = mock.calls.UpdateGuildInformation
	mock.lockUpdateGuildInformation.RUnlock()
	return calls
}

// UpdateTextMessage calls UpdateTextMessageFunc.
func (mock *IHarmonyDBMock) UpdateTextMessage(messageID uint64, content string) (time.Time, error) {
	if mock.UpdateTextMessageFunc == nil {
		panic("IHarmonyDBMock.UpdateTextMessageFunc: method is nil but IHarmonyDB.UpdateTextMessage was just called")
	}
	callInfo := struct {
		MessageID uint64
		Content   string
	}{
		MessageID: messageID,
		Content:   content,
	}
	mock.lockUpdateTextMessage.Lock()
	mock.calls.UpdateTextMessage = append(mock.calls.UpdateTextMessage, callInfo)
	mock.lockUpdateTextMessage.Unlock()
	return mock.UpdateTextMessageFunc(messageID, content)
}

// UpdateTextMessageCalls gets all the calls that were made to UpdateTextMessage.
// Check the length with:
//     len(mockedIHarmonyDB.UpdateTextMessageCalls())
func (mock *IHarmonyDBMock) UpdateTextMessageCalls() []struct {
	MessageID uint64
	Content   string
} {
	var calls []struct {
		MessageID uint64
		Content   string
	}
	mock.lockUpdateTextMessage.RLock()
	calls = mock.calls.UpdateTextMessage
	mock.lockUpdateTextMessage.RUnlock()
	return calls
}

// UpdateUsername calls UpdateUsernameFunc.
func (mock *IHarmonyDBMock) UpdateUsername(userID uint64, username string) error {
	if mock.UpdateUsernameFunc == nil {
		panic("IHarmonyDBMock.UpdateUsernameFunc: method is nil but IHarmonyDB.UpdateUsername was just called")
	}
	callInfo := struct {
		UserID   uint64
		Username string
	}{
		UserID:   userID,
		Username: username,
	}
	mock.lockUpdateUsername.Lock()
	mock.calls.UpdateUsername = append(mock.calls.UpdateUsername, callInfo)
	mock.lockUpdateUsername.Unlock()
	return mock.UpdateUsernameFunc(userID, username)
}

// UpdateUsernameCalls gets all the calls that were made to UpdateUsername.
// Check the length with:
//     len(mockedIHarmonyDB.UpdateUsernameCalls())
func (mock *IHarmonyDBMock) UpdateUsernameCalls() []struct {
	UserID   uint64
	Username string
} {
	var calls []struct {
		UserID   uint64
		Username string
	}
	mock.lockUpdateUsername.RLock()
	calls = mock.calls.UpdateUsername
	mock.lockUpdateUsername.RUnlock()
	return calls
}

// UserInGuild calls UserInGuildFunc.
func (mock *IHarmonyDBMock) UserInGuild(userID uint64, guildID uint64) (bool, error) {
	if mock.UserInGuildFunc == nil {
		panic("IHarmonyDBMock.UserInGuildFunc: method is nil but IHarmonyDB.UserInGuild was just called")
	}
	callInfo := struct {
		UserID  uint64
		GuildID uint64
	}{
		UserID:  userID,
		GuildID: guildID,
	}
	mock.lockUserInGuild.Lock()
	mock.calls.UserInGuild = append(mock.calls.UserInGuild, callInfo)
	mock.lockUserInGuild.Unlock()
	return mock.UserInGuildFunc(userID, guildID)
}

// UserInGuildCalls gets all the calls that were made to UserInGuild.
// Check the length with:
//     len(mockedIHarmonyDB.UserInGuildCalls())
func (mock *IHarmonyDBMock) UserInGuildCalls() []struct {
	UserID  uint64
	GuildID uint64
} {
	var calls []struct {
		UserID  uint64
		GuildID uint64
	}
	mock.lockUserInGuild.RLock()
	calls = mock.calls.UserInGuild
	mock.lockUserInGuild.RUnlock()
	return calls
}

// UserIsLocal calls UserIsLocalFunc.
func (mock *IHarmonyDBMock) UserIsLocal(userID uint64) error {
	if mock.UserIsLocalFunc == nil {
		panic("IHarmonyDBMock.UserIsLocalFunc: method is nil but IHarmonyDB.UserIsLocal was just called")
	}
	callInfo := struct {
		UserID uint64
	}{
		UserID: userID,
	}
	mock.lockUserIsLocal.Lock()
	mock.calls.UserIsLocal = append(mock.calls.UserIsLocal, callInfo)
	mock.lockUserIsLocal.Unlock()
	return mock.UserIsLocalFunc(userID)
}

// UserIsLocalCalls gets all the calls that were made to UserIsLocal.
// Check the length with:
//     len(mockedIHarmonyDB.UserIsLocalCalls())
func (mock *IHarmonyDBMock) UserIsLocalCalls() []struct {
	UserID uint64
} {
	var calls []struct {
		UserID uint64
	}
	mock.lockUserIsLocal.RLock()
	calls = mock.calls.UserIsLocal
	mock.lockUserIsLocal.RUnlock()
	return calls
}
