// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/guildlistentry"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// GuildListEntry is the model entity for the GuildListEntry schema.
type GuildListEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GuildID holds the value of the "guild_id" field.
	GuildID uint64 `json:"guild_id,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuildListEntryQuery when eager-loading is set.
	Edges          GuildListEntryEdges `json:"edges"`
	user_listentry *uint64
}

// GuildListEntryEdges holds the relations/edges for other nodes in the graph.
type GuildListEntryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuildListEntryEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GuildListEntry) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case guildlistentry.FieldID, guildlistentry.FieldGuildID:
			values[i] = new(sql.NullInt64)
		case guildlistentry.FieldHost, guildlistentry.FieldPosition:
			values[i] = new(sql.NullString)
		case guildlistentry.ForeignKeys[0]: // user_listentry
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GuildListEntry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GuildListEntry fields.
func (gle *GuildListEntry) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guildlistentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gle.ID = int(value.Int64)
		case guildlistentry.FieldGuildID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field guild_id", values[i])
			} else if value.Valid {
				gle.GuildID = uint64(value.Int64)
			}
		case guildlistentry.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				gle.Host = value.String
			}
		case guildlistentry.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				gle.Position = value.String
			}
		case guildlistentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_listentry", value)
			} else if value.Valid {
				gle.user_listentry = new(uint64)
				*gle.user_listentry = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the GuildListEntry entity.
func (gle *GuildListEntry) QueryUser() *UserQuery {
	return (&GuildListEntryClient{config: gle.config}).QueryUser(gle)
}

// Update returns a builder for updating this GuildListEntry.
// Note that you need to call GuildListEntry.Unwrap() before calling this method if this GuildListEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (gle *GuildListEntry) Update() *GuildListEntryUpdateOne {
	return (&GuildListEntryClient{config: gle.config}).UpdateOne(gle)
}

// Unwrap unwraps the GuildListEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gle *GuildListEntry) Unwrap() *GuildListEntry {
	tx, ok := gle.config.driver.(*txDriver)
	if !ok {
		panic("entgen: GuildListEntry is not a transactional entity")
	}
	gle.config.driver = tx.drv
	return gle
}

// String implements the fmt.Stringer.
func (gle *GuildListEntry) String() string {
	var builder strings.Builder
	builder.WriteString("GuildListEntry(")
	builder.WriteString(fmt.Sprintf("id=%v", gle.ID))
	builder.WriteString(", guild_id=")
	builder.WriteString(fmt.Sprintf("%v", gle.GuildID))
	builder.WriteString(", host=")
	builder.WriteString(gle.Host)
	builder.WriteString(", position=")
	builder.WriteString(gle.Position)
	builder.WriteByte(')')
	return builder.String()
}

// GuildListEntries is a parsable slice of GuildListEntry.
type GuildListEntries []*GuildListEntry

func (gle GuildListEntries) config(cfg config) {
	for _i := range gle {
		gle[_i].config = cfg
	}
}
