// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// EmotePackUpdate is the builder for updating EmotePack entities.
type EmotePackUpdate struct {
	config
	hooks    []Hook
	mutation *EmotePackMutation
}

// Where adds a new predicate for the EmotePackUpdate builder.
func (epu *EmotePackUpdate) Where(ps ...predicate.EmotePack) *EmotePackUpdate {
	epu.mutation.predicates = append(epu.mutation.predicates, ps...)
	return epu
}

// SetName sets the "name" field.
func (epu *EmotePackUpdate) SetName(s string) *EmotePackUpdate {
	epu.mutation.SetName(s)
	return epu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (epu *EmotePackUpdate) SetUserID(id uint64) *EmotePackUpdate {
	epu.mutation.SetUserID(id)
	return epu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (epu *EmotePackUpdate) SetNillableUserID(id *uint64) *EmotePackUpdate {
	if id != nil {
		epu = epu.SetUserID(*id)
	}
	return epu
}

// SetUser sets the "user" edge to the User entity.
func (epu *EmotePackUpdate) SetUser(u *User) *EmotePackUpdate {
	return epu.SetUserID(u.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (epu *EmotePackUpdate) SetOwnerID(id uint64) *EmotePackUpdate {
	epu.mutation.SetOwnerID(id)
	return epu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (epu *EmotePackUpdate) SetNillableOwnerID(id *uint64) *EmotePackUpdate {
	if id != nil {
		epu = epu.SetOwnerID(*id)
	}
	return epu
}

// SetOwner sets the "owner" edge to the User entity.
func (epu *EmotePackUpdate) SetOwner(u *User) *EmotePackUpdate {
	return epu.SetOwnerID(u.ID)
}

// AddEmoteIDs adds the "emote" edge to the Emote entity by IDs.
func (epu *EmotePackUpdate) AddEmoteIDs(ids ...string) *EmotePackUpdate {
	epu.mutation.AddEmoteIDs(ids...)
	return epu
}

// AddEmote adds the "emote" edges to the Emote entity.
func (epu *EmotePackUpdate) AddEmote(e ...*Emote) *EmotePackUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddEmoteIDs(ids...)
}

// Mutation returns the EmotePackMutation object of the builder.
func (epu *EmotePackUpdate) Mutation() *EmotePackMutation {
	return epu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (epu *EmotePackUpdate) ClearUser() *EmotePackUpdate {
	epu.mutation.ClearUser()
	return epu
}

// ClearOwner clears the "owner" edge to the User entity.
func (epu *EmotePackUpdate) ClearOwner() *EmotePackUpdate {
	epu.mutation.ClearOwner()
	return epu
}

// ClearEmote clears all "emote" edges to the Emote entity.
func (epu *EmotePackUpdate) ClearEmote() *EmotePackUpdate {
	epu.mutation.ClearEmote()
	return epu
}

// RemoveEmoteIDs removes the "emote" edge to Emote entities by IDs.
func (epu *EmotePackUpdate) RemoveEmoteIDs(ids ...string) *EmotePackUpdate {
	epu.mutation.RemoveEmoteIDs(ids...)
	return epu
}

// RemoveEmote removes "emote" edges to Emote entities.
func (epu *EmotePackUpdate) RemoveEmote(e ...*Emote) *EmotePackUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveEmoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EmotePackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(epu.hooks) == 0 {
		affected, err = epu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmotePackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			epu.mutation = mutation
			affected, err = epu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(epu.hooks) - 1; i >= 0; i-- {
			mut = epu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, epu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EmotePackUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EmotePackUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EmotePackUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epu *EmotePackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emotepack.Table,
			Columns: emotepack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emotepack.FieldID,
			},
		},
	}
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emotepack.FieldName,
		})
	}
	if epu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.UserTable,
			Columns: []string{emotepack.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.UserTable,
			Columns: []string{emotepack.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.OwnerTable,
			Columns: []string{emotepack.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.OwnerTable,
			Columns: []string{emotepack.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.EmoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedEmoteIDs(); len(nodes) > 0 && !epu.mutation.EmoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EmoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emotepack.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmotePackUpdateOne is the builder for updating a single EmotePack entity.
type EmotePackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmotePackMutation
}

// SetName sets the "name" field.
func (epuo *EmotePackUpdateOne) SetName(s string) *EmotePackUpdateOne {
	epuo.mutation.SetName(s)
	return epuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (epuo *EmotePackUpdateOne) SetUserID(id uint64) *EmotePackUpdateOne {
	epuo.mutation.SetUserID(id)
	return epuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (epuo *EmotePackUpdateOne) SetNillableUserID(id *uint64) *EmotePackUpdateOne {
	if id != nil {
		epuo = epuo.SetUserID(*id)
	}
	return epuo
}

// SetUser sets the "user" edge to the User entity.
func (epuo *EmotePackUpdateOne) SetUser(u *User) *EmotePackUpdateOne {
	return epuo.SetUserID(u.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (epuo *EmotePackUpdateOne) SetOwnerID(id uint64) *EmotePackUpdateOne {
	epuo.mutation.SetOwnerID(id)
	return epuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (epuo *EmotePackUpdateOne) SetNillableOwnerID(id *uint64) *EmotePackUpdateOne {
	if id != nil {
		epuo = epuo.SetOwnerID(*id)
	}
	return epuo
}

// SetOwner sets the "owner" edge to the User entity.
func (epuo *EmotePackUpdateOne) SetOwner(u *User) *EmotePackUpdateOne {
	return epuo.SetOwnerID(u.ID)
}

// AddEmoteIDs adds the "emote" edge to the Emote entity by IDs.
func (epuo *EmotePackUpdateOne) AddEmoteIDs(ids ...string) *EmotePackUpdateOne {
	epuo.mutation.AddEmoteIDs(ids...)
	return epuo
}

// AddEmote adds the "emote" edges to the Emote entity.
func (epuo *EmotePackUpdateOne) AddEmote(e ...*Emote) *EmotePackUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddEmoteIDs(ids...)
}

// Mutation returns the EmotePackMutation object of the builder.
func (epuo *EmotePackUpdateOne) Mutation() *EmotePackMutation {
	return epuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (epuo *EmotePackUpdateOne) ClearUser() *EmotePackUpdateOne {
	epuo.mutation.ClearUser()
	return epuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (epuo *EmotePackUpdateOne) ClearOwner() *EmotePackUpdateOne {
	epuo.mutation.ClearOwner()
	return epuo
}

// ClearEmote clears all "emote" edges to the Emote entity.
func (epuo *EmotePackUpdateOne) ClearEmote() *EmotePackUpdateOne {
	epuo.mutation.ClearEmote()
	return epuo
}

// RemoveEmoteIDs removes the "emote" edge to Emote entities by IDs.
func (epuo *EmotePackUpdateOne) RemoveEmoteIDs(ids ...string) *EmotePackUpdateOne {
	epuo.mutation.RemoveEmoteIDs(ids...)
	return epuo
}

// RemoveEmote removes "emote" edges to Emote entities.
func (epuo *EmotePackUpdateOne) RemoveEmote(e ...*Emote) *EmotePackUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveEmoteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EmotePackUpdateOne) Select(field string, fields ...string) *EmotePackUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EmotePack entity.
func (epuo *EmotePackUpdateOne) Save(ctx context.Context) (*EmotePack, error) {
	var (
		err  error
		node *EmotePack
	)
	if len(epuo.hooks) == 0 {
		node, err = epuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmotePackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			epuo.mutation = mutation
			node, err = epuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(epuo.hooks) - 1; i >= 0; i-- {
			mut = epuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, epuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EmotePackUpdateOne) SaveX(ctx context.Context) *EmotePack {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EmotePackUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EmotePackUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epuo *EmotePackUpdateOne) sqlSave(ctx context.Context) (_node *EmotePack, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emotepack.Table,
			Columns: emotepack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emotepack.FieldID,
			},
		},
	}
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EmotePack.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emotepack.FieldID)
		for _, f := range fields {
			if !emotepack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != emotepack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emotepack.FieldName,
		})
	}
	if epuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.UserTable,
			Columns: []string{emotepack.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.UserTable,
			Columns: []string{emotepack.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.OwnerTable,
			Columns: []string{emotepack.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emotepack.OwnerTable,
			Columns: []string{emotepack.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.EmoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedEmoteIDs(); len(nodes) > 0 && !epuo.mutation.EmoteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EmoteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   emotepack.EmoteTable,
			Columns: []string{emotepack.EmoteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: emote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmotePack{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emotepack.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
