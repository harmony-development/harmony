// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	v1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind uint64 `json:"kind,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata *v1.Metadata `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges         ChannelEdges `json:"edges"`
	guild_channel *uint64
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// Guild holds the value of the guild edge.
	Guild *Guild `json:"guild,omitempty"`
	// Message holds the value of the message edge.
	Message []*Message `json:"message,omitempty"`
	// Role holds the value of the role edge.
	Role []*Role `json:"role,omitempty"`
	// PermissionNode holds the value of the permission_node edge.
	PermissionNode []*PermissionNode `json:"permission_node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChannelEdges) GuildOrErr() (*Guild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// The edge guild was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: guild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) MessageOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) RoleOrErr() ([]*Role, error) {
	if e.loadedTypes[2] {
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// PermissionNodeOrErr returns the PermissionNode value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) PermissionNodeOrErr() ([]*PermissionNode, error) {
	if e.loadedTypes[3] {
		return e.PermissionNode, nil
	}
	return nil, &NotLoadedError{edge: "permission_node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldMetadata:
			values[i] = new([]byte)
		case channel.FieldID, channel.FieldKind:
			values[i] = new(sql.NullInt64)
		case channel.FieldName, channel.FieldPosition:
			values[i] = new(sql.NullString)
		case channel.ForeignKeys[0]: // guild_channel
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Channel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case channel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case channel.FieldKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				c.Kind = uint64(value.Int64)
			}
		case channel.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				c.Position = value.String
			}
		case channel.FieldMetadata:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case channel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field guild_channel", value)
			} else if value.Valid {
				c.guild_channel = new(uint64)
				*c.guild_channel = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryGuild queries the "guild" edge of the Channel entity.
func (c *Channel) QueryGuild() *GuildQuery {
	return (&ChannelClient{config: c.config}).QueryGuild(c)
}

// QueryMessage queries the "message" edge of the Channel entity.
func (c *Channel) QueryMessage() *MessageQuery {
	return (&ChannelClient{config: c.config}).QueryMessage(c)
}

// QueryRole queries the "role" edge of the Channel entity.
func (c *Channel) QueryRole() *RoleQuery {
	return (&ChannelClient{config: c.config}).QueryRole(c)
}

// QueryPermissionNode queries the "permission_node" edge of the Channel entity.
func (c *Channel) QueryPermissionNode() *PermissionNodeQuery {
	return (&ChannelClient{config: c.config}).QueryPermissionNode(c)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return (&ChannelClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Channel is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", kind=")
	builder.WriteString(fmt.Sprintf("%v", c.Kind))
	builder.WriteString(", position=")
	builder.WriteString(c.Position)
	builder.WriteString(", metadata=")
	builder.WriteString(fmt.Sprintf("%v", c.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// Channels is a parsable slice of Channel.
type Channels []*Channel

func (c Channels) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
