// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/actionbutton"
	"github.com/harmony-development/legato/server/db/ent/entgen/actiondropdown"
	"github.com/harmony-development/legato/server/db/ent/entgen/actioninput"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedaction"
)

// EmbedAction is the model entity for the EmbedAction schema.
type EmbedAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ActionID holds the value of the "action_id" field.
	ActionID string `json:"action_id,omitempty"`
	// ActionType holds the value of the "action_type" field.
	ActionType int8 `json:"action_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmbedActionQuery when eager-loading is set.
	Edges                    EmbedActionEdges `json:"edges"`
	embed_action_button      *int
	embed_action_dropdown    *int
	embed_action_input       *int
	embed_field_embed_action *int
}

// EmbedActionEdges holds the relations/edges for other nodes in the graph.
type EmbedActionEdges struct {
	// Button holds the value of the button edge.
	Button *ActionButton `json:"button,omitempty"`
	// Dropdown holds the value of the dropdown edge.
	Dropdown *ActionDropdown `json:"dropdown,omitempty"`
	// Input holds the value of the input edge.
	Input *ActionInput `json:"input,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ButtonOrErr returns the Button value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmbedActionEdges) ButtonOrErr() (*ActionButton, error) {
	if e.loadedTypes[0] {
		if e.Button == nil {
			// The edge button was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: actionbutton.Label}
		}
		return e.Button, nil
	}
	return nil, &NotLoadedError{edge: "button"}
}

// DropdownOrErr returns the Dropdown value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmbedActionEdges) DropdownOrErr() (*ActionDropdown, error) {
	if e.loadedTypes[1] {
		if e.Dropdown == nil {
			// The edge dropdown was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: actiondropdown.Label}
		}
		return e.Dropdown, nil
	}
	return nil, &NotLoadedError{edge: "dropdown"}
}

// InputOrErr returns the Input value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmbedActionEdges) InputOrErr() (*ActionInput, error) {
	if e.loadedTypes[2] {
		if e.Input == nil {
			// The edge input was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: actioninput.Label}
		}
		return e.Input, nil
	}
	return nil, &NotLoadedError{edge: "input"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmbedAction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case embedaction.FieldID, embedaction.FieldActionType:
			values[i] = &sql.NullInt64{}
		case embedaction.FieldActionID:
			values[i] = &sql.NullString{}
		case embedaction.ForeignKeys[0]: // embed_action_button
			values[i] = &sql.NullInt64{}
		case embedaction.ForeignKeys[1]: // embed_action_dropdown
			values[i] = &sql.NullInt64{}
		case embedaction.ForeignKeys[2]: // embed_action_input
			values[i] = &sql.NullInt64{}
		case embedaction.ForeignKeys[3]: // embed_field_embed_action
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmbedAction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmbedAction fields.
func (ea *EmbedAction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case embedaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case embedaction.FieldActionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_id", values[i])
			} else if value.Valid {
				ea.ActionID = value.String
			}
		case embedaction.FieldActionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field action_type", values[i])
			} else if value.Valid {
				ea.ActionType = int8(value.Int64)
			}
		case embedaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field embed_action_button", value)
			} else if value.Valid {
				ea.embed_action_button = new(int)
				*ea.embed_action_button = int(value.Int64)
			}
		case embedaction.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field embed_action_dropdown", value)
			} else if value.Valid {
				ea.embed_action_dropdown = new(int)
				*ea.embed_action_dropdown = int(value.Int64)
			}
		case embedaction.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field embed_action_input", value)
			} else if value.Valid {
				ea.embed_action_input = new(int)
				*ea.embed_action_input = int(value.Int64)
			}
		case embedaction.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field embed_field_embed_action", value)
			} else if value.Valid {
				ea.embed_field_embed_action = new(int)
				*ea.embed_field_embed_action = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryButton queries the "button" edge of the EmbedAction entity.
func (ea *EmbedAction) QueryButton() *ActionButtonQuery {
	return (&EmbedActionClient{config: ea.config}).QueryButton(ea)
}

// QueryDropdown queries the "dropdown" edge of the EmbedAction entity.
func (ea *EmbedAction) QueryDropdown() *ActionDropdownQuery {
	return (&EmbedActionClient{config: ea.config}).QueryDropdown(ea)
}

// QueryInput queries the "input" edge of the EmbedAction entity.
func (ea *EmbedAction) QueryInput() *ActionInputQuery {
	return (&EmbedActionClient{config: ea.config}).QueryInput(ea)
}

// Update returns a builder for updating this EmbedAction.
// Note that you need to call EmbedAction.Unwrap() before calling this method if this EmbedAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EmbedAction) Update() *EmbedActionUpdateOne {
	return (&EmbedActionClient{config: ea.config}).UpdateOne(ea)
}

// Unwrap unwraps the EmbedAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EmbedAction) Unwrap() *EmbedAction {
	tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("entgen: EmbedAction is not a transactional entity")
	}
	ea.config.driver = tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EmbedAction) String() string {
	var builder strings.Builder
	builder.WriteString("EmbedAction(")
	builder.WriteString(fmt.Sprintf("id=%v", ea.ID))
	builder.WriteString(", action_id=")
	builder.WriteString(ea.ActionID)
	builder.WriteString(", action_type=")
	builder.WriteString(fmt.Sprintf("%v", ea.ActionType))
	builder.WriteByte(')')
	return builder.String()
}

// EmbedActions is a parsable slice of EmbedAction.
type EmbedActions []*EmbedAction

func (ea EmbedActions) config(cfg config) {
	for _i := range ea {
		ea[_i].config = cfg
	}
}
