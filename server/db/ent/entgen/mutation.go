// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"
	"sync"
	"time"

	v1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	"github.com/harmony-development/legato/server/db/ent/entgen/actionbutton"
	"github.com/harmony-development/legato/server/db/ent/entgen/actiondropdown"
	"github.com/harmony-development/legato/server/db/ent/entgen/actioninput"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedaction"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/file"
	"github.com/harmony-development/legato/server/db/ent/entgen/filehash"
	"github.com/harmony-development/legato/server/db/ent/entgen/foreignuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/guildlistentry"
	"github.com/harmony-development/legato/server/db/ent/entgen/invite"
	"github.com/harmony-development/legato/server/db/ent/entgen/localuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/permissionnode"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/profile"
	"github.com/harmony-development/legato/server/db/ent/entgen/role"
	"github.com/harmony-development/legato/server/db/ent/entgen/session"
	"github.com/harmony-development/legato/server/db/ent/entgen/textmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
	"github.com/harmony-development/legato/server/db/ent/entgen/usermeta"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActionButton   = "ActionButton"
	TypeActionDropdown = "ActionDropdown"
	TypeActionInput    = "ActionInput"
	TypeChannel        = "Channel"
	TypeEmbedAction    = "EmbedAction"
	TypeEmbedField     = "EmbedField"
	TypeEmbedMessage   = "EmbedMessage"
	TypeEmote          = "Emote"
	TypeEmotePack      = "EmotePack"
	TypeFile           = "File"
	TypeFileHash       = "FileHash"
	TypeFileMessage    = "FileMessage"
	TypeForeignUser    = "ForeignUser"
	TypeGuild          = "Guild"
	TypeGuildListEntry = "GuildListEntry"
	TypeInvite         = "Invite"
	TypeLocalUser      = "LocalUser"
	TypeMessage        = "Message"
	TypePermissionNode = "PermissionNode"
	TypeProfile        = "Profile"
	TypeRole           = "Role"
	TypeSession        = "Session"
	TypeTextMessage    = "TextMessage"
	TypeUser           = "User"
	TypeUserMeta       = "UserMeta"
)

// ActionButtonMutation represents an operation that mutates the ActionButton nodes in the graph.
type ActionButtonMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	url           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ActionButton, error)
	predicates    []predicate.ActionButton
}

var _ ent.Mutation = (*ActionButtonMutation)(nil)

// actionbuttonOption allows management of the mutation configuration using functional options.
type actionbuttonOption func(*ActionButtonMutation)

// newActionButtonMutation creates new mutation for the ActionButton entity.
func newActionButtonMutation(c config, op Op, opts ...actionbuttonOption) *ActionButtonMutation {
	m := &ActionButtonMutation{
		config:        c,
		op:            op,
		typ:           TypeActionButton,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionButtonID sets the ID field of the mutation.
func withActionButtonID(id int) actionbuttonOption {
	return func(m *ActionButtonMutation) {
		var (
			err   error
			once  sync.Once
			value *ActionButton
		)
		m.oldValue = func(ctx context.Context) (*ActionButton, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActionButton.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActionButton sets the old ActionButton of the mutation.
func withActionButton(node *ActionButton) actionbuttonOption {
	return func(m *ActionButtonMutation) {
		m.oldValue = func(context.Context) (*ActionButton, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionButtonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionButtonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ActionButtonMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetText sets the "text" field.
func (m *ActionButtonMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ActionButtonMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the ActionButton entity.
// If the ActionButton object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionButtonMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ActionButtonMutation) ResetText() {
	m.text = nil
}

// SetURL sets the "url" field.
func (m *ActionButtonMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *ActionButtonMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the ActionButton entity.
// If the ActionButton object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionButtonMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *ActionButtonMutation) ResetURL() {
	m.url = nil
}

// Op returns the operation name.
func (m *ActionButtonMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ActionButton).
func (m *ActionButtonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActionButtonMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.text != nil {
		fields = append(fields, actionbutton.FieldText)
	}
	if m.url != nil {
		fields = append(fields, actionbutton.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActionButtonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actionbutton.FieldText:
		return m.Text()
	case actionbutton.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActionButtonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actionbutton.FieldText:
		return m.OldText(ctx)
	case actionbutton.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown ActionButton field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionButtonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actionbutton.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case actionbutton.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown ActionButton field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActionButtonMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActionButtonMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionButtonMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ActionButton numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActionButtonMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActionButtonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionButtonMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActionButton nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActionButtonMutation) ResetField(name string) error {
	switch name {
	case actionbutton.FieldText:
		m.ResetText()
		return nil
	case actionbutton.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown ActionButton field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActionButtonMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActionButtonMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActionButtonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActionButtonMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActionButtonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActionButtonMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActionButtonMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ActionButton unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActionButtonMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ActionButton edge %s", name)
}

// ActionDropdownMutation represents an operation that mutates the ActionDropdown nodes in the graph.
type ActionDropdownMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	options       *[]string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ActionDropdown, error)
	predicates    []predicate.ActionDropdown
}

var _ ent.Mutation = (*ActionDropdownMutation)(nil)

// actiondropdownOption allows management of the mutation configuration using functional options.
type actiondropdownOption func(*ActionDropdownMutation)

// newActionDropdownMutation creates new mutation for the ActionDropdown entity.
func newActionDropdownMutation(c config, op Op, opts ...actiondropdownOption) *ActionDropdownMutation {
	m := &ActionDropdownMutation{
		config:        c,
		op:            op,
		typ:           TypeActionDropdown,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionDropdownID sets the ID field of the mutation.
func withActionDropdownID(id int) actiondropdownOption {
	return func(m *ActionDropdownMutation) {
		var (
			err   error
			once  sync.Once
			value *ActionDropdown
		)
		m.oldValue = func(ctx context.Context) (*ActionDropdown, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActionDropdown.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActionDropdown sets the old ActionDropdown of the mutation.
func withActionDropdown(node *ActionDropdown) actiondropdownOption {
	return func(m *ActionDropdownMutation) {
		m.oldValue = func(context.Context) (*ActionDropdown, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionDropdownMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionDropdownMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ActionDropdownMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetText sets the "text" field.
func (m *ActionDropdownMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ActionDropdownMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the ActionDropdown entity.
// If the ActionDropdown object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionDropdownMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ActionDropdownMutation) ResetText() {
	m.text = nil
}

// SetOptions sets the "options" field.
func (m *ActionDropdownMutation) SetOptions(s []string) {
	m.options = &s
}

// Options returns the value of the "options" field in the mutation.
func (m *ActionDropdownMutation) Options() (r []string, exists bool) {
	v := m.options
	if v == nil {
		return
	}
	return *v, true
}

// OldOptions returns the old "options" field's value of the ActionDropdown entity.
// If the ActionDropdown object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionDropdownMutation) OldOptions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptions: %w", err)
	}
	return oldValue.Options, nil
}

// ResetOptions resets all changes to the "options" field.
func (m *ActionDropdownMutation) ResetOptions() {
	m.options = nil
}

// Op returns the operation name.
func (m *ActionDropdownMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ActionDropdown).
func (m *ActionDropdownMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActionDropdownMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.text != nil {
		fields = append(fields, actiondropdown.FieldText)
	}
	if m.options != nil {
		fields = append(fields, actiondropdown.FieldOptions)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActionDropdownMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actiondropdown.FieldText:
		return m.Text()
	case actiondropdown.FieldOptions:
		return m.Options()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActionDropdownMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actiondropdown.FieldText:
		return m.OldText(ctx)
	case actiondropdown.FieldOptions:
		return m.OldOptions(ctx)
	}
	return nil, fmt.Errorf("unknown ActionDropdown field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionDropdownMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actiondropdown.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case actiondropdown.FieldOptions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptions(v)
		return nil
	}
	return fmt.Errorf("unknown ActionDropdown field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActionDropdownMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActionDropdownMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionDropdownMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ActionDropdown numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActionDropdownMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActionDropdownMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionDropdownMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActionDropdown nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActionDropdownMutation) ResetField(name string) error {
	switch name {
	case actiondropdown.FieldText:
		m.ResetText()
		return nil
	case actiondropdown.FieldOptions:
		m.ResetOptions()
		return nil
	}
	return fmt.Errorf("unknown ActionDropdown field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActionDropdownMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActionDropdownMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActionDropdownMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActionDropdownMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActionDropdownMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActionDropdownMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActionDropdownMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ActionDropdown unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActionDropdownMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ActionDropdown edge %s", name)
}

// ActionInputMutation represents an operation that mutates the ActionInput nodes in the graph.
type ActionInputMutation struct {
	config
	op            Op
	typ           string
	id            *int
	label         *string
	wide          *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ActionInput, error)
	predicates    []predicate.ActionInput
}

var _ ent.Mutation = (*ActionInputMutation)(nil)

// actioninputOption allows management of the mutation configuration using functional options.
type actioninputOption func(*ActionInputMutation)

// newActionInputMutation creates new mutation for the ActionInput entity.
func newActionInputMutation(c config, op Op, opts ...actioninputOption) *ActionInputMutation {
	m := &ActionInputMutation{
		config:        c,
		op:            op,
		typ:           TypeActionInput,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionInputID sets the ID field of the mutation.
func withActionInputID(id int) actioninputOption {
	return func(m *ActionInputMutation) {
		var (
			err   error
			once  sync.Once
			value *ActionInput
		)
		m.oldValue = func(ctx context.Context) (*ActionInput, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActionInput.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActionInput sets the old ActionInput of the mutation.
func withActionInput(node *ActionInput) actioninputOption {
	return func(m *ActionInputMutation) {
		m.oldValue = func(context.Context) (*ActionInput, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionInputMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionInputMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ActionInputMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLabel sets the "label" field.
func (m *ActionInputMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *ActionInputMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the ActionInput entity.
// If the ActionInput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionInputMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *ActionInputMutation) ResetLabel() {
	m.label = nil
}

// SetWide sets the "wide" field.
func (m *ActionInputMutation) SetWide(b bool) {
	m.wide = &b
}

// Wide returns the value of the "wide" field in the mutation.
func (m *ActionInputMutation) Wide() (r bool, exists bool) {
	v := m.wide
	if v == nil {
		return
	}
	return *v, true
}

// OldWide returns the old "wide" field's value of the ActionInput entity.
// If the ActionInput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionInputMutation) OldWide(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWide is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWide requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWide: %w", err)
	}
	return oldValue.Wide, nil
}

// ResetWide resets all changes to the "wide" field.
func (m *ActionInputMutation) ResetWide() {
	m.wide = nil
}

// Op returns the operation name.
func (m *ActionInputMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ActionInput).
func (m *ActionInputMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActionInputMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.label != nil {
		fields = append(fields, actioninput.FieldLabel)
	}
	if m.wide != nil {
		fields = append(fields, actioninput.FieldWide)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActionInputMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actioninput.FieldLabel:
		return m.Label()
	case actioninput.FieldWide:
		return m.Wide()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActionInputMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actioninput.FieldLabel:
		return m.OldLabel(ctx)
	case actioninput.FieldWide:
		return m.OldWide(ctx)
	}
	return nil, fmt.Errorf("unknown ActionInput field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionInputMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actioninput.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case actioninput.FieldWide:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWide(v)
		return nil
	}
	return fmt.Errorf("unknown ActionInput field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActionInputMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActionInputMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionInputMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ActionInput numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActionInputMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActionInputMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionInputMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActionInput nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActionInputMutation) ResetField(name string) error {
	switch name {
	case actioninput.FieldLabel:
		m.ResetLabel()
		return nil
	case actioninput.FieldWide:
		m.ResetWide()
		return nil
	}
	return fmt.Errorf("unknown ActionInput field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActionInputMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActionInputMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActionInputMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActionInputMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActionInputMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActionInputMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActionInputMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ActionInput unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActionInputMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ActionInput edge %s", name)
}

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	name                   *string
	kind                   *uint64
	addkind                *uint64
	position               *string
	metadata               *[]byte
	clearedFields          map[string]struct{}
	guild                  *uint64
	clearedguild           bool
	message                map[uint64]struct{}
	removedmessage         map[uint64]struct{}
	clearedmessage         bool
	role                   map[uint64]struct{}
	removedrole            map[uint64]struct{}
	clearedrole            bool
	permission_node        map[int]struct{}
	removedpermission_node map[int]struct{}
	clearedpermission_node bool
	done                   bool
	oldValue               func(context.Context) (*Channel, error)
	predicates             []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id uint64) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChannelMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChannelMutation) ResetName() {
	m.name = nil
}

// SetKind sets the "kind" field.
func (m *ChannelMutation) SetKind(u uint64) {
	m.kind = &u
	m.addkind = nil
}

// Kind returns the value of the "kind" field in the mutation.
func (m *ChannelMutation) Kind() (r uint64, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldKind(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// AddKind adds u to the "kind" field.
func (m *ChannelMutation) AddKind(u uint64) {
	if m.addkind != nil {
		*m.addkind += u
	} else {
		m.addkind = &u
	}
}

// AddedKind returns the value that was added to the "kind" field in this mutation.
func (m *ChannelMutation) AddedKind() (r uint64, exists bool) {
	v := m.addkind
	if v == nil {
		return
	}
	return *v, true
}

// ResetKind resets all changes to the "kind" field.
func (m *ChannelMutation) ResetKind() {
	m.kind = nil
	m.addkind = nil
}

// SetPosition sets the "position" field.
func (m *ChannelMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *ChannelMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *ChannelMutation) ResetPosition() {
	m.position = nil
}

// SetMetadata sets the "metadata" field.
func (m *ChannelMutation) SetMetadata(b []byte) {
	m.metadata = &b
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *ChannelMutation) Metadata() (r []byte, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldMetadata(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *ChannelMutation) ResetMetadata() {
	m.metadata = nil
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *ChannelMutation) SetGuildID(id uint64) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *ChannelMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *ChannelMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *ChannelMutation) GuildID() (id uint64, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *ChannelMutation) GuildIDs() (ids []uint64) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *ChannelMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// AddMessageIDs adds the "message" edge to the Message entity by ids.
func (m *ChannelMutation) AddMessageIDs(ids ...uint64) {
	if m.message == nil {
		m.message = make(map[uint64]struct{})
	}
	for i := range ids {
		m.message[ids[i]] = struct{}{}
	}
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *ChannelMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *ChannelMutation) MessageCleared() bool {
	return m.clearedmessage
}

// RemoveMessageIDs removes the "message" edge to the Message entity by IDs.
func (m *ChannelMutation) RemoveMessageIDs(ids ...uint64) {
	if m.removedmessage == nil {
		m.removedmessage = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedmessage[ids[i]] = struct{}{}
	}
}

// RemovedMessage returns the removed IDs of the "message" edge to the Message entity.
func (m *ChannelMutation) RemovedMessageIDs() (ids []uint64) {
	for id := range m.removedmessage {
		ids = append(ids, id)
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
func (m *ChannelMutation) MessageIDs() (ids []uint64) {
	for id := range m.message {
		ids = append(ids, id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *ChannelMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
	m.removedmessage = nil
}

// AddRoleIDs adds the "role" edge to the Role entity by ids.
func (m *ChannelMutation) AddRoleIDs(ids ...uint64) {
	if m.role == nil {
		m.role = make(map[uint64]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the Role entity.
func (m *ChannelMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the "role" edge to the Role entity was cleared.
func (m *ChannelMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the Role entity by IDs.
func (m *ChannelMutation) RemoveRoleIDs(ids ...uint64) {
	if m.removedrole == nil {
		m.removedrole = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the Role entity.
func (m *ChannelMutation) RemovedRoleIDs() (ids []uint64) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *ChannelMutation) RoleIDs() (ids []uint64) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *ChannelMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// AddPermissionNodeIDs adds the "permission_node" edge to the PermissionNode entity by ids.
func (m *ChannelMutation) AddPermissionNodeIDs(ids ...int) {
	if m.permission_node == nil {
		m.permission_node = make(map[int]struct{})
	}
	for i := range ids {
		m.permission_node[ids[i]] = struct{}{}
	}
}

// ClearPermissionNode clears the "permission_node" edge to the PermissionNode entity.
func (m *ChannelMutation) ClearPermissionNode() {
	m.clearedpermission_node = true
}

// PermissionNodeCleared returns if the "permission_node" edge to the PermissionNode entity was cleared.
func (m *ChannelMutation) PermissionNodeCleared() bool {
	return m.clearedpermission_node
}

// RemovePermissionNodeIDs removes the "permission_node" edge to the PermissionNode entity by IDs.
func (m *ChannelMutation) RemovePermissionNodeIDs(ids ...int) {
	if m.removedpermission_node == nil {
		m.removedpermission_node = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpermission_node[ids[i]] = struct{}{}
	}
}

// RemovedPermissionNode returns the removed IDs of the "permission_node" edge to the PermissionNode entity.
func (m *ChannelMutation) RemovedPermissionNodeIDs() (ids []int) {
	for id := range m.removedpermission_node {
		ids = append(ids, id)
	}
	return
}

// PermissionNodeIDs returns the "permission_node" edge IDs in the mutation.
func (m *ChannelMutation) PermissionNodeIDs() (ids []int) {
	for id := range m.permission_node {
		ids = append(ids, id)
	}
	return
}

// ResetPermissionNode resets all changes to the "permission_node" edge.
func (m *ChannelMutation) ResetPermissionNode() {
	m.permission_node = nil
	m.clearedpermission_node = false
	m.removedpermission_node = nil
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, channel.FieldName)
	}
	if m.kind != nil {
		fields = append(fields, channel.FieldKind)
	}
	if m.position != nil {
		fields = append(fields, channel.FieldPosition)
	}
	if m.metadata != nil {
		fields = append(fields, channel.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldName:
		return m.Name()
	case channel.FieldKind:
		return m.Kind()
	case channel.FieldPosition:
		return m.Position()
	case channel.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldName:
		return m.OldName(ctx)
	case channel.FieldKind:
		return m.OldKind(ctx)
	case channel.FieldPosition:
		return m.OldPosition(ctx)
	case channel.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case channel.FieldKind:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case channel.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case channel.FieldMetadata:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	var fields []string
	if m.addkind != nil {
		fields = append(fields, channel.FieldKind)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldKind:
		return m.AddedKind()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case channel.FieldKind:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKind(v)
		return nil
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldName:
		m.ResetName()
		return nil
	case channel.FieldKind:
		m.ResetKind()
		return nil
	case channel.FieldPosition:
		m.ResetPosition()
		return nil
	case channel.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.guild != nil {
		edges = append(edges, channel.EdgeGuild)
	}
	if m.message != nil {
		edges = append(edges, channel.EdgeMessage)
	}
	if m.role != nil {
		edges = append(edges, channel.EdgeRole)
	}
	if m.permission_node != nil {
		edges = append(edges, channel.EdgePermissionNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	case channel.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.message))
		for id := range m.message {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgePermissionNode:
		ids := make([]ent.Value, 0, len(m.permission_node))
		for id := range m.permission_node {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedmessage != nil {
		edges = append(edges, channel.EdgeMessage)
	}
	if m.removedrole != nil {
		edges = append(edges, channel.EdgeRole)
	}
	if m.removedpermission_node != nil {
		edges = append(edges, channel.EdgePermissionNode)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.removedmessage))
		for id := range m.removedmessage {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgePermissionNode:
		ids := make([]ent.Value, 0, len(m.removedpermission_node))
		for id := range m.removedpermission_node {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedguild {
		edges = append(edges, channel.EdgeGuild)
	}
	if m.clearedmessage {
		edges = append(edges, channel.EdgeMessage)
	}
	if m.clearedrole {
		edges = append(edges, channel.EdgeRole)
	}
	if m.clearedpermission_node {
		edges = append(edges, channel.EdgePermissionNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeGuild:
		return m.clearedguild
	case channel.EdgeMessage:
		return m.clearedmessage
	case channel.EdgeRole:
		return m.clearedrole
	case channel.EdgePermissionNode:
		return m.clearedpermission_node
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	case channel.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeGuild:
		m.ResetGuild()
		return nil
	case channel.EdgeMessage:
		m.ResetMessage()
		return nil
	case channel.EdgeRole:
		m.ResetRole()
		return nil
	case channel.EdgePermissionNode:
		m.ResetPermissionNode()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// EmbedActionMutation represents an operation that mutates the EmbedAction nodes in the graph.
type EmbedActionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	action_id       *string
	action_type     *int8
	addaction_type  *int8
	clearedFields   map[string]struct{}
	button          *int
	clearedbutton   bool
	dropdown        *int
	cleareddropdown bool
	input           *int
	clearedinput    bool
	done            bool
	oldValue        func(context.Context) (*EmbedAction, error)
	predicates      []predicate.EmbedAction
}

var _ ent.Mutation = (*EmbedActionMutation)(nil)

// embedactionOption allows management of the mutation configuration using functional options.
type embedactionOption func(*EmbedActionMutation)

// newEmbedActionMutation creates new mutation for the EmbedAction entity.
func newEmbedActionMutation(c config, op Op, opts ...embedactionOption) *EmbedActionMutation {
	m := &EmbedActionMutation{
		config:        c,
		op:            op,
		typ:           TypeEmbedAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmbedActionID sets the ID field of the mutation.
func withEmbedActionID(id int) embedactionOption {
	return func(m *EmbedActionMutation) {
		var (
			err   error
			once  sync.Once
			value *EmbedAction
		)
		m.oldValue = func(ctx context.Context) (*EmbedAction, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmbedAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmbedAction sets the old EmbedAction of the mutation.
func withEmbedAction(node *EmbedAction) embedactionOption {
	return func(m *EmbedActionMutation) {
		m.oldValue = func(context.Context) (*EmbedAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmbedActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmbedActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmbedActionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetActionID sets the "action_id" field.
func (m *EmbedActionMutation) SetActionID(s string) {
	m.action_id = &s
}

// ActionID returns the value of the "action_id" field in the mutation.
func (m *EmbedActionMutation) ActionID() (r string, exists bool) {
	v := m.action_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActionID returns the old "action_id" field's value of the EmbedAction entity.
// If the EmbedAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedActionMutation) OldActionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionID: %w", err)
	}
	return oldValue.ActionID, nil
}

// ResetActionID resets all changes to the "action_id" field.
func (m *EmbedActionMutation) ResetActionID() {
	m.action_id = nil
}

// SetActionType sets the "action_type" field.
func (m *EmbedActionMutation) SetActionType(i int8) {
	m.action_type = &i
	m.addaction_type = nil
}

// ActionType returns the value of the "action_type" field in the mutation.
func (m *EmbedActionMutation) ActionType() (r int8, exists bool) {
	v := m.action_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActionType returns the old "action_type" field's value of the EmbedAction entity.
// If the EmbedAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedActionMutation) OldActionType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionType: %w", err)
	}
	return oldValue.ActionType, nil
}

// AddActionType adds i to the "action_type" field.
func (m *EmbedActionMutation) AddActionType(i int8) {
	if m.addaction_type != nil {
		*m.addaction_type += i
	} else {
		m.addaction_type = &i
	}
}

// AddedActionType returns the value that was added to the "action_type" field in this mutation.
func (m *EmbedActionMutation) AddedActionType() (r int8, exists bool) {
	v := m.addaction_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetActionType resets all changes to the "action_type" field.
func (m *EmbedActionMutation) ResetActionType() {
	m.action_type = nil
	m.addaction_type = nil
}

// SetButtonID sets the "button" edge to the ActionButton entity by id.
func (m *EmbedActionMutation) SetButtonID(id int) {
	m.button = &id
}

// ClearButton clears the "button" edge to the ActionButton entity.
func (m *EmbedActionMutation) ClearButton() {
	m.clearedbutton = true
}

// ButtonCleared returns if the "button" edge to the ActionButton entity was cleared.
func (m *EmbedActionMutation) ButtonCleared() bool {
	return m.clearedbutton
}

// ButtonID returns the "button" edge ID in the mutation.
func (m *EmbedActionMutation) ButtonID() (id int, exists bool) {
	if m.button != nil {
		return *m.button, true
	}
	return
}

// ButtonIDs returns the "button" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ButtonID instead. It exists only for internal usage by the builders.
func (m *EmbedActionMutation) ButtonIDs() (ids []int) {
	if id := m.button; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetButton resets all changes to the "button" edge.
func (m *EmbedActionMutation) ResetButton() {
	m.button = nil
	m.clearedbutton = false
}

// SetDropdownID sets the "dropdown" edge to the ActionDropdown entity by id.
func (m *EmbedActionMutation) SetDropdownID(id int) {
	m.dropdown = &id
}

// ClearDropdown clears the "dropdown" edge to the ActionDropdown entity.
func (m *EmbedActionMutation) ClearDropdown() {
	m.cleareddropdown = true
}

// DropdownCleared returns if the "dropdown" edge to the ActionDropdown entity was cleared.
func (m *EmbedActionMutation) DropdownCleared() bool {
	return m.cleareddropdown
}

// DropdownID returns the "dropdown" edge ID in the mutation.
func (m *EmbedActionMutation) DropdownID() (id int, exists bool) {
	if m.dropdown != nil {
		return *m.dropdown, true
	}
	return
}

// DropdownIDs returns the "dropdown" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DropdownID instead. It exists only for internal usage by the builders.
func (m *EmbedActionMutation) DropdownIDs() (ids []int) {
	if id := m.dropdown; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDropdown resets all changes to the "dropdown" edge.
func (m *EmbedActionMutation) ResetDropdown() {
	m.dropdown = nil
	m.cleareddropdown = false
}

// SetInputID sets the "input" edge to the ActionInput entity by id.
func (m *EmbedActionMutation) SetInputID(id int) {
	m.input = &id
}

// ClearInput clears the "input" edge to the ActionInput entity.
func (m *EmbedActionMutation) ClearInput() {
	m.clearedinput = true
}

// InputCleared returns if the "input" edge to the ActionInput entity was cleared.
func (m *EmbedActionMutation) InputCleared() bool {
	return m.clearedinput
}

// InputID returns the "input" edge ID in the mutation.
func (m *EmbedActionMutation) InputID() (id int, exists bool) {
	if m.input != nil {
		return *m.input, true
	}
	return
}

// InputIDs returns the "input" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InputID instead. It exists only for internal usage by the builders.
func (m *EmbedActionMutation) InputIDs() (ids []int) {
	if id := m.input; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInput resets all changes to the "input" edge.
func (m *EmbedActionMutation) ResetInput() {
	m.input = nil
	m.clearedinput = false
}

// Op returns the operation name.
func (m *EmbedActionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmbedAction).
func (m *EmbedActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmbedActionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.action_id != nil {
		fields = append(fields, embedaction.FieldActionID)
	}
	if m.action_type != nil {
		fields = append(fields, embedaction.FieldActionType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmbedActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case embedaction.FieldActionID:
		return m.ActionID()
	case embedaction.FieldActionType:
		return m.ActionType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmbedActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case embedaction.FieldActionID:
		return m.OldActionID(ctx)
	case embedaction.FieldActionType:
		return m.OldActionType(ctx)
	}
	return nil, fmt.Errorf("unknown EmbedAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case embedaction.FieldActionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionID(v)
		return nil
	case embedaction.FieldActionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionType(v)
		return nil
	}
	return fmt.Errorf("unknown EmbedAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmbedActionMutation) AddedFields() []string {
	var fields []string
	if m.addaction_type != nil {
		fields = append(fields, embedaction.FieldActionType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmbedActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case embedaction.FieldActionType:
		return m.AddedActionType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case embedaction.FieldActionType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActionType(v)
		return nil
	}
	return fmt.Errorf("unknown EmbedAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmbedActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmbedActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmbedActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmbedAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmbedActionMutation) ResetField(name string) error {
	switch name {
	case embedaction.FieldActionID:
		m.ResetActionID()
		return nil
	case embedaction.FieldActionType:
		m.ResetActionType()
		return nil
	}
	return fmt.Errorf("unknown EmbedAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmbedActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.button != nil {
		edges = append(edges, embedaction.EdgeButton)
	}
	if m.dropdown != nil {
		edges = append(edges, embedaction.EdgeDropdown)
	}
	if m.input != nil {
		edges = append(edges, embedaction.EdgeInput)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmbedActionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case embedaction.EdgeButton:
		if id := m.button; id != nil {
			return []ent.Value{*id}
		}
	case embedaction.EdgeDropdown:
		if id := m.dropdown; id != nil {
			return []ent.Value{*id}
		}
	case embedaction.EdgeInput:
		if id := m.input; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmbedActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmbedActionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmbedActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedbutton {
		edges = append(edges, embedaction.EdgeButton)
	}
	if m.cleareddropdown {
		edges = append(edges, embedaction.EdgeDropdown)
	}
	if m.clearedinput {
		edges = append(edges, embedaction.EdgeInput)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmbedActionMutation) EdgeCleared(name string) bool {
	switch name {
	case embedaction.EdgeButton:
		return m.clearedbutton
	case embedaction.EdgeDropdown:
		return m.cleareddropdown
	case embedaction.EdgeInput:
		return m.clearedinput
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmbedActionMutation) ClearEdge(name string) error {
	switch name {
	case embedaction.EdgeButton:
		m.ClearButton()
		return nil
	case embedaction.EdgeDropdown:
		m.ClearDropdown()
		return nil
	case embedaction.EdgeInput:
		m.ClearInput()
		return nil
	}
	return fmt.Errorf("unknown EmbedAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmbedActionMutation) ResetEdge(name string) error {
	switch name {
	case embedaction.EdgeButton:
		m.ResetButton()
		return nil
	case embedaction.EdgeDropdown:
		m.ResetDropdown()
		return nil
	case embedaction.EdgeInput:
		m.ResetInput()
		return nil
	}
	return fmt.Errorf("unknown EmbedAction edge %s", name)
}

// EmbedFieldMutation represents an operation that mutates the EmbedField nodes in the graph.
type EmbedFieldMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	subtitle             *string
	body                 *string
	image_url            *string
	presentation         *int8
	addpresentation      *int8
	clearedFields        map[string]struct{}
	embed_action         map[int]struct{}
	removedembed_action  map[int]struct{}
	clearedembed_action  bool
	embed_message        *int
	clearedembed_message bool
	done                 bool
	oldValue             func(context.Context) (*EmbedField, error)
	predicates           []predicate.EmbedField
}

var _ ent.Mutation = (*EmbedFieldMutation)(nil)

// embedfieldOption allows management of the mutation configuration using functional options.
type embedfieldOption func(*EmbedFieldMutation)

// newEmbedFieldMutation creates new mutation for the EmbedField entity.
func newEmbedFieldMutation(c config, op Op, opts ...embedfieldOption) *EmbedFieldMutation {
	m := &EmbedFieldMutation{
		config:        c,
		op:            op,
		typ:           TypeEmbedField,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmbedFieldID sets the ID field of the mutation.
func withEmbedFieldID(id int) embedfieldOption {
	return func(m *EmbedFieldMutation) {
		var (
			err   error
			once  sync.Once
			value *EmbedField
		)
		m.oldValue = func(ctx context.Context) (*EmbedField, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmbedField.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmbedField sets the old EmbedField of the mutation.
func withEmbedField(node *EmbedField) embedfieldOption {
	return func(m *EmbedFieldMutation) {
		m.oldValue = func(context.Context) (*EmbedField, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmbedFieldMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmbedFieldMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmbedFieldMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *EmbedFieldMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *EmbedFieldMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the EmbedField entity.
// If the EmbedField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedFieldMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *EmbedFieldMutation) ResetTitle() {
	m.title = nil
}

// SetSubtitle sets the "subtitle" field.
func (m *EmbedFieldMutation) SetSubtitle(s string) {
	m.subtitle = &s
}

// Subtitle returns the value of the "subtitle" field in the mutation.
func (m *EmbedFieldMutation) Subtitle() (r string, exists bool) {
	v := m.subtitle
	if v == nil {
		return
	}
	return *v, true
}

// OldSubtitle returns the old "subtitle" field's value of the EmbedField entity.
// If the EmbedField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedFieldMutation) OldSubtitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSubtitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSubtitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubtitle: %w", err)
	}
	return oldValue.Subtitle, nil
}

// ResetSubtitle resets all changes to the "subtitle" field.
func (m *EmbedFieldMutation) ResetSubtitle() {
	m.subtitle = nil
}

// SetBody sets the "body" field.
func (m *EmbedFieldMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *EmbedFieldMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the EmbedField entity.
// If the EmbedField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedFieldMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *EmbedFieldMutation) ResetBody() {
	m.body = nil
}

// SetImageURL sets the "image_url" field.
func (m *EmbedFieldMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *EmbedFieldMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the EmbedField entity.
// If the EmbedField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedFieldMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *EmbedFieldMutation) ResetImageURL() {
	m.image_url = nil
}

// SetPresentation sets the "presentation" field.
func (m *EmbedFieldMutation) SetPresentation(i int8) {
	m.presentation = &i
	m.addpresentation = nil
}

// Presentation returns the value of the "presentation" field in the mutation.
func (m *EmbedFieldMutation) Presentation() (r int8, exists bool) {
	v := m.presentation
	if v == nil {
		return
	}
	return *v, true
}

// OldPresentation returns the old "presentation" field's value of the EmbedField entity.
// If the EmbedField object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedFieldMutation) OldPresentation(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPresentation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPresentation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPresentation: %w", err)
	}
	return oldValue.Presentation, nil
}

// AddPresentation adds i to the "presentation" field.
func (m *EmbedFieldMutation) AddPresentation(i int8) {
	if m.addpresentation != nil {
		*m.addpresentation += i
	} else {
		m.addpresentation = &i
	}
}

// AddedPresentation returns the value that was added to the "presentation" field in this mutation.
func (m *EmbedFieldMutation) AddedPresentation() (r int8, exists bool) {
	v := m.addpresentation
	if v == nil {
		return
	}
	return *v, true
}

// ResetPresentation resets all changes to the "presentation" field.
func (m *EmbedFieldMutation) ResetPresentation() {
	m.presentation = nil
	m.addpresentation = nil
}

// AddEmbedActionIDs adds the "embed_action" edge to the EmbedAction entity by ids.
func (m *EmbedFieldMutation) AddEmbedActionIDs(ids ...int) {
	if m.embed_action == nil {
		m.embed_action = make(map[int]struct{})
	}
	for i := range ids {
		m.embed_action[ids[i]] = struct{}{}
	}
}

// ClearEmbedAction clears the "embed_action" edge to the EmbedAction entity.
func (m *EmbedFieldMutation) ClearEmbedAction() {
	m.clearedembed_action = true
}

// EmbedActionCleared returns if the "embed_action" edge to the EmbedAction entity was cleared.
func (m *EmbedFieldMutation) EmbedActionCleared() bool {
	return m.clearedembed_action
}

// RemoveEmbedActionIDs removes the "embed_action" edge to the EmbedAction entity by IDs.
func (m *EmbedFieldMutation) RemoveEmbedActionIDs(ids ...int) {
	if m.removedembed_action == nil {
		m.removedembed_action = make(map[int]struct{})
	}
	for i := range ids {
		m.removedembed_action[ids[i]] = struct{}{}
	}
}

// RemovedEmbedAction returns the removed IDs of the "embed_action" edge to the EmbedAction entity.
func (m *EmbedFieldMutation) RemovedEmbedActionIDs() (ids []int) {
	for id := range m.removedembed_action {
		ids = append(ids, id)
	}
	return
}

// EmbedActionIDs returns the "embed_action" edge IDs in the mutation.
func (m *EmbedFieldMutation) EmbedActionIDs() (ids []int) {
	for id := range m.embed_action {
		ids = append(ids, id)
	}
	return
}

// ResetEmbedAction resets all changes to the "embed_action" edge.
func (m *EmbedFieldMutation) ResetEmbedAction() {
	m.embed_action = nil
	m.clearedembed_action = false
	m.removedembed_action = nil
}

// SetEmbedMessageID sets the "embed_message" edge to the EmbedMessage entity by id.
func (m *EmbedFieldMutation) SetEmbedMessageID(id int) {
	m.embed_message = &id
}

// ClearEmbedMessage clears the "embed_message" edge to the EmbedMessage entity.
func (m *EmbedFieldMutation) ClearEmbedMessage() {
	m.clearedembed_message = true
}

// EmbedMessageCleared returns if the "embed_message" edge to the EmbedMessage entity was cleared.
func (m *EmbedFieldMutation) EmbedMessageCleared() bool {
	return m.clearedembed_message
}

// EmbedMessageID returns the "embed_message" edge ID in the mutation.
func (m *EmbedFieldMutation) EmbedMessageID() (id int, exists bool) {
	if m.embed_message != nil {
		return *m.embed_message, true
	}
	return
}

// EmbedMessageIDs returns the "embed_message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmbedMessageID instead. It exists only for internal usage by the builders.
func (m *EmbedFieldMutation) EmbedMessageIDs() (ids []int) {
	if id := m.embed_message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmbedMessage resets all changes to the "embed_message" edge.
func (m *EmbedFieldMutation) ResetEmbedMessage() {
	m.embed_message = nil
	m.clearedembed_message = false
}

// Op returns the operation name.
func (m *EmbedFieldMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmbedField).
func (m *EmbedFieldMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmbedFieldMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.title != nil {
		fields = append(fields, embedfield.FieldTitle)
	}
	if m.subtitle != nil {
		fields = append(fields, embedfield.FieldSubtitle)
	}
	if m.body != nil {
		fields = append(fields, embedfield.FieldBody)
	}
	if m.image_url != nil {
		fields = append(fields, embedfield.FieldImageURL)
	}
	if m.presentation != nil {
		fields = append(fields, embedfield.FieldPresentation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmbedFieldMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case embedfield.FieldTitle:
		return m.Title()
	case embedfield.FieldSubtitle:
		return m.Subtitle()
	case embedfield.FieldBody:
		return m.Body()
	case embedfield.FieldImageURL:
		return m.ImageURL()
	case embedfield.FieldPresentation:
		return m.Presentation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmbedFieldMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case embedfield.FieldTitle:
		return m.OldTitle(ctx)
	case embedfield.FieldSubtitle:
		return m.OldSubtitle(ctx)
	case embedfield.FieldBody:
		return m.OldBody(ctx)
	case embedfield.FieldImageURL:
		return m.OldImageURL(ctx)
	case embedfield.FieldPresentation:
		return m.OldPresentation(ctx)
	}
	return nil, fmt.Errorf("unknown EmbedField field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedFieldMutation) SetField(name string, value ent.Value) error {
	switch name {
	case embedfield.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case embedfield.FieldSubtitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubtitle(v)
		return nil
	case embedfield.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case embedfield.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case embedfield.FieldPresentation:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPresentation(v)
		return nil
	}
	return fmt.Errorf("unknown EmbedField field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmbedFieldMutation) AddedFields() []string {
	var fields []string
	if m.addpresentation != nil {
		fields = append(fields, embedfield.FieldPresentation)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmbedFieldMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case embedfield.FieldPresentation:
		return m.AddedPresentation()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedFieldMutation) AddField(name string, value ent.Value) error {
	switch name {
	case embedfield.FieldPresentation:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPresentation(v)
		return nil
	}
	return fmt.Errorf("unknown EmbedField numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmbedFieldMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmbedFieldMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmbedFieldMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmbedField nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmbedFieldMutation) ResetField(name string) error {
	switch name {
	case embedfield.FieldTitle:
		m.ResetTitle()
		return nil
	case embedfield.FieldSubtitle:
		m.ResetSubtitle()
		return nil
	case embedfield.FieldBody:
		m.ResetBody()
		return nil
	case embedfield.FieldImageURL:
		m.ResetImageURL()
		return nil
	case embedfield.FieldPresentation:
		m.ResetPresentation()
		return nil
	}
	return fmt.Errorf("unknown EmbedField field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmbedFieldMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.embed_action != nil {
		edges = append(edges, embedfield.EdgeEmbedAction)
	}
	if m.embed_message != nil {
		edges = append(edges, embedfield.EdgeEmbedMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmbedFieldMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case embedfield.EdgeEmbedAction:
		ids := make([]ent.Value, 0, len(m.embed_action))
		for id := range m.embed_action {
			ids = append(ids, id)
		}
		return ids
	case embedfield.EdgeEmbedMessage:
		if id := m.embed_message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmbedFieldMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedembed_action != nil {
		edges = append(edges, embedfield.EdgeEmbedAction)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmbedFieldMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case embedfield.EdgeEmbedAction:
		ids := make([]ent.Value, 0, len(m.removedembed_action))
		for id := range m.removedembed_action {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmbedFieldMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedembed_action {
		edges = append(edges, embedfield.EdgeEmbedAction)
	}
	if m.clearedembed_message {
		edges = append(edges, embedfield.EdgeEmbedMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmbedFieldMutation) EdgeCleared(name string) bool {
	switch name {
	case embedfield.EdgeEmbedAction:
		return m.clearedembed_action
	case embedfield.EdgeEmbedMessage:
		return m.clearedembed_message
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmbedFieldMutation) ClearEdge(name string) error {
	switch name {
	case embedfield.EdgeEmbedMessage:
		m.ClearEmbedMessage()
		return nil
	}
	return fmt.Errorf("unknown EmbedField unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmbedFieldMutation) ResetEdge(name string) error {
	switch name {
	case embedfield.EdgeEmbedAction:
		m.ResetEmbedAction()
		return nil
	case embedfield.EdgeEmbedMessage:
		m.ResetEmbedMessage()
		return nil
	}
	return fmt.Errorf("unknown EmbedField edge %s", name)
}

// EmbedMessageMutation represents an operation that mutates the EmbedMessage nodes in the graph.
type EmbedMessageMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	title              *string
	body               *string
	color              *int64
	addcolor           *int64
	header_text        *string
	header_subtext     *string
	header_url         *string
	header_icon        *string
	footer_text        *string
	footer_subtext     *string
	footer_url         *string
	footer_icon        *string
	clearedFields      map[string]struct{}
	embed_field        map[int]struct{}
	removedembed_field map[int]struct{}
	clearedembed_field bool
	message            *uint64
	clearedmessage     bool
	done               bool
	oldValue           func(context.Context) (*EmbedMessage, error)
	predicates         []predicate.EmbedMessage
}

var _ ent.Mutation = (*EmbedMessageMutation)(nil)

// embedmessageOption allows management of the mutation configuration using functional options.
type embedmessageOption func(*EmbedMessageMutation)

// newEmbedMessageMutation creates new mutation for the EmbedMessage entity.
func newEmbedMessageMutation(c config, op Op, opts ...embedmessageOption) *EmbedMessageMutation {
	m := &EmbedMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeEmbedMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmbedMessageID sets the ID field of the mutation.
func withEmbedMessageID(id int) embedmessageOption {
	return func(m *EmbedMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *EmbedMessage
		)
		m.oldValue = func(ctx context.Context) (*EmbedMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmbedMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmbedMessage sets the old EmbedMessage of the mutation.
func withEmbedMessage(node *EmbedMessage) embedmessageOption {
	return func(m *EmbedMessageMutation) {
		m.oldValue = func(context.Context) (*EmbedMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmbedMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmbedMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmbedMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *EmbedMessageMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *EmbedMessageMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *EmbedMessageMutation) ResetTitle() {
	m.title = nil
}

// SetBody sets the "body" field.
func (m *EmbedMessageMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *EmbedMessageMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *EmbedMessageMutation) ResetBody() {
	m.body = nil
}

// SetColor sets the "color" field.
func (m *EmbedMessageMutation) SetColor(i int64) {
	m.color = &i
	m.addcolor = nil
}

// Color returns the value of the "color" field in the mutation.
func (m *EmbedMessageMutation) Color() (r int64, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldColor(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// AddColor adds i to the "color" field.
func (m *EmbedMessageMutation) AddColor(i int64) {
	if m.addcolor != nil {
		*m.addcolor += i
	} else {
		m.addcolor = &i
	}
}

// AddedColor returns the value that was added to the "color" field in this mutation.
func (m *EmbedMessageMutation) AddedColor() (r int64, exists bool) {
	v := m.addcolor
	if v == nil {
		return
	}
	return *v, true
}

// ResetColor resets all changes to the "color" field.
func (m *EmbedMessageMutation) ResetColor() {
	m.color = nil
	m.addcolor = nil
}

// SetHeaderText sets the "header_text" field.
func (m *EmbedMessageMutation) SetHeaderText(s string) {
	m.header_text = &s
}

// HeaderText returns the value of the "header_text" field in the mutation.
func (m *EmbedMessageMutation) HeaderText() (r string, exists bool) {
	v := m.header_text
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaderText returns the old "header_text" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldHeaderText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeaderText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeaderText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaderText: %w", err)
	}
	return oldValue.HeaderText, nil
}

// ResetHeaderText resets all changes to the "header_text" field.
func (m *EmbedMessageMutation) ResetHeaderText() {
	m.header_text = nil
}

// SetHeaderSubtext sets the "header_subtext" field.
func (m *EmbedMessageMutation) SetHeaderSubtext(s string) {
	m.header_subtext = &s
}

// HeaderSubtext returns the value of the "header_subtext" field in the mutation.
func (m *EmbedMessageMutation) HeaderSubtext() (r string, exists bool) {
	v := m.header_subtext
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaderSubtext returns the old "header_subtext" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldHeaderSubtext(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeaderSubtext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeaderSubtext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaderSubtext: %w", err)
	}
	return oldValue.HeaderSubtext, nil
}

// ResetHeaderSubtext resets all changes to the "header_subtext" field.
func (m *EmbedMessageMutation) ResetHeaderSubtext() {
	m.header_subtext = nil
}

// SetHeaderURL sets the "header_url" field.
func (m *EmbedMessageMutation) SetHeaderURL(s string) {
	m.header_url = &s
}

// HeaderURL returns the value of the "header_url" field in the mutation.
func (m *EmbedMessageMutation) HeaderURL() (r string, exists bool) {
	v := m.header_url
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaderURL returns the old "header_url" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldHeaderURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeaderURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeaderURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaderURL: %w", err)
	}
	return oldValue.HeaderURL, nil
}

// ResetHeaderURL resets all changes to the "header_url" field.
func (m *EmbedMessageMutation) ResetHeaderURL() {
	m.header_url = nil
}

// SetHeaderIcon sets the "header_icon" field.
func (m *EmbedMessageMutation) SetHeaderIcon(s string) {
	m.header_icon = &s
}

// HeaderIcon returns the value of the "header_icon" field in the mutation.
func (m *EmbedMessageMutation) HeaderIcon() (r string, exists bool) {
	v := m.header_icon
	if v == nil {
		return
	}
	return *v, true
}

// OldHeaderIcon returns the old "header_icon" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldHeaderIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeaderIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeaderIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeaderIcon: %w", err)
	}
	return oldValue.HeaderIcon, nil
}

// ResetHeaderIcon resets all changes to the "header_icon" field.
func (m *EmbedMessageMutation) ResetHeaderIcon() {
	m.header_icon = nil
}

// SetFooterText sets the "footer_text" field.
func (m *EmbedMessageMutation) SetFooterText(s string) {
	m.footer_text = &s
}

// FooterText returns the value of the "footer_text" field in the mutation.
func (m *EmbedMessageMutation) FooterText() (r string, exists bool) {
	v := m.footer_text
	if v == nil {
		return
	}
	return *v, true
}

// OldFooterText returns the old "footer_text" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldFooterText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFooterText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFooterText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFooterText: %w", err)
	}
	return oldValue.FooterText, nil
}

// ResetFooterText resets all changes to the "footer_text" field.
func (m *EmbedMessageMutation) ResetFooterText() {
	m.footer_text = nil
}

// SetFooterSubtext sets the "footer_subtext" field.
func (m *EmbedMessageMutation) SetFooterSubtext(s string) {
	m.footer_subtext = &s
}

// FooterSubtext returns the value of the "footer_subtext" field in the mutation.
func (m *EmbedMessageMutation) FooterSubtext() (r string, exists bool) {
	v := m.footer_subtext
	if v == nil {
		return
	}
	return *v, true
}

// OldFooterSubtext returns the old "footer_subtext" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldFooterSubtext(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFooterSubtext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFooterSubtext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFooterSubtext: %w", err)
	}
	return oldValue.FooterSubtext, nil
}

// ResetFooterSubtext resets all changes to the "footer_subtext" field.
func (m *EmbedMessageMutation) ResetFooterSubtext() {
	m.footer_subtext = nil
}

// SetFooterURL sets the "footer_url" field.
func (m *EmbedMessageMutation) SetFooterURL(s string) {
	m.footer_url = &s
}

// FooterURL returns the value of the "footer_url" field in the mutation.
func (m *EmbedMessageMutation) FooterURL() (r string, exists bool) {
	v := m.footer_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFooterURL returns the old "footer_url" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldFooterURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFooterURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFooterURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFooterURL: %w", err)
	}
	return oldValue.FooterURL, nil
}

// ResetFooterURL resets all changes to the "footer_url" field.
func (m *EmbedMessageMutation) ResetFooterURL() {
	m.footer_url = nil
}

// SetFooterIcon sets the "footer_icon" field.
func (m *EmbedMessageMutation) SetFooterIcon(s string) {
	m.footer_icon = &s
}

// FooterIcon returns the value of the "footer_icon" field in the mutation.
func (m *EmbedMessageMutation) FooterIcon() (r string, exists bool) {
	v := m.footer_icon
	if v == nil {
		return
	}
	return *v, true
}

// OldFooterIcon returns the old "footer_icon" field's value of the EmbedMessage entity.
// If the EmbedMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbedMessageMutation) OldFooterIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFooterIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFooterIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFooterIcon: %w", err)
	}
	return oldValue.FooterIcon, nil
}

// ResetFooterIcon resets all changes to the "footer_icon" field.
func (m *EmbedMessageMutation) ResetFooterIcon() {
	m.footer_icon = nil
}

// AddEmbedFieldIDs adds the "embed_field" edge to the EmbedField entity by ids.
func (m *EmbedMessageMutation) AddEmbedFieldIDs(ids ...int) {
	if m.embed_field == nil {
		m.embed_field = make(map[int]struct{})
	}
	for i := range ids {
		m.embed_field[ids[i]] = struct{}{}
	}
}

// ClearEmbedField clears the "embed_field" edge to the EmbedField entity.
func (m *EmbedMessageMutation) ClearEmbedField() {
	m.clearedembed_field = true
}

// EmbedFieldCleared returns if the "embed_field" edge to the EmbedField entity was cleared.
func (m *EmbedMessageMutation) EmbedFieldCleared() bool {
	return m.clearedembed_field
}

// RemoveEmbedFieldIDs removes the "embed_field" edge to the EmbedField entity by IDs.
func (m *EmbedMessageMutation) RemoveEmbedFieldIDs(ids ...int) {
	if m.removedembed_field == nil {
		m.removedembed_field = make(map[int]struct{})
	}
	for i := range ids {
		m.removedembed_field[ids[i]] = struct{}{}
	}
}

// RemovedEmbedField returns the removed IDs of the "embed_field" edge to the EmbedField entity.
func (m *EmbedMessageMutation) RemovedEmbedFieldIDs() (ids []int) {
	for id := range m.removedembed_field {
		ids = append(ids, id)
	}
	return
}

// EmbedFieldIDs returns the "embed_field" edge IDs in the mutation.
func (m *EmbedMessageMutation) EmbedFieldIDs() (ids []int) {
	for id := range m.embed_field {
		ids = append(ids, id)
	}
	return
}

// ResetEmbedField resets all changes to the "embed_field" edge.
func (m *EmbedMessageMutation) ResetEmbedField() {
	m.embed_field = nil
	m.clearedembed_field = false
	m.removedembed_field = nil
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *EmbedMessageMutation) SetMessageID(id uint64) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *EmbedMessageMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *EmbedMessageMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *EmbedMessageMutation) MessageID() (id uint64, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *EmbedMessageMutation) MessageIDs() (ids []uint64) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *EmbedMessageMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// Op returns the operation name.
func (m *EmbedMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmbedMessage).
func (m *EmbedMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmbedMessageMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.title != nil {
		fields = append(fields, embedmessage.FieldTitle)
	}
	if m.body != nil {
		fields = append(fields, embedmessage.FieldBody)
	}
	if m.color != nil {
		fields = append(fields, embedmessage.FieldColor)
	}
	if m.header_text != nil {
		fields = append(fields, embedmessage.FieldHeaderText)
	}
	if m.header_subtext != nil {
		fields = append(fields, embedmessage.FieldHeaderSubtext)
	}
	if m.header_url != nil {
		fields = append(fields, embedmessage.FieldHeaderURL)
	}
	if m.header_icon != nil {
		fields = append(fields, embedmessage.FieldHeaderIcon)
	}
	if m.footer_text != nil {
		fields = append(fields, embedmessage.FieldFooterText)
	}
	if m.footer_subtext != nil {
		fields = append(fields, embedmessage.FieldFooterSubtext)
	}
	if m.footer_url != nil {
		fields = append(fields, embedmessage.FieldFooterURL)
	}
	if m.footer_icon != nil {
		fields = append(fields, embedmessage.FieldFooterIcon)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmbedMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case embedmessage.FieldTitle:
		return m.Title()
	case embedmessage.FieldBody:
		return m.Body()
	case embedmessage.FieldColor:
		return m.Color()
	case embedmessage.FieldHeaderText:
		return m.HeaderText()
	case embedmessage.FieldHeaderSubtext:
		return m.HeaderSubtext()
	case embedmessage.FieldHeaderURL:
		return m.HeaderURL()
	case embedmessage.FieldHeaderIcon:
		return m.HeaderIcon()
	case embedmessage.FieldFooterText:
		return m.FooterText()
	case embedmessage.FieldFooterSubtext:
		return m.FooterSubtext()
	case embedmessage.FieldFooterURL:
		return m.FooterURL()
	case embedmessage.FieldFooterIcon:
		return m.FooterIcon()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmbedMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case embedmessage.FieldTitle:
		return m.OldTitle(ctx)
	case embedmessage.FieldBody:
		return m.OldBody(ctx)
	case embedmessage.FieldColor:
		return m.OldColor(ctx)
	case embedmessage.FieldHeaderText:
		return m.OldHeaderText(ctx)
	case embedmessage.FieldHeaderSubtext:
		return m.OldHeaderSubtext(ctx)
	case embedmessage.FieldHeaderURL:
		return m.OldHeaderURL(ctx)
	case embedmessage.FieldHeaderIcon:
		return m.OldHeaderIcon(ctx)
	case embedmessage.FieldFooterText:
		return m.OldFooterText(ctx)
	case embedmessage.FieldFooterSubtext:
		return m.OldFooterSubtext(ctx)
	case embedmessage.FieldFooterURL:
		return m.OldFooterURL(ctx)
	case embedmessage.FieldFooterIcon:
		return m.OldFooterIcon(ctx)
	}
	return nil, fmt.Errorf("unknown EmbedMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case embedmessage.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case embedmessage.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case embedmessage.FieldColor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case embedmessage.FieldHeaderText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaderText(v)
		return nil
	case embedmessage.FieldHeaderSubtext:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaderSubtext(v)
		return nil
	case embedmessage.FieldHeaderURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaderURL(v)
		return nil
	case embedmessage.FieldHeaderIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeaderIcon(v)
		return nil
	case embedmessage.FieldFooterText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFooterText(v)
		return nil
	case embedmessage.FieldFooterSubtext:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFooterSubtext(v)
		return nil
	case embedmessage.FieldFooterURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFooterURL(v)
		return nil
	case embedmessage.FieldFooterIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFooterIcon(v)
		return nil
	}
	return fmt.Errorf("unknown EmbedMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmbedMessageMutation) AddedFields() []string {
	var fields []string
	if m.addcolor != nil {
		fields = append(fields, embedmessage.FieldColor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmbedMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case embedmessage.FieldColor:
		return m.AddedColor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case embedmessage.FieldColor:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddColor(v)
		return nil
	}
	return fmt.Errorf("unknown EmbedMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmbedMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmbedMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmbedMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmbedMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmbedMessageMutation) ResetField(name string) error {
	switch name {
	case embedmessage.FieldTitle:
		m.ResetTitle()
		return nil
	case embedmessage.FieldBody:
		m.ResetBody()
		return nil
	case embedmessage.FieldColor:
		m.ResetColor()
		return nil
	case embedmessage.FieldHeaderText:
		m.ResetHeaderText()
		return nil
	case embedmessage.FieldHeaderSubtext:
		m.ResetHeaderSubtext()
		return nil
	case embedmessage.FieldHeaderURL:
		m.ResetHeaderURL()
		return nil
	case embedmessage.FieldHeaderIcon:
		m.ResetHeaderIcon()
		return nil
	case embedmessage.FieldFooterText:
		m.ResetFooterText()
		return nil
	case embedmessage.FieldFooterSubtext:
		m.ResetFooterSubtext()
		return nil
	case embedmessage.FieldFooterURL:
		m.ResetFooterURL()
		return nil
	case embedmessage.FieldFooterIcon:
		m.ResetFooterIcon()
		return nil
	}
	return fmt.Errorf("unknown EmbedMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmbedMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.embed_field != nil {
		edges = append(edges, embedmessage.EdgeEmbedField)
	}
	if m.message != nil {
		edges = append(edges, embedmessage.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmbedMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case embedmessage.EdgeEmbedField:
		ids := make([]ent.Value, 0, len(m.embed_field))
		for id := range m.embed_field {
			ids = append(ids, id)
		}
		return ids
	case embedmessage.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmbedMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedembed_field != nil {
		edges = append(edges, embedmessage.EdgeEmbedField)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmbedMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case embedmessage.EdgeEmbedField:
		ids := make([]ent.Value, 0, len(m.removedembed_field))
		for id := range m.removedembed_field {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmbedMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedembed_field {
		edges = append(edges, embedmessage.EdgeEmbedField)
	}
	if m.clearedmessage {
		edges = append(edges, embedmessage.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmbedMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case embedmessage.EdgeEmbedField:
		return m.clearedembed_field
	case embedmessage.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmbedMessageMutation) ClearEdge(name string) error {
	switch name {
	case embedmessage.EdgeMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown EmbedMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmbedMessageMutation) ResetEdge(name string) error {
	switch name {
	case embedmessage.EdgeEmbedField:
		m.ResetEmbedField()
		return nil
	case embedmessage.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown EmbedMessage edge %s", name)
}

// EmoteMutation represents an operation that mutates the Emote nodes in the graph.
type EmoteMutation struct {
	config
	op               Op
	typ              string
	id               *string
	name             *string
	clearedFields    map[string]struct{}
	emotepack        *uint64
	clearedemotepack bool
	done             bool
	oldValue         func(context.Context) (*Emote, error)
	predicates       []predicate.Emote
}

var _ ent.Mutation = (*EmoteMutation)(nil)

// emoteOption allows management of the mutation configuration using functional options.
type emoteOption func(*EmoteMutation)

// newEmoteMutation creates new mutation for the Emote entity.
func newEmoteMutation(c config, op Op, opts ...emoteOption) *EmoteMutation {
	m := &EmoteMutation{
		config:        c,
		op:            op,
		typ:           TypeEmote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmoteID sets the ID field of the mutation.
func withEmoteID(id string) emoteOption {
	return func(m *EmoteMutation) {
		var (
			err   error
			once  sync.Once
			value *Emote
		)
		m.oldValue = func(ctx context.Context) (*Emote, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Emote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmote sets the old Emote of the mutation.
func withEmote(node *Emote) emoteOption {
	return func(m *EmoteMutation) {
		m.oldValue = func(context.Context) (*Emote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Emote entities.
func (m *EmoteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmoteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *EmoteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmoteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Emote entity.
// If the Emote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmoteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmoteMutation) ResetName() {
	m.name = nil
}

// SetEmotepackID sets the "emotepack" edge to the EmotePack entity by id.
func (m *EmoteMutation) SetEmotepackID(id uint64) {
	m.emotepack = &id
}

// ClearEmotepack clears the "emotepack" edge to the EmotePack entity.
func (m *EmoteMutation) ClearEmotepack() {
	m.clearedemotepack = true
}

// EmotepackCleared returns if the "emotepack" edge to the EmotePack entity was cleared.
func (m *EmoteMutation) EmotepackCleared() bool {
	return m.clearedemotepack
}

// EmotepackID returns the "emotepack" edge ID in the mutation.
func (m *EmoteMutation) EmotepackID() (id uint64, exists bool) {
	if m.emotepack != nil {
		return *m.emotepack, true
	}
	return
}

// EmotepackIDs returns the "emotepack" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmotepackID instead. It exists only for internal usage by the builders.
func (m *EmoteMutation) EmotepackIDs() (ids []uint64) {
	if id := m.emotepack; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmotepack resets all changes to the "emotepack" edge.
func (m *EmoteMutation) ResetEmotepack() {
	m.emotepack = nil
	m.clearedemotepack = false
}

// Op returns the operation name.
func (m *EmoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Emote).
func (m *EmoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmoteMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, emote.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emote.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emote.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Emote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emote.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Emote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Emote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Emote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmoteMutation) ResetField(name string) error {
	switch name {
	case emote.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Emote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.emotepack != nil {
		edges = append(edges, emote.EdgeEmotepack)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emote.EdgeEmotepack:
		if id := m.emotepack; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmoteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedemotepack {
		edges = append(edges, emote.EdgeEmotepack)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmoteMutation) EdgeCleared(name string) bool {
	switch name {
	case emote.EdgeEmotepack:
		return m.clearedemotepack
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmoteMutation) ClearEdge(name string) error {
	switch name {
	case emote.EdgeEmotepack:
		m.ClearEmotepack()
		return nil
	}
	return fmt.Errorf("unknown Emote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmoteMutation) ResetEdge(name string) error {
	switch name {
	case emote.EdgeEmotepack:
		m.ResetEmotepack()
		return nil
	}
	return fmt.Errorf("unknown Emote edge %s", name)
}

// EmotePackMutation represents an operation that mutates the EmotePack nodes in the graph.
type EmotePackMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	name          *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	owner         *uint64
	clearedowner  bool
	emote         map[string]struct{}
	removedemote  map[string]struct{}
	clearedemote  bool
	done          bool
	oldValue      func(context.Context) (*EmotePack, error)
	predicates    []predicate.EmotePack
}

var _ ent.Mutation = (*EmotePackMutation)(nil)

// emotepackOption allows management of the mutation configuration using functional options.
type emotepackOption func(*EmotePackMutation)

// newEmotePackMutation creates new mutation for the EmotePack entity.
func newEmotePackMutation(c config, op Op, opts ...emotepackOption) *EmotePackMutation {
	m := &EmotePackMutation{
		config:        c,
		op:            op,
		typ:           TypeEmotePack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmotePackID sets the ID field of the mutation.
func withEmotePackID(id uint64) emotepackOption {
	return func(m *EmotePackMutation) {
		var (
			err   error
			once  sync.Once
			value *EmotePack
		)
		m.oldValue = func(ctx context.Context) (*EmotePack, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmotePack.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmotePack sets the old EmotePack of the mutation.
func withEmotePack(node *EmotePack) emotepackOption {
	return func(m *EmotePackMutation) {
		m.oldValue = func(context.Context) (*EmotePack, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmotePackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmotePackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmotePack entities.
func (m *EmotePackMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmotePackMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *EmotePackMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmotePackMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the EmotePack entity.
// If the EmotePack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmotePackMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmotePackMutation) ResetName() {
	m.name = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *EmotePackMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *EmotePackMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *EmotePackMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *EmotePackMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EmotePackMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EmotePackMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *EmotePackMutation) SetOwnerID(id uint64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *EmotePackMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the "owner" edge to the User entity was cleared.
func (m *EmotePackMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *EmotePackMutation) OwnerID() (id uint64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EmotePackMutation) OwnerIDs() (ids []uint64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EmotePackMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddEmoteIDs adds the "emote" edge to the Emote entity by ids.
func (m *EmotePackMutation) AddEmoteIDs(ids ...string) {
	if m.emote == nil {
		m.emote = make(map[string]struct{})
	}
	for i := range ids {
		m.emote[ids[i]] = struct{}{}
	}
}

// ClearEmote clears the "emote" edge to the Emote entity.
func (m *EmotePackMutation) ClearEmote() {
	m.clearedemote = true
}

// EmoteCleared returns if the "emote" edge to the Emote entity was cleared.
func (m *EmotePackMutation) EmoteCleared() bool {
	return m.clearedemote
}

// RemoveEmoteIDs removes the "emote" edge to the Emote entity by IDs.
func (m *EmotePackMutation) RemoveEmoteIDs(ids ...string) {
	if m.removedemote == nil {
		m.removedemote = make(map[string]struct{})
	}
	for i := range ids {
		m.removedemote[ids[i]] = struct{}{}
	}
}

// RemovedEmote returns the removed IDs of the "emote" edge to the Emote entity.
func (m *EmotePackMutation) RemovedEmoteIDs() (ids []string) {
	for id := range m.removedemote {
		ids = append(ids, id)
	}
	return
}

// EmoteIDs returns the "emote" edge IDs in the mutation.
func (m *EmotePackMutation) EmoteIDs() (ids []string) {
	for id := range m.emote {
		ids = append(ids, id)
	}
	return
}

// ResetEmote resets all changes to the "emote" edge.
func (m *EmotePackMutation) ResetEmote() {
	m.emote = nil
	m.clearedemote = false
	m.removedemote = nil
}

// Op returns the operation name.
func (m *EmotePackMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmotePack).
func (m *EmotePackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmotePackMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, emotepack.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmotePackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emotepack.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmotePackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emotepack.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown EmotePack field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmotePackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emotepack.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown EmotePack field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmotePackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmotePackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmotePackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmotePack numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmotePackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmotePackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmotePackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmotePack nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmotePackMutation) ResetField(name string) error {
	switch name {
	case emotepack.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown EmotePack field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmotePackMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, emotepack.EdgeUser)
	}
	if m.owner != nil {
		edges = append(edges, emotepack.EdgeOwner)
	}
	if m.emote != nil {
		edges = append(edges, emotepack.EdgeEmote)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmotePackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emotepack.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case emotepack.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case emotepack.EdgeEmote:
		ids := make([]ent.Value, 0, len(m.emote))
		for id := range m.emote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmotePackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedemote != nil {
		edges = append(edges, emotepack.EdgeEmote)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmotePackMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case emotepack.EdgeEmote:
		ids := make([]ent.Value, 0, len(m.removedemote))
		for id := range m.removedemote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmotePackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, emotepack.EdgeUser)
	}
	if m.clearedowner {
		edges = append(edges, emotepack.EdgeOwner)
	}
	if m.clearedemote {
		edges = append(edges, emotepack.EdgeEmote)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmotePackMutation) EdgeCleared(name string) bool {
	switch name {
	case emotepack.EdgeUser:
		return m.cleareduser
	case emotepack.EdgeOwner:
		return m.clearedowner
	case emotepack.EdgeEmote:
		return m.clearedemote
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmotePackMutation) ClearEdge(name string) error {
	switch name {
	case emotepack.EdgeUser:
		m.ClearUser()
		return nil
	case emotepack.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown EmotePack unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmotePackMutation) ResetEdge(name string) error {
	switch name {
	case emotepack.EdgeUser:
		m.ResetUser()
		return nil
	case emotepack.EdgeOwner:
		m.ResetOwner()
		return nil
	case emotepack.EdgeEmote:
		m.ResetEmote()
		return nil
	}
	return fmt.Errorf("unknown EmotePack edge %s", name)
}

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	contenttype   *string
	size          *int
	addsize       *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*File, error)
	predicates    []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id string) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of File entities.
func (m *FileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetContenttype sets the "contenttype" field.
func (m *FileMutation) SetContenttype(s string) {
	m.contenttype = &s
}

// Contenttype returns the value of the "contenttype" field in the mutation.
func (m *FileMutation) Contenttype() (r string, exists bool) {
	v := m.contenttype
	if v == nil {
		return
	}
	return *v, true
}

// OldContenttype returns the old "contenttype" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldContenttype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContenttype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContenttype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContenttype: %w", err)
	}
	return oldValue.Contenttype, nil
}

// ResetContenttype resets all changes to the "contenttype" field.
func (m *FileMutation) ResetContenttype() {
	m.contenttype = nil
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *FileMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.contenttype != nil {
		fields = append(fields, file.FieldContenttype)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldName:
		return m.Name()
	case file.FieldContenttype:
		return m.Contenttype()
	case file.FieldSize:
		return m.Size()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldContenttype:
		return m.OldContenttype(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldContenttype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContenttype(v)
		return nil
	case file.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldContenttype:
		m.ResetContenttype()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown File edge %s", name)
}

// FileHashMutation represents an operation that mutates the FileHash nodes in the graph.
type FileHashMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hash          *[]byte
	fileid        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FileHash, error)
	predicates    []predicate.FileHash
}

var _ ent.Mutation = (*FileHashMutation)(nil)

// filehashOption allows management of the mutation configuration using functional options.
type filehashOption func(*FileHashMutation)

// newFileHashMutation creates new mutation for the FileHash entity.
func newFileHashMutation(c config, op Op, opts ...filehashOption) *FileHashMutation {
	m := &FileHashMutation{
		config:        c,
		op:            op,
		typ:           TypeFileHash,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileHashID sets the ID field of the mutation.
func withFileHashID(id int) filehashOption {
	return func(m *FileHashMutation) {
		var (
			err   error
			once  sync.Once
			value *FileHash
		)
		m.oldValue = func(ctx context.Context) (*FileHash, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileHash.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileHash sets the old FileHash of the mutation.
func withFileHash(node *FileHash) filehashOption {
	return func(m *FileHashMutation) {
		m.oldValue = func(context.Context) (*FileHash, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileHashMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileHashMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FileHashMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHash sets the "hash" field.
func (m *FileHashMutation) SetHash(b []byte) {
	m.hash = &b
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FileHashMutation) Hash() (r []byte, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the FileHash entity.
// If the FileHash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileHashMutation) OldHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FileHashMutation) ResetHash() {
	m.hash = nil
}

// SetFileid sets the "fileid" field.
func (m *FileHashMutation) SetFileid(s string) {
	m.fileid = &s
}

// Fileid returns the value of the "fileid" field in the mutation.
func (m *FileHashMutation) Fileid() (r string, exists bool) {
	v := m.fileid
	if v == nil {
		return
	}
	return *v, true
}

// OldFileid returns the old "fileid" field's value of the FileHash entity.
// If the FileHash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileHashMutation) OldFileid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFileid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFileid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileid: %w", err)
	}
	return oldValue.Fileid, nil
}

// ResetFileid resets all changes to the "fileid" field.
func (m *FileHashMutation) ResetFileid() {
	m.fileid = nil
}

// Op returns the operation name.
func (m *FileHashMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileHash).
func (m *FileHashMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileHashMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hash != nil {
		fields = append(fields, filehash.FieldHash)
	}
	if m.fileid != nil {
		fields = append(fields, filehash.FieldFileid)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileHashMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case filehash.FieldHash:
		return m.Hash()
	case filehash.FieldFileid:
		return m.Fileid()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileHashMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case filehash.FieldHash:
		return m.OldHash(ctx)
	case filehash.FieldFileid:
		return m.OldFileid(ctx)
	}
	return nil, fmt.Errorf("unknown FileHash field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileHashMutation) SetField(name string, value ent.Value) error {
	switch name {
	case filehash.FieldHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case filehash.FieldFileid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileid(v)
		return nil
	}
	return fmt.Errorf("unknown FileHash field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileHashMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileHashMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileHashMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FileHash numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileHashMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileHashMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileHashMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileHash nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileHashMutation) ResetField(name string) error {
	switch name {
	case filehash.FieldHash:
		m.ResetHash()
		return nil
	case filehash.FieldFileid:
		m.ResetFileid()
		return nil
	}
	return fmt.Errorf("unknown FileHash field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileHashMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileHashMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileHashMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileHashMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileHashMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileHashMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileHashMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileHash unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileHashMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileHash edge %s", name)
}

// FileMessageMutation represents an operation that mutates the FileMessage nodes in the graph.
type FileMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FileMessage, error)
	predicates    []predicate.FileMessage
}

var _ ent.Mutation = (*FileMessageMutation)(nil)

// filemessageOption allows management of the mutation configuration using functional options.
type filemessageOption func(*FileMessageMutation)

// newFileMessageMutation creates new mutation for the FileMessage entity.
func newFileMessageMutation(c config, op Op, opts ...filemessageOption) *FileMessageMutation {
	m := &FileMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeFileMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileMessageID sets the ID field of the mutation.
func withFileMessageID(id int) filemessageOption {
	return func(m *FileMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *FileMessage
		)
		m.oldValue = func(ctx context.Context) (*FileMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileMessage sets the old FileMessage of the mutation.
func withFileMessage(node *FileMessage) filemessageOption {
	return func(m *FileMessageMutation) {
		m.oldValue = func(context.Context) (*FileMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FileMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Op returns the operation name.
func (m *FileMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileMessage).
func (m *FileMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMessageMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMessageMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown FileMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FileMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMessageMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown FileMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMessageMutation) ResetField(name string) error {
	return fmt.Errorf("unknown FileMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileMessage edge %s", name)
}

// ForeignUserMutation represents an operation that mutates the ForeignUser nodes in the graph.
type ForeignUserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	foreignid     *uint64
	addforeignid  *uint64
	host          *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*ForeignUser, error)
	predicates    []predicate.ForeignUser
}

var _ ent.Mutation = (*ForeignUserMutation)(nil)

// foreignuserOption allows management of the mutation configuration using functional options.
type foreignuserOption func(*ForeignUserMutation)

// newForeignUserMutation creates new mutation for the ForeignUser entity.
func newForeignUserMutation(c config, op Op, opts ...foreignuserOption) *ForeignUserMutation {
	m := &ForeignUserMutation{
		config:        c,
		op:            op,
		typ:           TypeForeignUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withForeignUserID sets the ID field of the mutation.
func withForeignUserID(id int) foreignuserOption {
	return func(m *ForeignUserMutation) {
		var (
			err   error
			once  sync.Once
			value *ForeignUser
		)
		m.oldValue = func(ctx context.Context) (*ForeignUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ForeignUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForeignUser sets the old ForeignUser of the mutation.
func withForeignUser(node *ForeignUser) foreignuserOption {
	return func(m *ForeignUserMutation) {
		m.oldValue = func(context.Context) (*ForeignUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ForeignUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ForeignUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ForeignUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetForeignid sets the "foreignid" field.
func (m *ForeignUserMutation) SetForeignid(u uint64) {
	m.foreignid = &u
	m.addforeignid = nil
}

// Foreignid returns the value of the "foreignid" field in the mutation.
func (m *ForeignUserMutation) Foreignid() (r uint64, exists bool) {
	v := m.foreignid
	if v == nil {
		return
	}
	return *v, true
}

// OldForeignid returns the old "foreignid" field's value of the ForeignUser entity.
// If the ForeignUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForeignUserMutation) OldForeignid(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldForeignid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldForeignid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForeignid: %w", err)
	}
	return oldValue.Foreignid, nil
}

// AddForeignid adds u to the "foreignid" field.
func (m *ForeignUserMutation) AddForeignid(u uint64) {
	if m.addforeignid != nil {
		*m.addforeignid += u
	} else {
		m.addforeignid = &u
	}
}

// AddedForeignid returns the value that was added to the "foreignid" field in this mutation.
func (m *ForeignUserMutation) AddedForeignid() (r uint64, exists bool) {
	v := m.addforeignid
	if v == nil {
		return
	}
	return *v, true
}

// ResetForeignid resets all changes to the "foreignid" field.
func (m *ForeignUserMutation) ResetForeignid() {
	m.foreignid = nil
	m.addforeignid = nil
}

// SetHost sets the "host" field.
func (m *ForeignUserMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *ForeignUserMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the ForeignUser entity.
// If the ForeignUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForeignUserMutation) OldHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ResetHost resets all changes to the "host" field.
func (m *ForeignUserMutation) ResetHost() {
	m.host = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ForeignUserMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ForeignUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *ForeignUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ForeignUserMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ForeignUserMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ForeignUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *ForeignUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ForeignUser).
func (m *ForeignUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ForeignUserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.foreignid != nil {
		fields = append(fields, foreignuser.FieldForeignid)
	}
	if m.host != nil {
		fields = append(fields, foreignuser.FieldHost)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ForeignUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case foreignuser.FieldForeignid:
		return m.Foreignid()
	case foreignuser.FieldHost:
		return m.Host()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ForeignUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case foreignuser.FieldForeignid:
		return m.OldForeignid(ctx)
	case foreignuser.FieldHost:
		return m.OldHost(ctx)
	}
	return nil, fmt.Errorf("unknown ForeignUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForeignUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case foreignuser.FieldForeignid:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForeignid(v)
		return nil
	case foreignuser.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	}
	return fmt.Errorf("unknown ForeignUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ForeignUserMutation) AddedFields() []string {
	var fields []string
	if m.addforeignid != nil {
		fields = append(fields, foreignuser.FieldForeignid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ForeignUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case foreignuser.FieldForeignid:
		return m.AddedForeignid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForeignUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case foreignuser.FieldForeignid:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddForeignid(v)
		return nil
	}
	return fmt.Errorf("unknown ForeignUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ForeignUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ForeignUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ForeignUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ForeignUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ForeignUserMutation) ResetField(name string) error {
	switch name {
	case foreignuser.FieldForeignid:
		m.ResetForeignid()
		return nil
	case foreignuser.FieldHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown ForeignUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ForeignUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, foreignuser.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ForeignUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foreignuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ForeignUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ForeignUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ForeignUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, foreignuser.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ForeignUserMutation) EdgeCleared(name string) bool {
	switch name {
	case foreignuser.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ForeignUserMutation) ClearEdge(name string) error {
	switch name {
	case foreignuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ForeignUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ForeignUserMutation) ResetEdge(name string) error {
	switch name {
	case foreignuser.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ForeignUser edge %s", name)
}

// GuildMutation represents an operation that mutates the Guild nodes in the graph.
type GuildMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	owner                  *uint64
	addowner               *uint64
	name                   *string
	picture                *string
	metadata               *[]byte
	clearedFields          map[string]struct{}
	invite                 map[string]struct{}
	removedinvite          map[string]struct{}
	clearedinvite          bool
	bans                   map[uint64]struct{}
	removedbans            map[uint64]struct{}
	clearedbans            bool
	channel                map[uint64]struct{}
	removedchannel         map[uint64]struct{}
	clearedchannel         bool
	role                   map[uint64]struct{}
	removedrole            map[uint64]struct{}
	clearedrole            bool
	permission_node        map[int]struct{}
	removedpermission_node map[int]struct{}
	clearedpermission_node bool
	user                   map[uint64]struct{}
	removeduser            map[uint64]struct{}
	cleareduser            bool
	done                   bool
	oldValue               func(context.Context) (*Guild, error)
	predicates             []predicate.Guild
}

var _ ent.Mutation = (*GuildMutation)(nil)

// guildOption allows management of the mutation configuration using functional options.
type guildOption func(*GuildMutation)

// newGuildMutation creates new mutation for the Guild entity.
func newGuildMutation(c config, op Op, opts ...guildOption) *GuildMutation {
	m := &GuildMutation{
		config:        c,
		op:            op,
		typ:           TypeGuild,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildID sets the ID field of the mutation.
func withGuildID(id uint64) guildOption {
	return func(m *GuildMutation) {
		var (
			err   error
			once  sync.Once
			value *Guild
		)
		m.oldValue = func(ctx context.Context) (*Guild, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Guild.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuild sets the old Guild of the mutation.
func withGuild(node *Guild) guildOption {
	return func(m *GuildMutation) {
		m.oldValue = func(context.Context) (*Guild, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Guild entities.
func (m *GuildMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *GuildMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOwner sets the "owner" field.
func (m *GuildMutation) SetOwner(u uint64) {
	m.owner = &u
	m.addowner = nil
}

// Owner returns the value of the "owner" field in the mutation.
func (m *GuildMutation) Owner() (r uint64, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldOwner(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// AddOwner adds u to the "owner" field.
func (m *GuildMutation) AddOwner(u uint64) {
	if m.addowner != nil {
		*m.addowner += u
	} else {
		m.addowner = &u
	}
}

// AddedOwner returns the value that was added to the "owner" field in this mutation.
func (m *GuildMutation) AddedOwner() (r uint64, exists bool) {
	v := m.addowner
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwner resets all changes to the "owner" field.
func (m *GuildMutation) ResetOwner() {
	m.owner = nil
	m.addowner = nil
}

// SetName sets the "name" field.
func (m *GuildMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GuildMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GuildMutation) ResetName() {
	m.name = nil
}

// SetPicture sets the "picture" field.
func (m *GuildMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *GuildMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *GuildMutation) ResetPicture() {
	m.picture = nil
}

// SetMetadata sets the "metadata" field.
func (m *GuildMutation) SetMetadata(b []byte) {
	m.metadata = &b
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *GuildMutation) Metadata() (r []byte, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldMetadata(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *GuildMutation) ResetMetadata() {
	m.metadata = nil
}

// AddInviteIDs adds the "invite" edge to the Invite entity by ids.
func (m *GuildMutation) AddInviteIDs(ids ...string) {
	if m.invite == nil {
		m.invite = make(map[string]struct{})
	}
	for i := range ids {
		m.invite[ids[i]] = struct{}{}
	}
}

// ClearInvite clears the "invite" edge to the Invite entity.
func (m *GuildMutation) ClearInvite() {
	m.clearedinvite = true
}

// InviteCleared returns if the "invite" edge to the Invite entity was cleared.
func (m *GuildMutation) InviteCleared() bool {
	return m.clearedinvite
}

// RemoveInviteIDs removes the "invite" edge to the Invite entity by IDs.
func (m *GuildMutation) RemoveInviteIDs(ids ...string) {
	if m.removedinvite == nil {
		m.removedinvite = make(map[string]struct{})
	}
	for i := range ids {
		m.removedinvite[ids[i]] = struct{}{}
	}
}

// RemovedInvite returns the removed IDs of the "invite" edge to the Invite entity.
func (m *GuildMutation) RemovedInviteIDs() (ids []string) {
	for id := range m.removedinvite {
		ids = append(ids, id)
	}
	return
}

// InviteIDs returns the "invite" edge IDs in the mutation.
func (m *GuildMutation) InviteIDs() (ids []string) {
	for id := range m.invite {
		ids = append(ids, id)
	}
	return
}

// ResetInvite resets all changes to the "invite" edge.
func (m *GuildMutation) ResetInvite() {
	m.invite = nil
	m.clearedinvite = false
	m.removedinvite = nil
}

// AddBanIDs adds the "bans" edge to the User entity by ids.
func (m *GuildMutation) AddBanIDs(ids ...uint64) {
	if m.bans == nil {
		m.bans = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bans[ids[i]] = struct{}{}
	}
}

// ClearBans clears the "bans" edge to the User entity.
func (m *GuildMutation) ClearBans() {
	m.clearedbans = true
}

// BansCleared returns if the "bans" edge to the User entity was cleared.
func (m *GuildMutation) BansCleared() bool {
	return m.clearedbans
}

// RemoveBanIDs removes the "bans" edge to the User entity by IDs.
func (m *GuildMutation) RemoveBanIDs(ids ...uint64) {
	if m.removedbans == nil {
		m.removedbans = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedbans[ids[i]] = struct{}{}
	}
}

// RemovedBans returns the removed IDs of the "bans" edge to the User entity.
func (m *GuildMutation) RemovedBansIDs() (ids []uint64) {
	for id := range m.removedbans {
		ids = append(ids, id)
	}
	return
}

// BansIDs returns the "bans" edge IDs in the mutation.
func (m *GuildMutation) BansIDs() (ids []uint64) {
	for id := range m.bans {
		ids = append(ids, id)
	}
	return
}

// ResetBans resets all changes to the "bans" edge.
func (m *GuildMutation) ResetBans() {
	m.bans = nil
	m.clearedbans = false
	m.removedbans = nil
}

// AddChannelIDs adds the "channel" edge to the Channel entity by ids.
func (m *GuildMutation) AddChannelIDs(ids ...uint64) {
	if m.channel == nil {
		m.channel = make(map[uint64]struct{})
	}
	for i := range ids {
		m.channel[ids[i]] = struct{}{}
	}
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *GuildMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared returns if the "channel" edge to the Channel entity was cleared.
func (m *GuildMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// RemoveChannelIDs removes the "channel" edge to the Channel entity by IDs.
func (m *GuildMutation) RemoveChannelIDs(ids ...uint64) {
	if m.removedchannel == nil {
		m.removedchannel = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedchannel[ids[i]] = struct{}{}
	}
}

// RemovedChannel returns the removed IDs of the "channel" edge to the Channel entity.
func (m *GuildMutation) RemovedChannelIDs() (ids []uint64) {
	for id := range m.removedchannel {
		ids = append(ids, id)
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
func (m *GuildMutation) ChannelIDs() (ids []uint64) {
	for id := range m.channel {
		ids = append(ids, id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *GuildMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
	m.removedchannel = nil
}

// AddRoleIDs adds the "role" edge to the Role entity by ids.
func (m *GuildMutation) AddRoleIDs(ids ...uint64) {
	if m.role == nil {
		m.role = make(map[uint64]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the Role entity.
func (m *GuildMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the "role" edge to the Role entity was cleared.
func (m *GuildMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the Role entity by IDs.
func (m *GuildMutation) RemoveRoleIDs(ids ...uint64) {
	if m.removedrole == nil {
		m.removedrole = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the Role entity.
func (m *GuildMutation) RemovedRoleIDs() (ids []uint64) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *GuildMutation) RoleIDs() (ids []uint64) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *GuildMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// AddPermissionNodeIDs adds the "permission_node" edge to the PermissionNode entity by ids.
func (m *GuildMutation) AddPermissionNodeIDs(ids ...int) {
	if m.permission_node == nil {
		m.permission_node = make(map[int]struct{})
	}
	for i := range ids {
		m.permission_node[ids[i]] = struct{}{}
	}
}

// ClearPermissionNode clears the "permission_node" edge to the PermissionNode entity.
func (m *GuildMutation) ClearPermissionNode() {
	m.clearedpermission_node = true
}

// PermissionNodeCleared returns if the "permission_node" edge to the PermissionNode entity was cleared.
func (m *GuildMutation) PermissionNodeCleared() bool {
	return m.clearedpermission_node
}

// RemovePermissionNodeIDs removes the "permission_node" edge to the PermissionNode entity by IDs.
func (m *GuildMutation) RemovePermissionNodeIDs(ids ...int) {
	if m.removedpermission_node == nil {
		m.removedpermission_node = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpermission_node[ids[i]] = struct{}{}
	}
}

// RemovedPermissionNode returns the removed IDs of the "permission_node" edge to the PermissionNode entity.
func (m *GuildMutation) RemovedPermissionNodeIDs() (ids []int) {
	for id := range m.removedpermission_node {
		ids = append(ids, id)
	}
	return
}

// PermissionNodeIDs returns the "permission_node" edge IDs in the mutation.
func (m *GuildMutation) PermissionNodeIDs() (ids []int) {
	for id := range m.permission_node {
		ids = append(ids, id)
	}
	return
}

// ResetPermissionNode resets all changes to the "permission_node" edge.
func (m *GuildMutation) ResetPermissionNode() {
	m.permission_node = nil
	m.clearedpermission_node = false
	m.removedpermission_node = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *GuildMutation) AddUserIDs(ids ...uint64) {
	if m.user == nil {
		m.user = make(map[uint64]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *GuildMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *GuildMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *GuildMutation) RemoveUserIDs(ids ...uint64) {
	if m.removeduser == nil {
		m.removeduser = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *GuildMutation) RemovedUserIDs() (ids []uint64) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *GuildMutation) UserIDs() (ids []uint64) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GuildMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// Op returns the operation name.
func (m *GuildMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Guild).
func (m *GuildMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.owner != nil {
		fields = append(fields, guild.FieldOwner)
	}
	if m.name != nil {
		fields = append(fields, guild.FieldName)
	}
	if m.picture != nil {
		fields = append(fields, guild.FieldPicture)
	}
	if m.metadata != nil {
		fields = append(fields, guild.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldOwner:
		return m.Owner()
	case guild.FieldName:
		return m.Name()
	case guild.FieldPicture:
		return m.Picture()
	case guild.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guild.FieldOwner:
		return m.OldOwner(ctx)
	case guild.FieldName:
		return m.OldName(ctx)
	case guild.FieldPicture:
		return m.OldPicture(ctx)
	case guild.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Guild field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guild.FieldOwner:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case guild.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case guild.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case guild.FieldMetadata:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildMutation) AddedFields() []string {
	var fields []string
	if m.addowner != nil {
		fields = append(fields, guild.FieldOwner)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldOwner:
		return m.AddedOwner()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildMutation) AddField(name string, value ent.Value) error {
	switch name {
	case guild.FieldOwner:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwner(v)
		return nil
	}
	return fmt.Errorf("unknown Guild numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Guild nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildMutation) ResetField(name string) error {
	switch name {
	case guild.FieldOwner:
		m.ResetOwner()
		return nil
	case guild.FieldName:
		m.ResetName()
		return nil
	case guild.FieldPicture:
		m.ResetPicture()
		return nil
	case guild.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.invite != nil {
		edges = append(edges, guild.EdgeInvite)
	}
	if m.bans != nil {
		edges = append(edges, guild.EdgeBans)
	}
	if m.channel != nil {
		edges = append(edges, guild.EdgeChannel)
	}
	if m.role != nil {
		edges = append(edges, guild.EdgeRole)
	}
	if m.permission_node != nil {
		edges = append(edges, guild.EdgePermissionNode)
	}
	if m.user != nil {
		edges = append(edges, guild.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guild.EdgeInvite:
		ids := make([]ent.Value, 0, len(m.invite))
		for id := range m.invite {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeBans:
		ids := make([]ent.Value, 0, len(m.bans))
		for id := range m.bans {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeChannel:
		ids := make([]ent.Value, 0, len(m.channel))
		for id := range m.channel {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgePermissionNode:
		ids := make([]ent.Value, 0, len(m.permission_node))
		for id := range m.permission_node {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedinvite != nil {
		edges = append(edges, guild.EdgeInvite)
	}
	if m.removedbans != nil {
		edges = append(edges, guild.EdgeBans)
	}
	if m.removedchannel != nil {
		edges = append(edges, guild.EdgeChannel)
	}
	if m.removedrole != nil {
		edges = append(edges, guild.EdgeRole)
	}
	if m.removedpermission_node != nil {
		edges = append(edges, guild.EdgePermissionNode)
	}
	if m.removeduser != nil {
		edges = append(edges, guild.EdgeUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guild.EdgeInvite:
		ids := make([]ent.Value, 0, len(m.removedinvite))
		for id := range m.removedinvite {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeBans:
		ids := make([]ent.Value, 0, len(m.removedbans))
		for id := range m.removedbans {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeChannel:
		ids := make([]ent.Value, 0, len(m.removedchannel))
		for id := range m.removedchannel {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgePermissionNode:
		ids := make([]ent.Value, 0, len(m.removedpermission_node))
		for id := range m.removedpermission_node {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedinvite {
		edges = append(edges, guild.EdgeInvite)
	}
	if m.clearedbans {
		edges = append(edges, guild.EdgeBans)
	}
	if m.clearedchannel {
		edges = append(edges, guild.EdgeChannel)
	}
	if m.clearedrole {
		edges = append(edges, guild.EdgeRole)
	}
	if m.clearedpermission_node {
		edges = append(edges, guild.EdgePermissionNode)
	}
	if m.cleareduser {
		edges = append(edges, guild.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildMutation) EdgeCleared(name string) bool {
	switch name {
	case guild.EdgeInvite:
		return m.clearedinvite
	case guild.EdgeBans:
		return m.clearedbans
	case guild.EdgeChannel:
		return m.clearedchannel
	case guild.EdgeRole:
		return m.clearedrole
	case guild.EdgePermissionNode:
		return m.clearedpermission_node
	case guild.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Guild unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildMutation) ResetEdge(name string) error {
	switch name {
	case guild.EdgeInvite:
		m.ResetInvite()
		return nil
	case guild.EdgeBans:
		m.ResetBans()
		return nil
	case guild.EdgeChannel:
		m.ResetChannel()
		return nil
	case guild.EdgeRole:
		m.ResetRole()
		return nil
	case guild.EdgePermissionNode:
		m.ResetPermissionNode()
		return nil
	case guild.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Guild edge %s", name)
}

// GuildListEntryMutation represents an operation that mutates the GuildListEntry nodes in the graph.
type GuildListEntryMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	host          *string
	position      *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GuildListEntry, error)
	predicates    []predicate.GuildListEntry
}

var _ ent.Mutation = (*GuildListEntryMutation)(nil)

// guildlistentryOption allows management of the mutation configuration using functional options.
type guildlistentryOption func(*GuildListEntryMutation)

// newGuildListEntryMutation creates new mutation for the GuildListEntry entity.
func newGuildListEntryMutation(c config, op Op, opts ...guildlistentryOption) *GuildListEntryMutation {
	m := &GuildListEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeGuildListEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildListEntryID sets the ID field of the mutation.
func withGuildListEntryID(id uint64) guildlistentryOption {
	return func(m *GuildListEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *GuildListEntry
		)
		m.oldValue = func(ctx context.Context) (*GuildListEntry, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuildListEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuildListEntry sets the old GuildListEntry of the mutation.
func withGuildListEntry(node *GuildListEntry) guildlistentryOption {
	return func(m *GuildListEntryMutation) {
		m.oldValue = func(context.Context) (*GuildListEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildListEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildListEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GuildListEntry entities.
func (m *GuildListEntryMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *GuildListEntryMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHost sets the "host" field.
func (m *GuildListEntryMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *GuildListEntryMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the GuildListEntry entity.
// If the GuildListEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildListEntryMutation) OldHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ResetHost resets all changes to the "host" field.
func (m *GuildListEntryMutation) ResetHost() {
	m.host = nil
}

// SetPosition sets the "position" field.
func (m *GuildListEntryMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *GuildListEntryMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the GuildListEntry entity.
// If the GuildListEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildListEntryMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *GuildListEntryMutation) ResetPosition() {
	m.position = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GuildListEntryMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GuildListEntryMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *GuildListEntryMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GuildListEntryMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GuildListEntryMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GuildListEntryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *GuildListEntryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GuildListEntry).
func (m *GuildListEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildListEntryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.host != nil {
		fields = append(fields, guildlistentry.FieldHost)
	}
	if m.position != nil {
		fields = append(fields, guildlistentry.FieldPosition)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildListEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guildlistentry.FieldHost:
		return m.Host()
	case guildlistentry.FieldPosition:
		return m.Position()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildListEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guildlistentry.FieldHost:
		return m.OldHost(ctx)
	case guildlistentry.FieldPosition:
		return m.OldPosition(ctx)
	}
	return nil, fmt.Errorf("unknown GuildListEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildListEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guildlistentry.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	case guildlistentry.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	}
	return fmt.Errorf("unknown GuildListEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildListEntryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildListEntryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildListEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GuildListEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildListEntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildListEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildListEntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GuildListEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildListEntryMutation) ResetField(name string) error {
	switch name {
	case guildlistentry.FieldHost:
		m.ResetHost()
		return nil
	case guildlistentry.FieldPosition:
		m.ResetPosition()
		return nil
	}
	return fmt.Errorf("unknown GuildListEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildListEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, guildlistentry.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildListEntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guildlistentry.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildListEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildListEntryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildListEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, guildlistentry.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildListEntryMutation) EdgeCleared(name string) bool {
	switch name {
	case guildlistentry.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildListEntryMutation) ClearEdge(name string) error {
	switch name {
	case guildlistentry.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GuildListEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildListEntryMutation) ResetEdge(name string) error {
	switch name {
	case guildlistentry.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GuildListEntry edge %s", name)
}

// InviteMutation represents an operation that mutates the Invite nodes in the graph.
type InviteMutation struct {
	config
	op               Op
	typ              string
	id               *string
	uses             *int64
	adduses          *int64
	possible_uses    *int64
	addpossible_uses *int64
	clearedFields    map[string]struct{}
	guild            *uint64
	clearedguild     bool
	done             bool
	oldValue         func(context.Context) (*Invite, error)
	predicates       []predicate.Invite
}

var _ ent.Mutation = (*InviteMutation)(nil)

// inviteOption allows management of the mutation configuration using functional options.
type inviteOption func(*InviteMutation)

// newInviteMutation creates new mutation for the Invite entity.
func newInviteMutation(c config, op Op, opts ...inviteOption) *InviteMutation {
	m := &InviteMutation{
		config:        c,
		op:            op,
		typ:           TypeInvite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInviteID sets the ID field of the mutation.
func withInviteID(id string) inviteOption {
	return func(m *InviteMutation) {
		var (
			err   error
			once  sync.Once
			value *Invite
		)
		m.oldValue = func(ctx context.Context) (*Invite, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invite.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvite sets the old Invite of the mutation.
func withInvite(node *Invite) inviteOption {
	return func(m *InviteMutation) {
		m.oldValue = func(context.Context) (*Invite, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InviteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InviteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Invite entities.
func (m *InviteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *InviteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUses sets the "uses" field.
func (m *InviteMutation) SetUses(i int64) {
	m.uses = &i
	m.adduses = nil
}

// Uses returns the value of the "uses" field in the mutation.
func (m *InviteMutation) Uses() (r int64, exists bool) {
	v := m.uses
	if v == nil {
		return
	}
	return *v, true
}

// OldUses returns the old "uses" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldUses(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUses: %w", err)
	}
	return oldValue.Uses, nil
}

// AddUses adds i to the "uses" field.
func (m *InviteMutation) AddUses(i int64) {
	if m.adduses != nil {
		*m.adduses += i
	} else {
		m.adduses = &i
	}
}

// AddedUses returns the value that was added to the "uses" field in this mutation.
func (m *InviteMutation) AddedUses() (r int64, exists bool) {
	v := m.adduses
	if v == nil {
		return
	}
	return *v, true
}

// ResetUses resets all changes to the "uses" field.
func (m *InviteMutation) ResetUses() {
	m.uses = nil
	m.adduses = nil
}

// SetPossibleUses sets the "possible_uses" field.
func (m *InviteMutation) SetPossibleUses(i int64) {
	m.possible_uses = &i
	m.addpossible_uses = nil
}

// PossibleUses returns the value of the "possible_uses" field in the mutation.
func (m *InviteMutation) PossibleUses() (r int64, exists bool) {
	v := m.possible_uses
	if v == nil {
		return
	}
	return *v, true
}

// OldPossibleUses returns the old "possible_uses" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldPossibleUses(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPossibleUses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPossibleUses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPossibleUses: %w", err)
	}
	return oldValue.PossibleUses, nil
}

// AddPossibleUses adds i to the "possible_uses" field.
func (m *InviteMutation) AddPossibleUses(i int64) {
	if m.addpossible_uses != nil {
		*m.addpossible_uses += i
	} else {
		m.addpossible_uses = &i
	}
}

// AddedPossibleUses returns the value that was added to the "possible_uses" field in this mutation.
func (m *InviteMutation) AddedPossibleUses() (r int64, exists bool) {
	v := m.addpossible_uses
	if v == nil {
		return
	}
	return *v, true
}

// ResetPossibleUses resets all changes to the "possible_uses" field.
func (m *InviteMutation) ResetPossibleUses() {
	m.possible_uses = nil
	m.addpossible_uses = nil
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *InviteMutation) SetGuildID(id uint64) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *InviteMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *InviteMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *InviteMutation) GuildID() (id uint64, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *InviteMutation) GuildIDs() (ids []uint64) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *InviteMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// Op returns the operation name.
func (m *InviteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Invite).
func (m *InviteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InviteMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.uses != nil {
		fields = append(fields, invite.FieldUses)
	}
	if m.possible_uses != nil {
		fields = append(fields, invite.FieldPossibleUses)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InviteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invite.FieldUses:
		return m.Uses()
	case invite.FieldPossibleUses:
		return m.PossibleUses()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InviteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invite.FieldUses:
		return m.OldUses(ctx)
	case invite.FieldPossibleUses:
		return m.OldPossibleUses(ctx)
	}
	return nil, fmt.Errorf("unknown Invite field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invite.FieldUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUses(v)
		return nil
	case invite.FieldPossibleUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPossibleUses(v)
		return nil
	}
	return fmt.Errorf("unknown Invite field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InviteMutation) AddedFields() []string {
	var fields []string
	if m.adduses != nil {
		fields = append(fields, invite.FieldUses)
	}
	if m.addpossible_uses != nil {
		fields = append(fields, invite.FieldPossibleUses)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InviteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invite.FieldUses:
		return m.AddedUses()
	case invite.FieldPossibleUses:
		return m.AddedPossibleUses()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invite.FieldUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUses(v)
		return nil
	case invite.FieldPossibleUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPossibleUses(v)
		return nil
	}
	return fmt.Errorf("unknown Invite numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InviteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InviteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InviteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Invite nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InviteMutation) ResetField(name string) error {
	switch name {
	case invite.FieldUses:
		m.ResetUses()
		return nil
	case invite.FieldPossibleUses:
		m.ResetPossibleUses()
		return nil
	}
	return fmt.Errorf("unknown Invite field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InviteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.guild != nil {
		edges = append(edges, invite.EdgeGuild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InviteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invite.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InviteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InviteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InviteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedguild {
		edges = append(edges, invite.EdgeGuild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InviteMutation) EdgeCleared(name string) bool {
	switch name {
	case invite.EdgeGuild:
		return m.clearedguild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InviteMutation) ClearEdge(name string) error {
	switch name {
	case invite.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown Invite unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InviteMutation) ResetEdge(name string) error {
	switch name {
	case invite.EdgeGuild:
		m.ResetGuild()
		return nil
	}
	return fmt.Errorf("unknown Invite edge %s", name)
}

// LocalUserMutation represents an operation that mutates the LocalUser nodes in the graph.
type LocalUserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	email           *string
	password        *[]byte
	clearedFields   map[string]struct{}
	user            *uint64
	cleareduser     bool
	sessions        map[string]struct{}
	removedsessions map[string]struct{}
	clearedsessions bool
	done            bool
	oldValue        func(context.Context) (*LocalUser, error)
	predicates      []predicate.LocalUser
}

var _ ent.Mutation = (*LocalUserMutation)(nil)

// localuserOption allows management of the mutation configuration using functional options.
type localuserOption func(*LocalUserMutation)

// newLocalUserMutation creates new mutation for the LocalUser entity.
func newLocalUserMutation(c config, op Op, opts ...localuserOption) *LocalUserMutation {
	m := &LocalUserMutation{
		config:        c,
		op:            op,
		typ:           TypeLocalUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocalUserID sets the ID field of the mutation.
func withLocalUserID(id int) localuserOption {
	return func(m *LocalUserMutation) {
		var (
			err   error
			once  sync.Once
			value *LocalUser
		)
		m.oldValue = func(ctx context.Context) (*LocalUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LocalUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocalUser sets the old LocalUser of the mutation.
func withLocalUser(node *LocalUser) localuserOption {
	return func(m *LocalUserMutation) {
		m.oldValue = func(context.Context) (*LocalUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocalUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocalUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *LocalUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the "email" field.
func (m *LocalUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *LocalUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the LocalUser entity.
// If the LocalUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *LocalUserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *LocalUserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *LocalUserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the LocalUser entity.
// If the LocalUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalUserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *LocalUserMutation) ResetPassword() {
	m.password = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *LocalUserMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *LocalUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *LocalUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *LocalUserMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LocalUserMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LocalUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *LocalUserMutation) AddSessionIDs(ids ...string) {
	if m.sessions == nil {
		m.sessions = make(map[string]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *LocalUserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared returns if the "sessions" edge to the Session entity was cleared.
func (m *LocalUserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *LocalUserMutation) RemoveSessionIDs(ids ...string) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[string]struct{})
	}
	for i := range ids {
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *LocalUserMutation) RemovedSessionsIDs() (ids []string) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *LocalUserMutation) SessionsIDs() (ids []string) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *LocalUserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// Op returns the operation name.
func (m *LocalUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LocalUser).
func (m *LocalUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocalUserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.email != nil {
		fields = append(fields, localuser.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, localuser.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocalUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case localuser.FieldEmail:
		return m.Email()
	case localuser.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocalUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case localuser.FieldEmail:
		return m.OldEmail(ctx)
	case localuser.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown LocalUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case localuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case localuser.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown LocalUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocalUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocalUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LocalUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocalUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocalUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocalUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LocalUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocalUserMutation) ResetField(name string) error {
	switch name {
	case localuser.FieldEmail:
		m.ResetEmail()
		return nil
	case localuser.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown LocalUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocalUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, localuser.EdgeUser)
	}
	if m.sessions != nil {
		edges = append(edges, localuser.EdgeSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocalUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case localuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case localuser.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocalUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsessions != nil {
		edges = append(edges, localuser.EdgeSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocalUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case localuser.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocalUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, localuser.EdgeUser)
	}
	if m.clearedsessions {
		edges = append(edges, localuser.EdgeSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocalUserMutation) EdgeCleared(name string) bool {
	switch name {
	case localuser.EdgeUser:
		return m.cleareduser
	case localuser.EdgeSessions:
		return m.clearedsessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocalUserMutation) ClearEdge(name string) error {
	switch name {
	case localuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown LocalUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocalUserMutation) ResetEdge(name string) error {
	switch name {
	case localuser.EdgeUser:
		m.ResetUser()
		return nil
	case localuser.EdgeSessions:
		m.ResetSessions()
		return nil
	}
	return fmt.Errorf("unknown LocalUser edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint64
	createdat            *time.Time
	editedat             *time.Time
	actions              *[]*v1.Action
	metadata             **v1.Metadata
	overrides            *[]byte
	clearedFields        map[string]struct{}
	user                 *uint64
	cleareduser          bool
	channel              *uint64
	clearedchannel       bool
	parent               *uint64
	clearedparent        bool
	replies              map[uint64]struct{}
	removedreplies       map[uint64]struct{}
	clearedreplies       bool
	text_message         *int
	clearedtext_message  bool
	file_message         *int
	clearedfile_message  bool
	embed_message        *int
	clearedembed_message bool
	done                 bool
	oldValue             func(context.Context) (*Message, error)
	predicates           []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id uint64) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MessageMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedat sets the "createdat" field.
func (m *MessageMutation) SetCreatedat(t time.Time) {
	m.createdat = &t
}

// Createdat returns the value of the "createdat" field in the mutation.
func (m *MessageMutation) Createdat() (r time.Time, exists bool) {
	v := m.createdat
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedat returns the old "createdat" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreatedat(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedat: %w", err)
	}
	return oldValue.Createdat, nil
}

// ResetCreatedat resets all changes to the "createdat" field.
func (m *MessageMutation) ResetCreatedat() {
	m.createdat = nil
}

// SetEditedat sets the "editedat" field.
func (m *MessageMutation) SetEditedat(t time.Time) {
	m.editedat = &t
}

// Editedat returns the value of the "editedat" field in the mutation.
func (m *MessageMutation) Editedat() (r time.Time, exists bool) {
	v := m.editedat
	if v == nil {
		return
	}
	return *v, true
}

// OldEditedat returns the old "editedat" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldEditedat(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEditedat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEditedat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEditedat: %w", err)
	}
	return oldValue.Editedat, nil
}

// ClearEditedat clears the value of the "editedat" field.
func (m *MessageMutation) ClearEditedat() {
	m.editedat = nil
	m.clearedFields[message.FieldEditedat] = struct{}{}
}

// EditedatCleared returns if the "editedat" field was cleared in this mutation.
func (m *MessageMutation) EditedatCleared() bool {
	_, ok := m.clearedFields[message.FieldEditedat]
	return ok
}

// ResetEditedat resets all changes to the "editedat" field.
func (m *MessageMutation) ResetEditedat() {
	m.editedat = nil
	delete(m.clearedFields, message.FieldEditedat)
}

// SetActions sets the "actions" field.
func (m *MessageMutation) SetActions(v []*v1.Action) {
	m.actions = &v
}

// Actions returns the value of the "actions" field in the mutation.
func (m *MessageMutation) Actions() (r []*v1.Action, exists bool) {
	v := m.actions
	if v == nil {
		return
	}
	return *v, true
}

// OldActions returns the old "actions" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldActions(ctx context.Context) (v []*v1.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActions: %w", err)
	}
	return oldValue.Actions, nil
}

// ClearActions clears the value of the "actions" field.
func (m *MessageMutation) ClearActions() {
	m.actions = nil
	m.clearedFields[message.FieldActions] = struct{}{}
}

// ActionsCleared returns if the "actions" field was cleared in this mutation.
func (m *MessageMutation) ActionsCleared() bool {
	_, ok := m.clearedFields[message.FieldActions]
	return ok
}

// ResetActions resets all changes to the "actions" field.
func (m *MessageMutation) ResetActions() {
	m.actions = nil
	delete(m.clearedFields, message.FieldActions)
}

// SetMetadata sets the "metadata" field.
func (m *MessageMutation) SetMetadata(v *v1.Metadata) {
	m.metadata = &v
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *MessageMutation) Metadata() (r *v1.Metadata, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMetadata(ctx context.Context) (v *v1.Metadata, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *MessageMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[message.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *MessageMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[message.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *MessageMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, message.FieldMetadata)
}

// SetOverrides sets the "overrides" field.
func (m *MessageMutation) SetOverrides(b []byte) {
	m.overrides = &b
}

// Overrides returns the value of the "overrides" field in the mutation.
func (m *MessageMutation) Overrides() (r []byte, exists bool) {
	v := m.overrides
	if v == nil {
		return
	}
	return *v, true
}

// OldOverrides returns the old "overrides" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldOverrides(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOverrides is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOverrides requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverrides: %w", err)
	}
	return oldValue.Overrides, nil
}

// ClearOverrides clears the value of the "overrides" field.
func (m *MessageMutation) ClearOverrides() {
	m.overrides = nil
	m.clearedFields[message.FieldOverrides] = struct{}{}
}

// OverridesCleared returns if the "overrides" field was cleared in this mutation.
func (m *MessageMutation) OverridesCleared() bool {
	_, ok := m.clearedFields[message.FieldOverrides]
	return ok
}

// ResetOverrides resets all changes to the "overrides" field.
func (m *MessageMutation) ResetOverrides() {
	m.overrides = nil
	delete(m.clearedFields, message.FieldOverrides)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *MessageMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *MessageMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *MessageMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *MessageMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *MessageMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *MessageMutation) SetChannelID(id uint64) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *MessageMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared returns if the "channel" edge to the Channel entity was cleared.
func (m *MessageMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *MessageMutation) ChannelID() (id uint64, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) ChannelIDs() (ids []uint64) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *MessageMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// SetParentID sets the "parent" edge to the Message entity by id.
func (m *MessageMutation) SetParentID(id uint64) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Message entity.
func (m *MessageMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared returns if the "parent" edge to the Message entity was cleared.
func (m *MessageMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *MessageMutation) ParentID() (id uint64, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *MessageMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddReplyIDs adds the "replies" edge to the Message entity by ids.
func (m *MessageMutation) AddReplyIDs(ids ...uint64) {
	if m.replies == nil {
		m.replies = make(map[uint64]struct{})
	}
	for i := range ids {
		m.replies[ids[i]] = struct{}{}
	}
}

// ClearReplies clears the "replies" edge to the Message entity.
func (m *MessageMutation) ClearReplies() {
	m.clearedreplies = true
}

// RepliesCleared returns if the "replies" edge to the Message entity was cleared.
func (m *MessageMutation) RepliesCleared() bool {
	return m.clearedreplies
}

// RemoveReplyIDs removes the "replies" edge to the Message entity by IDs.
func (m *MessageMutation) RemoveReplyIDs(ids ...uint64) {
	if m.removedreplies == nil {
		m.removedreplies = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedreplies[ids[i]] = struct{}{}
	}
}

// RemovedReplies returns the removed IDs of the "replies" edge to the Message entity.
func (m *MessageMutation) RemovedRepliesIDs() (ids []uint64) {
	for id := range m.removedreplies {
		ids = append(ids, id)
	}
	return
}

// RepliesIDs returns the "replies" edge IDs in the mutation.
func (m *MessageMutation) RepliesIDs() (ids []uint64) {
	for id := range m.replies {
		ids = append(ids, id)
	}
	return
}

// ResetReplies resets all changes to the "replies" edge.
func (m *MessageMutation) ResetReplies() {
	m.replies = nil
	m.clearedreplies = false
	m.removedreplies = nil
}

// SetTextMessageID sets the "text_message" edge to the TextMessage entity by id.
func (m *MessageMutation) SetTextMessageID(id int) {
	m.text_message = &id
}

// ClearTextMessage clears the "text_message" edge to the TextMessage entity.
func (m *MessageMutation) ClearTextMessage() {
	m.clearedtext_message = true
}

// TextMessageCleared returns if the "text_message" edge to the TextMessage entity was cleared.
func (m *MessageMutation) TextMessageCleared() bool {
	return m.clearedtext_message
}

// TextMessageID returns the "text_message" edge ID in the mutation.
func (m *MessageMutation) TextMessageID() (id int, exists bool) {
	if m.text_message != nil {
		return *m.text_message, true
	}
	return
}

// TextMessageIDs returns the "text_message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TextMessageID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) TextMessageIDs() (ids []int) {
	if id := m.text_message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTextMessage resets all changes to the "text_message" edge.
func (m *MessageMutation) ResetTextMessage() {
	m.text_message = nil
	m.clearedtext_message = false
}

// SetFileMessageID sets the "file_message" edge to the FileMessage entity by id.
func (m *MessageMutation) SetFileMessageID(id int) {
	m.file_message = &id
}

// ClearFileMessage clears the "file_message" edge to the FileMessage entity.
func (m *MessageMutation) ClearFileMessage() {
	m.clearedfile_message = true
}

// FileMessageCleared returns if the "file_message" edge to the FileMessage entity was cleared.
func (m *MessageMutation) FileMessageCleared() bool {
	return m.clearedfile_message
}

// FileMessageID returns the "file_message" edge ID in the mutation.
func (m *MessageMutation) FileMessageID() (id int, exists bool) {
	if m.file_message != nil {
		return *m.file_message, true
	}
	return
}

// FileMessageIDs returns the "file_message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileMessageID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) FileMessageIDs() (ids []int) {
	if id := m.file_message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFileMessage resets all changes to the "file_message" edge.
func (m *MessageMutation) ResetFileMessage() {
	m.file_message = nil
	m.clearedfile_message = false
}

// SetEmbedMessageID sets the "embed_message" edge to the EmbedMessage entity by id.
func (m *MessageMutation) SetEmbedMessageID(id int) {
	m.embed_message = &id
}

// ClearEmbedMessage clears the "embed_message" edge to the EmbedMessage entity.
func (m *MessageMutation) ClearEmbedMessage() {
	m.clearedembed_message = true
}

// EmbedMessageCleared returns if the "embed_message" edge to the EmbedMessage entity was cleared.
func (m *MessageMutation) EmbedMessageCleared() bool {
	return m.clearedembed_message
}

// EmbedMessageID returns the "embed_message" edge ID in the mutation.
func (m *MessageMutation) EmbedMessageID() (id int, exists bool) {
	if m.embed_message != nil {
		return *m.embed_message, true
	}
	return
}

// EmbedMessageIDs returns the "embed_message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmbedMessageID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) EmbedMessageIDs() (ids []int) {
	if id := m.embed_message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmbedMessage resets all changes to the "embed_message" edge.
func (m *MessageMutation) ResetEmbedMessage() {
	m.embed_message = nil
	m.clearedembed_message = false
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.createdat != nil {
		fields = append(fields, message.FieldCreatedat)
	}
	if m.editedat != nil {
		fields = append(fields, message.FieldEditedat)
	}
	if m.actions != nil {
		fields = append(fields, message.FieldActions)
	}
	if m.metadata != nil {
		fields = append(fields, message.FieldMetadata)
	}
	if m.overrides != nil {
		fields = append(fields, message.FieldOverrides)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldCreatedat:
		return m.Createdat()
	case message.FieldEditedat:
		return m.Editedat()
	case message.FieldActions:
		return m.Actions()
	case message.FieldMetadata:
		return m.Metadata()
	case message.FieldOverrides:
		return m.Overrides()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldCreatedat:
		return m.OldCreatedat(ctx)
	case message.FieldEditedat:
		return m.OldEditedat(ctx)
	case message.FieldActions:
		return m.OldActions(ctx)
	case message.FieldMetadata:
		return m.OldMetadata(ctx)
	case message.FieldOverrides:
		return m.OldOverrides(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldCreatedat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedat(v)
		return nil
	case message.FieldEditedat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEditedat(v)
		return nil
	case message.FieldActions:
		v, ok := value.([]*v1.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActions(v)
		return nil
	case message.FieldMetadata:
		v, ok := value.(*v1.Metadata)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case message.FieldOverrides:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverrides(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldEditedat) {
		fields = append(fields, message.FieldEditedat)
	}
	if m.FieldCleared(message.FieldActions) {
		fields = append(fields, message.FieldActions)
	}
	if m.FieldCleared(message.FieldMetadata) {
		fields = append(fields, message.FieldMetadata)
	}
	if m.FieldCleared(message.FieldOverrides) {
		fields = append(fields, message.FieldOverrides)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldEditedat:
		m.ClearEditedat()
		return nil
	case message.FieldActions:
		m.ClearActions()
		return nil
	case message.FieldMetadata:
		m.ClearMetadata()
		return nil
	case message.FieldOverrides:
		m.ClearOverrides()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldCreatedat:
		m.ResetCreatedat()
		return nil
	case message.FieldEditedat:
		m.ResetEditedat()
		return nil
	case message.FieldActions:
		m.ResetActions()
		return nil
	case message.FieldMetadata:
		m.ResetMetadata()
		return nil
	case message.FieldOverrides:
		m.ResetOverrides()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.user != nil {
		edges = append(edges, message.EdgeUser)
	}
	if m.channel != nil {
		edges = append(edges, message.EdgeChannel)
	}
	if m.parent != nil {
		edges = append(edges, message.EdgeParent)
	}
	if m.replies != nil {
		edges = append(edges, message.EdgeReplies)
	}
	if m.text_message != nil {
		edges = append(edges, message.EdgeTextMessage)
	}
	if m.file_message != nil {
		edges = append(edges, message.EdgeFileMessage)
	}
	if m.embed_message != nil {
		edges = append(edges, message.EdgeEmbedMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.replies))
		for id := range m.replies {
			ids = append(ids, id)
		}
		return ids
	case message.EdgeTextMessage:
		if id := m.text_message; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeFileMessage:
		if id := m.file_message; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeEmbedMessage:
		if id := m.embed_message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedreplies != nil {
		edges = append(edges, message.EdgeReplies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.removedreplies))
		for id := range m.removedreplies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.cleareduser {
		edges = append(edges, message.EdgeUser)
	}
	if m.clearedchannel {
		edges = append(edges, message.EdgeChannel)
	}
	if m.clearedparent {
		edges = append(edges, message.EdgeParent)
	}
	if m.clearedreplies {
		edges = append(edges, message.EdgeReplies)
	}
	if m.clearedtext_message {
		edges = append(edges, message.EdgeTextMessage)
	}
	if m.clearedfile_message {
		edges = append(edges, message.EdgeFileMessage)
	}
	if m.clearedembed_message {
		edges = append(edges, message.EdgeEmbedMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeUser:
		return m.cleareduser
	case message.EdgeChannel:
		return m.clearedchannel
	case message.EdgeParent:
		return m.clearedparent
	case message.EdgeReplies:
		return m.clearedreplies
	case message.EdgeTextMessage:
		return m.clearedtext_message
	case message.EdgeFileMessage:
		return m.clearedfile_message
	case message.EdgeEmbedMessage:
		return m.clearedembed_message
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeUser:
		m.ClearUser()
		return nil
	case message.EdgeChannel:
		m.ClearChannel()
		return nil
	case message.EdgeParent:
		m.ClearParent()
		return nil
	case message.EdgeTextMessage:
		m.ClearTextMessage()
		return nil
	case message.EdgeFileMessage:
		m.ClearFileMessage()
		return nil
	case message.EdgeEmbedMessage:
		m.ClearEmbedMessage()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeUser:
		m.ResetUser()
		return nil
	case message.EdgeChannel:
		m.ResetChannel()
		return nil
	case message.EdgeParent:
		m.ResetParent()
		return nil
	case message.EdgeReplies:
		m.ResetReplies()
		return nil
	case message.EdgeTextMessage:
		m.ResetTextMessage()
		return nil
	case message.EdgeFileMessage:
		m.ResetFileMessage()
		return nil
	case message.EdgeEmbedMessage:
		m.ResetEmbedMessage()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// PermissionNodeMutation represents an operation that mutates the PermissionNode nodes in the graph.
type PermissionNodeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	node           *string
	allow          *bool
	clearedFields  map[string]struct{}
	role           *uint64
	clearedrole    bool
	guild          *uint64
	clearedguild   bool
	channel        *uint64
	clearedchannel bool
	done           bool
	oldValue       func(context.Context) (*PermissionNode, error)
	predicates     []predicate.PermissionNode
}

var _ ent.Mutation = (*PermissionNodeMutation)(nil)

// permissionnodeOption allows management of the mutation configuration using functional options.
type permissionnodeOption func(*PermissionNodeMutation)

// newPermissionNodeMutation creates new mutation for the PermissionNode entity.
func newPermissionNodeMutation(c config, op Op, opts ...permissionnodeOption) *PermissionNodeMutation {
	m := &PermissionNodeMutation{
		config:        c,
		op:            op,
		typ:           TypePermissionNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionNodeID sets the ID field of the mutation.
func withPermissionNodeID(id int) permissionnodeOption {
	return func(m *PermissionNodeMutation) {
		var (
			err   error
			once  sync.Once
			value *PermissionNode
		)
		m.oldValue = func(ctx context.Context) (*PermissionNode, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PermissionNode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermissionNode sets the old PermissionNode of the mutation.
func withPermissionNode(node *PermissionNode) permissionnodeOption {
	return func(m *PermissionNodeMutation) {
		m.oldValue = func(context.Context) (*PermissionNode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionNodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionNodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PermissionNodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNode sets the "node" field.
func (m *PermissionNodeMutation) SetNode(s string) {
	m.node = &s
}

// Node returns the value of the "node" field in the mutation.
func (m *PermissionNodeMutation) Node() (r string, exists bool) {
	v := m.node
	if v == nil {
		return
	}
	return *v, true
}

// OldNode returns the old "node" field's value of the PermissionNode entity.
// If the PermissionNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionNodeMutation) OldNode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNode: %w", err)
	}
	return oldValue.Node, nil
}

// ResetNode resets all changes to the "node" field.
func (m *PermissionNodeMutation) ResetNode() {
	m.node = nil
}

// SetAllow sets the "allow" field.
func (m *PermissionNodeMutation) SetAllow(b bool) {
	m.allow = &b
}

// Allow returns the value of the "allow" field in the mutation.
func (m *PermissionNodeMutation) Allow() (r bool, exists bool) {
	v := m.allow
	if v == nil {
		return
	}
	return *v, true
}

// OldAllow returns the old "allow" field's value of the PermissionNode entity.
// If the PermissionNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionNodeMutation) OldAllow(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllow: %w", err)
	}
	return oldValue.Allow, nil
}

// ResetAllow resets all changes to the "allow" field.
func (m *PermissionNodeMutation) ResetAllow() {
	m.allow = nil
}

// SetRoleID sets the "role" edge to the Role entity by id.
func (m *PermissionNodeMutation) SetRoleID(id uint64) {
	m.role = &id
}

// ClearRole clears the "role" edge to the Role entity.
func (m *PermissionNodeMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the "role" edge to the Role entity was cleared.
func (m *PermissionNodeMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleID returns the "role" edge ID in the mutation.
func (m *PermissionNodeMutation) RoleID() (id uint64, exists bool) {
	if m.role != nil {
		return *m.role, true
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *PermissionNodeMutation) RoleIDs() (ids []uint64) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *PermissionNodeMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *PermissionNodeMutation) SetGuildID(id uint64) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *PermissionNodeMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *PermissionNodeMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *PermissionNodeMutation) GuildID() (id uint64, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *PermissionNodeMutation) GuildIDs() (ids []uint64) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *PermissionNodeMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *PermissionNodeMutation) SetChannelID(id uint64) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *PermissionNodeMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared returns if the "channel" edge to the Channel entity was cleared.
func (m *PermissionNodeMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *PermissionNodeMutation) ChannelID() (id uint64, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *PermissionNodeMutation) ChannelIDs() (ids []uint64) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *PermissionNodeMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// Op returns the operation name.
func (m *PermissionNodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PermissionNode).
func (m *PermissionNodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionNodeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.node != nil {
		fields = append(fields, permissionnode.FieldNode)
	}
	if m.allow != nil {
		fields = append(fields, permissionnode.FieldAllow)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionNodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permissionnode.FieldNode:
		return m.Node()
	case permissionnode.FieldAllow:
		return m.Allow()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionNodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permissionnode.FieldNode:
		return m.OldNode(ctx)
	case permissionnode.FieldAllow:
		return m.OldAllow(ctx)
	}
	return nil, fmt.Errorf("unknown PermissionNode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionNodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permissionnode.FieldNode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNode(v)
		return nil
	case permissionnode.FieldAllow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllow(v)
		return nil
	}
	return fmt.Errorf("unknown PermissionNode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionNodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionNodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionNodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PermissionNode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionNodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionNodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionNodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PermissionNode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionNodeMutation) ResetField(name string) error {
	switch name {
	case permissionnode.FieldNode:
		m.ResetNode()
		return nil
	case permissionnode.FieldAllow:
		m.ResetAllow()
		return nil
	}
	return fmt.Errorf("unknown PermissionNode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionNodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.role != nil {
		edges = append(edges, permissionnode.EdgeRole)
	}
	if m.guild != nil {
		edges = append(edges, permissionnode.EdgeGuild)
	}
	if m.channel != nil {
		edges = append(edges, permissionnode.EdgeChannel)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionNodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permissionnode.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	case permissionnode.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	case permissionnode.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionNodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionNodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionNodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrole {
		edges = append(edges, permissionnode.EdgeRole)
	}
	if m.clearedguild {
		edges = append(edges, permissionnode.EdgeGuild)
	}
	if m.clearedchannel {
		edges = append(edges, permissionnode.EdgeChannel)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionNodeMutation) EdgeCleared(name string) bool {
	switch name {
	case permissionnode.EdgeRole:
		return m.clearedrole
	case permissionnode.EdgeGuild:
		return m.clearedguild
	case permissionnode.EdgeChannel:
		return m.clearedchannel
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionNodeMutation) ClearEdge(name string) error {
	switch name {
	case permissionnode.EdgeRole:
		m.ClearRole()
		return nil
	case permissionnode.EdgeGuild:
		m.ClearGuild()
		return nil
	case permissionnode.EdgeChannel:
		m.ClearChannel()
		return nil
	}
	return fmt.Errorf("unknown PermissionNode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionNodeMutation) ResetEdge(name string) error {
	switch name {
	case permissionnode.EdgeRole:
		m.ResetRole()
		return nil
	case permissionnode.EdgeGuild:
		m.ResetGuild()
		return nil
	case permissionnode.EdgeChannel:
		m.ResetChannel()
		return nil
	}
	return fmt.Errorf("unknown PermissionNode edge %s", name)
}

// ProfileMutation represents an operation that mutates the Profile nodes in the graph.
type ProfileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	status        *int16
	addstatus     *int16
	avatar        *string
	is_bot        *bool
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Profile, error)
	predicates    []predicate.Profile
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// profileOption allows management of the mutation configuration using functional options.
type profileOption func(*ProfileMutation)

// newProfileMutation creates new mutation for the Profile entity.
func newProfileMutation(c config, op Op, opts ...profileOption) *ProfileMutation {
	m := &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfileID sets the ID field of the mutation.
func withProfileID(id int) profileOption {
	return func(m *ProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Profile
		)
		m.oldValue = func(ctx context.Context) (*Profile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfile sets the old Profile of the mutation.
func withProfile(node *Profile) profileOption {
	return func(m *ProfileMutation) {
		m.oldValue = func(context.Context) (*Profile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *ProfileMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ProfileMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *ProfileMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[profile.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *ProfileMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[profile.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *ProfileMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, profile.FieldUsername)
}

// SetStatus sets the "status" field.
func (m *ProfileMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ProfileMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ProfileMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ProfileMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *ProfileMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[profile.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *ProfileMutation) StatusCleared() bool {
	_, ok := m.clearedFields[profile.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *ProfileMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, profile.FieldStatus)
}

// SetAvatar sets the "avatar" field.
func (m *ProfileMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *ProfileMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *ProfileMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[profile.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *ProfileMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[profile.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *ProfileMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, profile.FieldAvatar)
}

// SetIsBot sets the "is_bot" field.
func (m *ProfileMutation) SetIsBot(b bool) {
	m.is_bot = &b
}

// IsBot returns the value of the "is_bot" field in the mutation.
func (m *ProfileMutation) IsBot() (r bool, exists bool) {
	v := m.is_bot
	if v == nil {
		return
	}
	return *v, true
}

// OldIsBot returns the old "is_bot" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldIsBot(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsBot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsBot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsBot: %w", err)
	}
	return oldValue.IsBot, nil
}

// ResetIsBot resets all changes to the "is_bot" field.
func (m *ProfileMutation) ResetIsBot() {
	m.is_bot = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ProfileMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *ProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ProfileMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProfileMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, profile.FieldUsername)
	}
	if m.status != nil {
		fields = append(fields, profile.FieldStatus)
	}
	if m.avatar != nil {
		fields = append(fields, profile.FieldAvatar)
	}
	if m.is_bot != nil {
		fields = append(fields, profile.FieldIsBot)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldUsername:
		return m.Username()
	case profile.FieldStatus:
		return m.Status()
	case profile.FieldAvatar:
		return m.Avatar()
	case profile.FieldIsBot:
		return m.IsBot()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profile.FieldUsername:
		return m.OldUsername(ctx)
	case profile.FieldStatus:
		return m.OldStatus(ctx)
	case profile.FieldAvatar:
		return m.OldAvatar(ctx)
	case profile.FieldIsBot:
		return m.OldIsBot(ctx)
	}
	return nil, fmt.Errorf("unknown Profile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case profile.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case profile.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case profile.FieldIsBot:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsBot(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfileMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, profile.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profile.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profile.FieldUsername) {
		fields = append(fields, profile.FieldUsername)
	}
	if m.FieldCleared(profile.FieldStatus) {
		fields = append(fields, profile.FieldStatus)
	}
	if m.FieldCleared(profile.FieldAvatar) {
		fields = append(fields, profile.FieldAvatar)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	switch name {
	case profile.FieldUsername:
		m.ClearUsername()
		return nil
	case profile.FieldStatus:
		m.ClearStatus()
		return nil
	case profile.FieldAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldUsername:
		m.ResetUsername()
		return nil
	case profile.FieldStatus:
		m.ResetStatus()
		return nil
	case profile.FieldAvatar:
		m.ResetAvatar()
		return nil
	case profile.FieldIsBot:
		m.ResetIsBot()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, profile.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, profile.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case profile.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	case profile.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint64
	name                   *string
	color                  *int
	addcolor               *int
	hoist                  *bool
	pingable               *bool
	position               *string
	clearedFields          map[string]struct{}
	guild                  map[uint64]struct{}
	removedguild           map[uint64]struct{}
	clearedguild           bool
	members                map[uint64]struct{}
	removedmembers         map[uint64]struct{}
	clearedmembers         bool
	permission_node        map[int]struct{}
	removedpermission_node map[int]struct{}
	clearedpermission_node bool
	done                   bool
	oldValue               func(context.Context) (*Role, error)
	predicates             []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id uint64) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RoleMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetColor sets the "color" field.
func (m *RoleMutation) SetColor(i int) {
	m.color = &i
	m.addcolor = nil
}

// Color returns the value of the "color" field in the mutation.
func (m *RoleMutation) Color() (r int, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldColor(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// AddColor adds i to the "color" field.
func (m *RoleMutation) AddColor(i int) {
	if m.addcolor != nil {
		*m.addcolor += i
	} else {
		m.addcolor = &i
	}
}

// AddedColor returns the value that was added to the "color" field in this mutation.
func (m *RoleMutation) AddedColor() (r int, exists bool) {
	v := m.addcolor
	if v == nil {
		return
	}
	return *v, true
}

// ResetColor resets all changes to the "color" field.
func (m *RoleMutation) ResetColor() {
	m.color = nil
	m.addcolor = nil
}

// SetHoist sets the "hoist" field.
func (m *RoleMutation) SetHoist(b bool) {
	m.hoist = &b
}

// Hoist returns the value of the "hoist" field in the mutation.
func (m *RoleMutation) Hoist() (r bool, exists bool) {
	v := m.hoist
	if v == nil {
		return
	}
	return *v, true
}

// OldHoist returns the old "hoist" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldHoist(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHoist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHoist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHoist: %w", err)
	}
	return oldValue.Hoist, nil
}

// ResetHoist resets all changes to the "hoist" field.
func (m *RoleMutation) ResetHoist() {
	m.hoist = nil
}

// SetPingable sets the "pingable" field.
func (m *RoleMutation) SetPingable(b bool) {
	m.pingable = &b
}

// Pingable returns the value of the "pingable" field in the mutation.
func (m *RoleMutation) Pingable() (r bool, exists bool) {
	v := m.pingable
	if v == nil {
		return
	}
	return *v, true
}

// OldPingable returns the old "pingable" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldPingable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPingable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPingable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPingable: %w", err)
	}
	return oldValue.Pingable, nil
}

// ResetPingable resets all changes to the "pingable" field.
func (m *RoleMutation) ResetPingable() {
	m.pingable = nil
}

// SetPosition sets the "position" field.
func (m *RoleMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *RoleMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *RoleMutation) ResetPosition() {
	m.position = nil
}

// AddGuildIDs adds the "guild" edge to the Guild entity by ids.
func (m *RoleMutation) AddGuildIDs(ids ...uint64) {
	if m.guild == nil {
		m.guild = make(map[uint64]struct{})
	}
	for i := range ids {
		m.guild[ids[i]] = struct{}{}
	}
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *RoleMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *RoleMutation) GuildCleared() bool {
	return m.clearedguild
}

// RemoveGuildIDs removes the "guild" edge to the Guild entity by IDs.
func (m *RoleMutation) RemoveGuildIDs(ids ...uint64) {
	if m.removedguild == nil {
		m.removedguild = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedguild[ids[i]] = struct{}{}
	}
}

// RemovedGuild returns the removed IDs of the "guild" edge to the Guild entity.
func (m *RoleMutation) RemovedGuildIDs() (ids []uint64) {
	for id := range m.removedguild {
		ids = append(ids, id)
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
func (m *RoleMutation) GuildIDs() (ids []uint64) {
	for id := range m.guild {
		ids = append(ids, id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *RoleMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
	m.removedguild = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *RoleMutation) AddMemberIDs(ids ...uint64) {
	if m.members == nil {
		m.members = make(map[uint64]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *RoleMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared returns if the "members" edge to the User entity was cleared.
func (m *RoleMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *RoleMutation) RemoveMemberIDs(ids ...uint64) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *RoleMutation) RemovedMembersIDs() (ids []uint64) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *RoleMutation) MembersIDs() (ids []uint64) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *RoleMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddPermissionNodeIDs adds the "permission_node" edge to the PermissionNode entity by ids.
func (m *RoleMutation) AddPermissionNodeIDs(ids ...int) {
	if m.permission_node == nil {
		m.permission_node = make(map[int]struct{})
	}
	for i := range ids {
		m.permission_node[ids[i]] = struct{}{}
	}
}

// ClearPermissionNode clears the "permission_node" edge to the PermissionNode entity.
func (m *RoleMutation) ClearPermissionNode() {
	m.clearedpermission_node = true
}

// PermissionNodeCleared returns if the "permission_node" edge to the PermissionNode entity was cleared.
func (m *RoleMutation) PermissionNodeCleared() bool {
	return m.clearedpermission_node
}

// RemovePermissionNodeIDs removes the "permission_node" edge to the PermissionNode entity by IDs.
func (m *RoleMutation) RemovePermissionNodeIDs(ids ...int) {
	if m.removedpermission_node == nil {
		m.removedpermission_node = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpermission_node[ids[i]] = struct{}{}
	}
}

// RemovedPermissionNode returns the removed IDs of the "permission_node" edge to the PermissionNode entity.
func (m *RoleMutation) RemovedPermissionNodeIDs() (ids []int) {
	for id := range m.removedpermission_node {
		ids = append(ids, id)
	}
	return
}

// PermissionNodeIDs returns the "permission_node" edge IDs in the mutation.
func (m *RoleMutation) PermissionNodeIDs() (ids []int) {
	for id := range m.permission_node {
		ids = append(ids, id)
	}
	return
}

// ResetPermissionNode resets all changes to the "permission_node" edge.
func (m *RoleMutation) ResetPermissionNode() {
	m.permission_node = nil
	m.clearedpermission_node = false
	m.removedpermission_node = nil
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.color != nil {
		fields = append(fields, role.FieldColor)
	}
	if m.hoist != nil {
		fields = append(fields, role.FieldHoist)
	}
	if m.pingable != nil {
		fields = append(fields, role.FieldPingable)
	}
	if m.position != nil {
		fields = append(fields, role.FieldPosition)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldName:
		return m.Name()
	case role.FieldColor:
		return m.Color()
	case role.FieldHoist:
		return m.Hoist()
	case role.FieldPingable:
		return m.Pingable()
	case role.FieldPosition:
		return m.Position()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldColor:
		return m.OldColor(ctx)
	case role.FieldHoist:
		return m.OldHoist(ctx)
	case role.FieldPingable:
		return m.OldPingable(ctx)
	case role.FieldPosition:
		return m.OldPosition(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldColor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case role.FieldHoist:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHoist(v)
		return nil
	case role.FieldPingable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPingable(v)
		return nil
	case role.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	var fields []string
	if m.addcolor != nil {
		fields = append(fields, role.FieldColor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case role.FieldColor:
		return m.AddedColor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case role.FieldColor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddColor(v)
		return nil
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldColor:
		m.ResetColor()
		return nil
	case role.FieldHoist:
		m.ResetHoist()
		return nil
	case role.FieldPingable:
		m.ResetPingable()
		return nil
	case role.FieldPosition:
		m.ResetPosition()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.guild != nil {
		edges = append(edges, role.EdgeGuild)
	}
	if m.members != nil {
		edges = append(edges, role.EdgeMembers)
	}
	if m.permission_node != nil {
		edges = append(edges, role.EdgePermissionNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeGuild:
		ids := make([]ent.Value, 0, len(m.guild))
		for id := range m.guild {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermissionNode:
		ids := make([]ent.Value, 0, len(m.permission_node))
		for id := range m.permission_node {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedguild != nil {
		edges = append(edges, role.EdgeGuild)
	}
	if m.removedmembers != nil {
		edges = append(edges, role.EdgeMembers)
	}
	if m.removedpermission_node != nil {
		edges = append(edges, role.EdgePermissionNode)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeGuild:
		ids := make([]ent.Value, 0, len(m.removedguild))
		for id := range m.removedguild {
			ids = append(ids, id)
		}
		return ids
	case role.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermissionNode:
		ids := make([]ent.Value, 0, len(m.removedpermission_node))
		for id := range m.removedpermission_node {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedguild {
		edges = append(edges, role.EdgeGuild)
	}
	if m.clearedmembers {
		edges = append(edges, role.EdgeMembers)
	}
	if m.clearedpermission_node {
		edges = append(edges, role.EdgePermissionNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeGuild:
		return m.clearedguild
	case role.EdgeMembers:
		return m.clearedmembers
	case role.EdgePermissionNode:
		return m.clearedpermission_node
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeGuild:
		m.ResetGuild()
		return nil
	case role.EdgeMembers:
		m.ResetMembers()
		return nil
	case role.EdgePermissionNode:
		m.ResetPermissionNode()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	expires       *time.Time
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id string) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *SessionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetExpires sets the "expires" field.
func (m *SessionMutation) SetExpires(t time.Time) {
	m.expires = &t
}

// Expires returns the value of the "expires" field in the mutation.
func (m *SessionMutation) Expires() (r time.Time, exists bool) {
	v := m.expires
	if v == nil {
		return
	}
	return *v, true
}

// OldExpires returns the old "expires" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpires(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpires is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpires requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpires: %w", err)
	}
	return oldValue.Expires, nil
}

// ResetExpires resets all changes to the "expires" field.
func (m *SessionMutation) ResetExpires() {
	m.expires = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.expires != nil {
		fields = append(fields, session.FieldExpires)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldExpires:
		return m.Expires()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldExpires:
		return m.OldExpires(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldExpires:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpires(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldExpires:
		m.ResetExpires()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// TextMessageMutation represents an operation that mutates the TextMessage nodes in the graph.
type TextMessageMutation struct {
	config
	op             Op
	typ            string
	id             *int
	content        *string
	clearedFields  map[string]struct{}
	message        *uint64
	clearedmessage bool
	done           bool
	oldValue       func(context.Context) (*TextMessage, error)
	predicates     []predicate.TextMessage
}

var _ ent.Mutation = (*TextMessageMutation)(nil)

// textmessageOption allows management of the mutation configuration using functional options.
type textmessageOption func(*TextMessageMutation)

// newTextMessageMutation creates new mutation for the TextMessage entity.
func newTextMessageMutation(c config, op Op, opts ...textmessageOption) *TextMessageMutation {
	m := &TextMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeTextMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTextMessageID sets the ID field of the mutation.
func withTextMessageID(id int) textmessageOption {
	return func(m *TextMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *TextMessage
		)
		m.oldValue = func(ctx context.Context) (*TextMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TextMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTextMessage sets the old TextMessage of the mutation.
func withTextMessage(node *TextMessage) textmessageOption {
	return func(m *TextMessageMutation) {
		m.oldValue = func(context.Context) (*TextMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TextMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TextMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *TextMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContent sets the "content" field.
func (m *TextMessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TextMessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the TextMessage entity.
// If the TextMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TextMessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TextMessageMutation) ResetContent() {
	m.content = nil
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *TextMessageMutation) SetMessageID(id uint64) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *TextMessageMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *TextMessageMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *TextMessageMutation) MessageID() (id uint64, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *TextMessageMutation) MessageIDs() (ids []uint64) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *TextMessageMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// Op returns the operation name.
func (m *TextMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TextMessage).
func (m *TextMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TextMessageMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.content != nil {
		fields = append(fields, textmessage.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TextMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case textmessage.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TextMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case textmessage.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown TextMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TextMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case textmessage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown TextMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TextMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TextMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TextMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TextMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TextMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TextMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TextMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TextMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TextMessageMutation) ResetField(name string) error {
	switch name {
	case textmessage.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown TextMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TextMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.message != nil {
		edges = append(edges, textmessage.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TextMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case textmessage.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TextMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TextMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TextMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessage {
		edges = append(edges, textmessage.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TextMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case textmessage.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TextMessageMutation) ClearEdge(name string) error {
	switch name {
	case textmessage.EdgeMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown TextMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TextMessageMutation) ResetEdge(name string) error {
	switch name {
	case textmessage.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown TextMessage edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	clearedFields       map[string]struct{}
	local_user          *int
	clearedlocal_user   bool
	foreign_user        *int
	clearedforeign_user bool
	profile             *int
	clearedprofile      bool
	metadata            map[string]struct{}
	removedmetadata     map[string]struct{}
	clearedmetadata     bool
	sessions            map[string]struct{}
	removedsessions     map[string]struct{}
	clearedsessions     bool
	message             map[uint64]struct{}
	removedmessage      map[uint64]struct{}
	clearedmessage      bool
	guild               map[uint64]struct{}
	removedguild        map[uint64]struct{}
	clearedguild        bool
	emotepack           map[uint64]struct{}
	removedemotepack    map[uint64]struct{}
	clearedemotepack    bool
	createdpacks        map[uint64]struct{}
	removedcreatedpacks map[uint64]struct{}
	clearedcreatedpacks bool
	listentry           map[uint64]struct{}
	removedlistentry    map[uint64]struct{}
	clearedlistentry    bool
	role                map[uint64]struct{}
	removedrole         map[uint64]struct{}
	clearedrole         bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLocalUserID sets the "local_user" edge to the LocalUser entity by id.
func (m *UserMutation) SetLocalUserID(id int) {
	m.local_user = &id
}

// ClearLocalUser clears the "local_user" edge to the LocalUser entity.
func (m *UserMutation) ClearLocalUser() {
	m.clearedlocal_user = true
}

// LocalUserCleared returns if the "local_user" edge to the LocalUser entity was cleared.
func (m *UserMutation) LocalUserCleared() bool {
	return m.clearedlocal_user
}

// LocalUserID returns the "local_user" edge ID in the mutation.
func (m *UserMutation) LocalUserID() (id int, exists bool) {
	if m.local_user != nil {
		return *m.local_user, true
	}
	return
}

// LocalUserIDs returns the "local_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocalUserID instead. It exists only for internal usage by the builders.
func (m *UserMutation) LocalUserIDs() (ids []int) {
	if id := m.local_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocalUser resets all changes to the "local_user" edge.
func (m *UserMutation) ResetLocalUser() {
	m.local_user = nil
	m.clearedlocal_user = false
}

// SetForeignUserID sets the "foreign_user" edge to the ForeignUser entity by id.
func (m *UserMutation) SetForeignUserID(id int) {
	m.foreign_user = &id
}

// ClearForeignUser clears the "foreign_user" edge to the ForeignUser entity.
func (m *UserMutation) ClearForeignUser() {
	m.clearedforeign_user = true
}

// ForeignUserCleared returns if the "foreign_user" edge to the ForeignUser entity was cleared.
func (m *UserMutation) ForeignUserCleared() bool {
	return m.clearedforeign_user
}

// ForeignUserID returns the "foreign_user" edge ID in the mutation.
func (m *UserMutation) ForeignUserID() (id int, exists bool) {
	if m.foreign_user != nil {
		return *m.foreign_user, true
	}
	return
}

// ForeignUserIDs returns the "foreign_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ForeignUserID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ForeignUserIDs() (ids []int) {
	if id := m.foreign_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetForeignUser resets all changes to the "foreign_user" edge.
func (m *UserMutation) ResetForeignUser() {
	m.foreign_user = nil
	m.clearedforeign_user = false
}

// SetProfileID sets the "profile" edge to the Profile entity by id.
func (m *UserMutation) SetProfileID(id int) {
	m.profile = &id
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (m *UserMutation) ClearProfile() {
	m.clearedprofile = true
}

// ProfileCleared returns if the "profile" edge to the Profile entity was cleared.
func (m *UserMutation) ProfileCleared() bool {
	return m.clearedprofile
}

// ProfileID returns the "profile" edge ID in the mutation.
func (m *UserMutation) ProfileID() (id int, exists bool) {
	if m.profile != nil {
		return *m.profile, true
	}
	return
}

// ProfileIDs returns the "profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProfileIDs() (ids []int) {
	if id := m.profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile resets all changes to the "profile" edge.
func (m *UserMutation) ResetProfile() {
	m.profile = nil
	m.clearedprofile = false
}

// AddMetadatumIDs adds the "metadata" edge to the UserMeta entity by ids.
func (m *UserMutation) AddMetadatumIDs(ids ...string) {
	if m.metadata == nil {
		m.metadata = make(map[string]struct{})
	}
	for i := range ids {
		m.metadata[ids[i]] = struct{}{}
	}
}

// ClearMetadata clears the "metadata" edge to the UserMeta entity.
func (m *UserMutation) ClearMetadata() {
	m.clearedmetadata = true
}

// MetadataCleared returns if the "metadata" edge to the UserMeta entity was cleared.
func (m *UserMutation) MetadataCleared() bool {
	return m.clearedmetadata
}

// RemoveMetadatumIDs removes the "metadata" edge to the UserMeta entity by IDs.
func (m *UserMutation) RemoveMetadatumIDs(ids ...string) {
	if m.removedmetadata == nil {
		m.removedmetadata = make(map[string]struct{})
	}
	for i := range ids {
		m.removedmetadata[ids[i]] = struct{}{}
	}
}

// RemovedMetadata returns the removed IDs of the "metadata" edge to the UserMeta entity.
func (m *UserMutation) RemovedMetadataIDs() (ids []string) {
	for id := range m.removedmetadata {
		ids = append(ids, id)
	}
	return
}

// MetadataIDs returns the "metadata" edge IDs in the mutation.
func (m *UserMutation) MetadataIDs() (ids []string) {
	for id := range m.metadata {
		ids = append(ids, id)
	}
	return
}

// ResetMetadata resets all changes to the "metadata" edge.
func (m *UserMutation) ResetMetadata() {
	m.metadata = nil
	m.clearedmetadata = false
	m.removedmetadata = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...string) {
	if m.sessions == nil {
		m.sessions = make(map[string]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared returns if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...string) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[string]struct{})
	}
	for i := range ids {
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []string) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []string) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddMessageIDs adds the "message" edge to the Message entity by ids.
func (m *UserMutation) AddMessageIDs(ids ...uint64) {
	if m.message == nil {
		m.message = make(map[uint64]struct{})
	}
	for i := range ids {
		m.message[ids[i]] = struct{}{}
	}
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *UserMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *UserMutation) MessageCleared() bool {
	return m.clearedmessage
}

// RemoveMessageIDs removes the "message" edge to the Message entity by IDs.
func (m *UserMutation) RemoveMessageIDs(ids ...uint64) {
	if m.removedmessage == nil {
		m.removedmessage = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedmessage[ids[i]] = struct{}{}
	}
}

// RemovedMessage returns the removed IDs of the "message" edge to the Message entity.
func (m *UserMutation) RemovedMessageIDs() (ids []uint64) {
	for id := range m.removedmessage {
		ids = append(ids, id)
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
func (m *UserMutation) MessageIDs() (ids []uint64) {
	for id := range m.message {
		ids = append(ids, id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *UserMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
	m.removedmessage = nil
}

// AddGuildIDs adds the "guild" edge to the Guild entity by ids.
func (m *UserMutation) AddGuildIDs(ids ...uint64) {
	if m.guild == nil {
		m.guild = make(map[uint64]struct{})
	}
	for i := range ids {
		m.guild[ids[i]] = struct{}{}
	}
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *UserMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *UserMutation) GuildCleared() bool {
	return m.clearedguild
}

// RemoveGuildIDs removes the "guild" edge to the Guild entity by IDs.
func (m *UserMutation) RemoveGuildIDs(ids ...uint64) {
	if m.removedguild == nil {
		m.removedguild = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedguild[ids[i]] = struct{}{}
	}
}

// RemovedGuild returns the removed IDs of the "guild" edge to the Guild entity.
func (m *UserMutation) RemovedGuildIDs() (ids []uint64) {
	for id := range m.removedguild {
		ids = append(ids, id)
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
func (m *UserMutation) GuildIDs() (ids []uint64) {
	for id := range m.guild {
		ids = append(ids, id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *UserMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
	m.removedguild = nil
}

// AddEmotepackIDs adds the "emotepack" edge to the EmotePack entity by ids.
func (m *UserMutation) AddEmotepackIDs(ids ...uint64) {
	if m.emotepack == nil {
		m.emotepack = make(map[uint64]struct{})
	}
	for i := range ids {
		m.emotepack[ids[i]] = struct{}{}
	}
}

// ClearEmotepack clears the "emotepack" edge to the EmotePack entity.
func (m *UserMutation) ClearEmotepack() {
	m.clearedemotepack = true
}

// EmotepackCleared returns if the "emotepack" edge to the EmotePack entity was cleared.
func (m *UserMutation) EmotepackCleared() bool {
	return m.clearedemotepack
}

// RemoveEmotepackIDs removes the "emotepack" edge to the EmotePack entity by IDs.
func (m *UserMutation) RemoveEmotepackIDs(ids ...uint64) {
	if m.removedemotepack == nil {
		m.removedemotepack = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedemotepack[ids[i]] = struct{}{}
	}
}

// RemovedEmotepack returns the removed IDs of the "emotepack" edge to the EmotePack entity.
func (m *UserMutation) RemovedEmotepackIDs() (ids []uint64) {
	for id := range m.removedemotepack {
		ids = append(ids, id)
	}
	return
}

// EmotepackIDs returns the "emotepack" edge IDs in the mutation.
func (m *UserMutation) EmotepackIDs() (ids []uint64) {
	for id := range m.emotepack {
		ids = append(ids, id)
	}
	return
}

// ResetEmotepack resets all changes to the "emotepack" edge.
func (m *UserMutation) ResetEmotepack() {
	m.emotepack = nil
	m.clearedemotepack = false
	m.removedemotepack = nil
}

// AddCreatedpackIDs adds the "createdpacks" edge to the EmotePack entity by ids.
func (m *UserMutation) AddCreatedpackIDs(ids ...uint64) {
	if m.createdpacks == nil {
		m.createdpacks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.createdpacks[ids[i]] = struct{}{}
	}
}

// ClearCreatedpacks clears the "createdpacks" edge to the EmotePack entity.
func (m *UserMutation) ClearCreatedpacks() {
	m.clearedcreatedpacks = true
}

// CreatedpacksCleared returns if the "createdpacks" edge to the EmotePack entity was cleared.
func (m *UserMutation) CreatedpacksCleared() bool {
	return m.clearedcreatedpacks
}

// RemoveCreatedpackIDs removes the "createdpacks" edge to the EmotePack entity by IDs.
func (m *UserMutation) RemoveCreatedpackIDs(ids ...uint64) {
	if m.removedcreatedpacks == nil {
		m.removedcreatedpacks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedcreatedpacks[ids[i]] = struct{}{}
	}
}

// RemovedCreatedpacks returns the removed IDs of the "createdpacks" edge to the EmotePack entity.
func (m *UserMutation) RemovedCreatedpacksIDs() (ids []uint64) {
	for id := range m.removedcreatedpacks {
		ids = append(ids, id)
	}
	return
}

// CreatedpacksIDs returns the "createdpacks" edge IDs in the mutation.
func (m *UserMutation) CreatedpacksIDs() (ids []uint64) {
	for id := range m.createdpacks {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedpacks resets all changes to the "createdpacks" edge.
func (m *UserMutation) ResetCreatedpacks() {
	m.createdpacks = nil
	m.clearedcreatedpacks = false
	m.removedcreatedpacks = nil
}

// AddListentryIDs adds the "listentry" edge to the GuildListEntry entity by ids.
func (m *UserMutation) AddListentryIDs(ids ...uint64) {
	if m.listentry == nil {
		m.listentry = make(map[uint64]struct{})
	}
	for i := range ids {
		m.listentry[ids[i]] = struct{}{}
	}
}

// ClearListentry clears the "listentry" edge to the GuildListEntry entity.
func (m *UserMutation) ClearListentry() {
	m.clearedlistentry = true
}

// ListentryCleared returns if the "listentry" edge to the GuildListEntry entity was cleared.
func (m *UserMutation) ListentryCleared() bool {
	return m.clearedlistentry
}

// RemoveListentryIDs removes the "listentry" edge to the GuildListEntry entity by IDs.
func (m *UserMutation) RemoveListentryIDs(ids ...uint64) {
	if m.removedlistentry == nil {
		m.removedlistentry = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedlistentry[ids[i]] = struct{}{}
	}
}

// RemovedListentry returns the removed IDs of the "listentry" edge to the GuildListEntry entity.
func (m *UserMutation) RemovedListentryIDs() (ids []uint64) {
	for id := range m.removedlistentry {
		ids = append(ids, id)
	}
	return
}

// ListentryIDs returns the "listentry" edge IDs in the mutation.
func (m *UserMutation) ListentryIDs() (ids []uint64) {
	for id := range m.listentry {
		ids = append(ids, id)
	}
	return
}

// ResetListentry resets all changes to the "listentry" edge.
func (m *UserMutation) ResetListentry() {
	m.listentry = nil
	m.clearedlistentry = false
	m.removedlistentry = nil
}

// AddRoleIDs adds the "role" edge to the Role entity by ids.
func (m *UserMutation) AddRoleIDs(ids ...uint64) {
	if m.role == nil {
		m.role = make(map[uint64]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the Role entity.
func (m *UserMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the "role" edge to the Role entity was cleared.
func (m *UserMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the Role entity by IDs.
func (m *UserMutation) RemoveRoleIDs(ids ...uint64) {
	if m.removedrole == nil {
		m.removedrole = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the Role entity.
func (m *UserMutation) RemovedRoleIDs() (ids []uint64) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *UserMutation) RoleIDs() (ids []uint64) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 11)
	if m.local_user != nil {
		edges = append(edges, user.EdgeLocalUser)
	}
	if m.foreign_user != nil {
		edges = append(edges, user.EdgeForeignUser)
	}
	if m.profile != nil {
		edges = append(edges, user.EdgeProfile)
	}
	if m.metadata != nil {
		edges = append(edges, user.EdgeMetadata)
	}
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.message != nil {
		edges = append(edges, user.EdgeMessage)
	}
	if m.guild != nil {
		edges = append(edges, user.EdgeGuild)
	}
	if m.emotepack != nil {
		edges = append(edges, user.EdgeEmotepack)
	}
	if m.createdpacks != nil {
		edges = append(edges, user.EdgeCreatedpacks)
	}
	if m.listentry != nil {
		edges = append(edges, user.EdgeListentry)
	}
	if m.role != nil {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLocalUser:
		if id := m.local_user; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeForeignUser:
		if id := m.foreign_user; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeProfile:
		if id := m.profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeMetadata:
		ids := make([]ent.Value, 0, len(m.metadata))
		for id := range m.metadata {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.message))
		for id := range m.message {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGuild:
		ids := make([]ent.Value, 0, len(m.guild))
		for id := range m.guild {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmotepack:
		ids := make([]ent.Value, 0, len(m.emotepack))
		for id := range m.emotepack {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedpacks:
		ids := make([]ent.Value, 0, len(m.createdpacks))
		for id := range m.createdpacks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeListentry:
		ids := make([]ent.Value, 0, len(m.listentry))
		for id := range m.listentry {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 11)
	if m.removedmetadata != nil {
		edges = append(edges, user.EdgeMetadata)
	}
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedmessage != nil {
		edges = append(edges, user.EdgeMessage)
	}
	if m.removedguild != nil {
		edges = append(edges, user.EdgeGuild)
	}
	if m.removedemotepack != nil {
		edges = append(edges, user.EdgeEmotepack)
	}
	if m.removedcreatedpacks != nil {
		edges = append(edges, user.EdgeCreatedpacks)
	}
	if m.removedlistentry != nil {
		edges = append(edges, user.EdgeListentry)
	}
	if m.removedrole != nil {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMetadata:
		ids := make([]ent.Value, 0, len(m.removedmetadata))
		for id := range m.removedmetadata {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.removedmessage))
		for id := range m.removedmessage {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGuild:
		ids := make([]ent.Value, 0, len(m.removedguild))
		for id := range m.removedguild {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmotepack:
		ids := make([]ent.Value, 0, len(m.removedemotepack))
		for id := range m.removedemotepack {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedpacks:
		ids := make([]ent.Value, 0, len(m.removedcreatedpacks))
		for id := range m.removedcreatedpacks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeListentry:
		ids := make([]ent.Value, 0, len(m.removedlistentry))
		for id := range m.removedlistentry {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 11)
	if m.clearedlocal_user {
		edges = append(edges, user.EdgeLocalUser)
	}
	if m.clearedforeign_user {
		edges = append(edges, user.EdgeForeignUser)
	}
	if m.clearedprofile {
		edges = append(edges, user.EdgeProfile)
	}
	if m.clearedmetadata {
		edges = append(edges, user.EdgeMetadata)
	}
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedmessage {
		edges = append(edges, user.EdgeMessage)
	}
	if m.clearedguild {
		edges = append(edges, user.EdgeGuild)
	}
	if m.clearedemotepack {
		edges = append(edges, user.EdgeEmotepack)
	}
	if m.clearedcreatedpacks {
		edges = append(edges, user.EdgeCreatedpacks)
	}
	if m.clearedlistentry {
		edges = append(edges, user.EdgeListentry)
	}
	if m.clearedrole {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeLocalUser:
		return m.clearedlocal_user
	case user.EdgeForeignUser:
		return m.clearedforeign_user
	case user.EdgeProfile:
		return m.clearedprofile
	case user.EdgeMetadata:
		return m.clearedmetadata
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeMessage:
		return m.clearedmessage
	case user.EdgeGuild:
		return m.clearedguild
	case user.EdgeEmotepack:
		return m.clearedemotepack
	case user.EdgeCreatedpacks:
		return m.clearedcreatedpacks
	case user.EdgeListentry:
		return m.clearedlistentry
	case user.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeLocalUser:
		m.ClearLocalUser()
		return nil
	case user.EdgeForeignUser:
		m.ClearForeignUser()
		return nil
	case user.EdgeProfile:
		m.ClearProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeLocalUser:
		m.ResetLocalUser()
		return nil
	case user.EdgeForeignUser:
		m.ResetForeignUser()
		return nil
	case user.EdgeProfile:
		m.ResetProfile()
		return nil
	case user.EdgeMetadata:
		m.ResetMetadata()
		return nil
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeMessage:
		m.ResetMessage()
		return nil
	case user.EdgeGuild:
		m.ResetGuild()
		return nil
	case user.EdgeEmotepack:
		m.ResetEmotepack()
		return nil
	case user.EdgeCreatedpacks:
		m.ResetCreatedpacks()
		return nil
	case user.EdgeListentry:
		m.ResetListentry()
		return nil
	case user.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserMetaMutation represents an operation that mutates the UserMeta nodes in the graph.
type UserMetaMutation struct {
	config
	op            Op
	typ           string
	id            *string
	meta          *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*UserMeta, error)
	predicates    []predicate.UserMeta
}

var _ ent.Mutation = (*UserMetaMutation)(nil)

// usermetaOption allows management of the mutation configuration using functional options.
type usermetaOption func(*UserMetaMutation)

// newUserMetaMutation creates new mutation for the UserMeta entity.
func newUserMetaMutation(c config, op Op, opts ...usermetaOption) *UserMetaMutation {
	m := &UserMetaMutation{
		config:        c,
		op:            op,
		typ:           TypeUserMeta,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserMetaID sets the ID field of the mutation.
func withUserMetaID(id string) usermetaOption {
	return func(m *UserMetaMutation) {
		var (
			err   error
			once  sync.Once
			value *UserMeta
		)
		m.oldValue = func(ctx context.Context) (*UserMeta, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserMeta.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserMeta sets the old UserMeta of the mutation.
func withUserMeta(node *UserMeta) usermetaOption {
	return func(m *UserMetaMutation) {
		m.oldValue = func(context.Context) (*UserMeta, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMetaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMetaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserMeta entities.
func (m *UserMetaMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMetaMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMeta sets the "meta" field.
func (m *UserMetaMutation) SetMeta(s string) {
	m.meta = &s
}

// Meta returns the value of the "meta" field in the mutation.
func (m *UserMetaMutation) Meta() (r string, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the UserMeta entity.
// If the UserMeta object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMetaMutation) OldMeta(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ResetMeta resets all changes to the "meta" field.
func (m *UserMetaMutation) ResetMeta() {
	m.meta = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserMetaMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserMetaMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *UserMetaMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserMetaMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserMetaMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserMetaMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *UserMetaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserMeta).
func (m *UserMetaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMetaMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.meta != nil {
		fields = append(fields, usermeta.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMetaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usermeta.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMetaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usermeta.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown UserMeta field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMetaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usermeta.FieldMeta:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown UserMeta field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMetaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMetaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMetaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserMeta numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMetaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMetaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMetaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserMeta nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMetaMutation) ResetField(name string) error {
	switch name {
	case usermeta.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown UserMeta field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMetaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, usermeta.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMetaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usermeta.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMetaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMetaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMetaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, usermeta.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMetaMutation) EdgeCleared(name string) bool {
	switch name {
	case usermeta.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMetaMutation) ClearEdge(name string) error {
	switch name {
	case usermeta.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserMeta unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMetaMutation) ResetEdge(name string) error {
	switch name {
	case usermeta.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserMeta edge %s", name)
}
