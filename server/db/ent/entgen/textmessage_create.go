// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/textmessage"
)

// TextMessageCreate is the builder for creating a TextMessage entity.
type TextMessageCreate struct {
	config
	mutation *TextMessageMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (tmc *TextMessageCreate) SetContent(s string) *TextMessageCreate {
	tmc.mutation.SetContent(s)
	return tmc
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (tmc *TextMessageCreate) SetMessageID(id uint64) *TextMessageCreate {
	tmc.mutation.SetMessageID(id)
	return tmc
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (tmc *TextMessageCreate) SetNillableMessageID(id *uint64) *TextMessageCreate {
	if id != nil {
		tmc = tmc.SetMessageID(*id)
	}
	return tmc
}

// SetMessage sets the "message" edge to the Message entity.
func (tmc *TextMessageCreate) SetMessage(m *Message) *TextMessageCreate {
	return tmc.SetMessageID(m.ID)
}

// Mutation returns the TextMessageMutation object of the builder.
func (tmc *TextMessageCreate) Mutation() *TextMessageMutation {
	return tmc.mutation
}

// Save creates the TextMessage in the database.
func (tmc *TextMessageCreate) Save(ctx context.Context) (*TextMessage, error) {
	var (
		err  error
		node *TextMessage
	)
	if len(tmc.hooks) == 0 {
		if err = tmc.check(); err != nil {
			return nil, err
		}
		node, err = tmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TextMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tmc.check(); err != nil {
				return nil, err
			}
			tmc.mutation = mutation
			node, err = tmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tmc.hooks) - 1; i >= 0; i-- {
			mut = tmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TextMessageCreate) SaveX(ctx context.Context) *TextMessage {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TextMessageCreate) check() error {
	if _, ok := tmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New("entgen: missing required field \"content\"")}
	}
	return nil
}

func (tmc *TextMessageCreate) sqlSave(ctx context.Context) (*TextMessage, error) {
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tmc *TextMessageCreate) createSpec() (*TextMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &TextMessage{config: tmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: textmessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: textmessage.FieldID,
			},
		}
	)
	if value, ok := tmc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: textmessage.FieldContent,
		})
		_node.Content = value
	}
	if nodes := tmc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   textmessage.MessageTable,
			Columns: []string{textmessage.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_text_message = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TextMessageCreateBulk is the builder for creating many TextMessage entities in bulk.
type TextMessageCreateBulk struct {
	config
	builders []*TextMessageCreate
}

// Save creates the TextMessage entities in the database.
func (tmcb *TextMessageCreateBulk) Save(ctx context.Context) ([]*TextMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TextMessage, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TextMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TextMessageCreateBulk) SaveX(ctx context.Context) []*TextMessage {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
