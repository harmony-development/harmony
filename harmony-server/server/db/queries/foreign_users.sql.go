// Code generated by sqlc. DO NOT EDIT.
// source: foreign_users.sql

package queries

import (
	"context"
	"database/sql"
)

const addForeignUser = `-- name: AddForeignUser :exec
INSERT INTO Foreign_Users
    (User_ID, Home_Server, Username, Avatar)
VALUES ($1, $2, $3, $4)
`

type AddForeignUserParams struct {
	UserID     uint64 `json:"user_id"`
	HomeServer string `json:"home_server"`
	Username   string `json:"username"`
	Avatar     string `json:"avatar"`
}

func (q *Queries) AddForeignUser(ctx context.Context, arg AddForeignUserParams) error {
	_, err := q.exec(ctx, q.addForeignUserStmt, addForeignUser,
		arg.UserID,
		arg.HomeServer,
		arg.Username,
		arg.Avatar,
	)
	return err
}

const getForeignUser = `-- name: GetForeignUser :one
SELECT User_ID, Email, Username, Avatar, Password
FROM Users
WHERE Email = $1
`

type GetForeignUserRow struct {
	UserID   uint64         `json:"user_id"`
	Email    string         `json:"email"`
	Username string         `json:"username"`
	Avatar   sql.NullString `json:"avatar"`
	Password []byte         `json:"password"`
}

func (q *Queries) GetForeignUser(ctx context.Context, email string) (GetForeignUserRow, error) {
	row := q.queryRow(ctx, q.getForeignUserStmt, getForeignUser, email)
	var i GetForeignUserRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.Avatar,
		&i.Password,
	)
	return i, err
}
