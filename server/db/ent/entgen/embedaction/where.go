// Code generated by entc, DO NOT EDIT.

package embedaction

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ActionID applies equality check predicate on the "action_id" field. It's identical to ActionIDEQ.
func ActionID(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionID), v))
	})
}

// ActionType applies equality check predicate on the "action_type" field. It's identical to ActionTypeEQ.
func ActionType(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionType), v))
	})
}

// ActionIDEQ applies the EQ predicate on the "action_id" field.
func ActionIDEQ(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionID), v))
	})
}

// ActionIDNEQ applies the NEQ predicate on the "action_id" field.
func ActionIDNEQ(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActionID), v))
	})
}

// ActionIDIn applies the In predicate on the "action_id" field.
func ActionIDIn(vs ...string) predicate.EmbedAction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmbedAction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActionID), v...))
	})
}

// ActionIDNotIn applies the NotIn predicate on the "action_id" field.
func ActionIDNotIn(vs ...string) predicate.EmbedAction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmbedAction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActionID), v...))
	})
}

// ActionIDGT applies the GT predicate on the "action_id" field.
func ActionIDGT(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActionID), v))
	})
}

// ActionIDGTE applies the GTE predicate on the "action_id" field.
func ActionIDGTE(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActionID), v))
	})
}

// ActionIDLT applies the LT predicate on the "action_id" field.
func ActionIDLT(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActionID), v))
	})
}

// ActionIDLTE applies the LTE predicate on the "action_id" field.
func ActionIDLTE(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActionID), v))
	})
}

// ActionIDContains applies the Contains predicate on the "action_id" field.
func ActionIDContains(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActionID), v))
	})
}

// ActionIDHasPrefix applies the HasPrefix predicate on the "action_id" field.
func ActionIDHasPrefix(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActionID), v))
	})
}

// ActionIDHasSuffix applies the HasSuffix predicate on the "action_id" field.
func ActionIDHasSuffix(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActionID), v))
	})
}

// ActionIDEqualFold applies the EqualFold predicate on the "action_id" field.
func ActionIDEqualFold(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActionID), v))
	})
}

// ActionIDContainsFold applies the ContainsFold predicate on the "action_id" field.
func ActionIDContainsFold(v string) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActionID), v))
	})
}

// ActionTypeEQ applies the EQ predicate on the "action_type" field.
func ActionTypeEQ(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActionType), v))
	})
}

// ActionTypeNEQ applies the NEQ predicate on the "action_type" field.
func ActionTypeNEQ(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActionType), v))
	})
}

// ActionTypeIn applies the In predicate on the "action_type" field.
func ActionTypeIn(vs ...int8) predicate.EmbedAction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmbedAction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActionType), v...))
	})
}

// ActionTypeNotIn applies the NotIn predicate on the "action_type" field.
func ActionTypeNotIn(vs ...int8) predicate.EmbedAction {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EmbedAction(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActionType), v...))
	})
}

// ActionTypeGT applies the GT predicate on the "action_type" field.
func ActionTypeGT(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActionType), v))
	})
}

// ActionTypeGTE applies the GTE predicate on the "action_type" field.
func ActionTypeGTE(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActionType), v))
	})
}

// ActionTypeLT applies the LT predicate on the "action_type" field.
func ActionTypeLT(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActionType), v))
	})
}

// ActionTypeLTE applies the LTE predicate on the "action_type" field.
func ActionTypeLTE(v int8) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActionType), v))
	})
}

// HasButton applies the HasEdge predicate on the "button" edge.
func HasButton() predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ButtonTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ButtonTable, ButtonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasButtonWith applies the HasEdge predicate on the "button" edge with a given conditions (other predicates).
func HasButtonWith(preds ...predicate.ActionButton) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ButtonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ButtonTable, ButtonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDropdown applies the HasEdge predicate on the "dropdown" edge.
func HasDropdown() predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DropdownTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DropdownTable, DropdownColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDropdownWith applies the HasEdge predicate on the "dropdown" edge with a given conditions (other predicates).
func HasDropdownWith(preds ...predicate.ActionDropdown) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DropdownInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DropdownTable, DropdownColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInput applies the HasEdge predicate on the "input" edge.
func HasInput() predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InputTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InputTable, InputColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInputWith applies the HasEdge predicate on the "input" edge with a given conditions (other predicates).
func HasInputWith(preds ...predicate.ActionInput) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InputInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InputTable, InputColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmbedAction) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmbedAction) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmbedAction) predicate.EmbedAction {
	return predicate.EmbedAction(func(s *sql.Selector) {
		p(s.Not())
	})
}
