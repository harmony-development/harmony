// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// EmotePackQuery is the builder for querying EmotePack entities.
type EmotePackQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EmotePack
	// eager-loading edges.
	withUser  *UserQuery
	withOwner *UserQuery
	withEmote *EmoteQuery
	withFKs   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmotePackQuery builder.
func (epq *EmotePackQuery) Where(ps ...predicate.EmotePack) *EmotePackQuery {
	epq.predicates = append(epq.predicates, ps...)
	return epq
}

// Limit adds a limit step to the query.
func (epq *EmotePackQuery) Limit(limit int) *EmotePackQuery {
	epq.limit = &limit
	return epq
}

// Offset adds an offset step to the query.
func (epq *EmotePackQuery) Offset(offset int) *EmotePackQuery {
	epq.offset = &offset
	return epq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (epq *EmotePackQuery) Unique(unique bool) *EmotePackQuery {
	epq.unique = &unique
	return epq
}

// Order adds an order step to the query.
func (epq *EmotePackQuery) Order(o ...OrderFunc) *EmotePackQuery {
	epq.order = append(epq.order, o...)
	return epq
}

// QueryUser chains the current query on the "user" edge.
func (epq *EmotePackQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emotepack.Table, emotepack.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emotepack.UserTable, emotepack.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (epq *EmotePackQuery) QueryOwner() *UserQuery {
	query := &UserQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emotepack.Table, emotepack.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emotepack.OwnerTable, emotepack.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmote chains the current query on the "emote" edge.
func (epq *EmotePackQuery) QueryEmote() *EmoteQuery {
	query := &EmoteQuery{config: epq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emotepack.Table, emotepack.FieldID, selector),
			sqlgraph.To(emote.Table, emote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, emotepack.EmoteTable, emotepack.EmoteColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmotePack entity from the query.
// Returns a *NotFoundError when no EmotePack was found.
func (epq *EmotePackQuery) First(ctx context.Context) (*EmotePack, error) {
	nodes, err := epq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{emotepack.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (epq *EmotePackQuery) FirstX(ctx context.Context) *EmotePack {
	node, err := epq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmotePack ID from the query.
// Returns a *NotFoundError when no EmotePack ID was found.
func (epq *EmotePackQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = epq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{emotepack.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (epq *EmotePackQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := epq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmotePack entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one EmotePack entity is not found.
// Returns a *NotFoundError when no EmotePack entities are found.
func (epq *EmotePackQuery) Only(ctx context.Context) (*EmotePack, error) {
	nodes, err := epq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{emotepack.Label}
	default:
		return nil, &NotSingularError{emotepack.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (epq *EmotePackQuery) OnlyX(ctx context.Context) *EmotePack {
	node, err := epq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmotePack ID in the query.
// Returns a *NotSingularError when exactly one EmotePack ID is not found.
// Returns a *NotFoundError when no entities are found.
func (epq *EmotePackQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = epq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = &NotSingularError{emotepack.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (epq *EmotePackQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := epq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmotePacks.
func (epq *EmotePackQuery) All(ctx context.Context) ([]*EmotePack, error) {
	if err := epq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return epq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (epq *EmotePackQuery) AllX(ctx context.Context) []*EmotePack {
	nodes, err := epq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmotePack IDs.
func (epq *EmotePackQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := epq.Select(emotepack.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (epq *EmotePackQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := epq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (epq *EmotePackQuery) Count(ctx context.Context) (int, error) {
	if err := epq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return epq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (epq *EmotePackQuery) CountX(ctx context.Context) int {
	count, err := epq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (epq *EmotePackQuery) Exist(ctx context.Context) (bool, error) {
	if err := epq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return epq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (epq *EmotePackQuery) ExistX(ctx context.Context) bool {
	exist, err := epq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmotePackQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (epq *EmotePackQuery) Clone() *EmotePackQuery {
	if epq == nil {
		return nil
	}
	return &EmotePackQuery{
		config:     epq.config,
		limit:      epq.limit,
		offset:     epq.offset,
		order:      append([]OrderFunc{}, epq.order...),
		predicates: append([]predicate.EmotePack{}, epq.predicates...),
		withUser:   epq.withUser.Clone(),
		withOwner:  epq.withOwner.Clone(),
		withEmote:  epq.withEmote.Clone(),
		// clone intermediate query.
		sql:  epq.sql.Clone(),
		path: epq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EmotePackQuery) WithUser(opts ...func(*UserQuery)) *EmotePackQuery {
	query := &UserQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withUser = query
	return epq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EmotePackQuery) WithOwner(opts ...func(*UserQuery)) *EmotePackQuery {
	query := &UserQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withOwner = query
	return epq
}

// WithEmote tells the query-builder to eager-load the nodes that are connected to
// the "emote" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EmotePackQuery) WithEmote(opts ...func(*EmoteQuery)) *EmotePackQuery {
	query := &EmoteQuery{config: epq.config}
	for _, opt := range opts {
		opt(query)
	}
	epq.withEmote = query
	return epq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmotePack.Query().
//		GroupBy(emotepack.FieldName).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
//
func (epq *EmotePackQuery) GroupBy(field string, fields ...string) *EmotePackGroupBy {
	group := &EmotePackGroupBy{config: epq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return epq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.EmotePack.Query().
//		Select(emotepack.FieldName).
//		Scan(ctx, &v)
//
func (epq *EmotePackQuery) Select(field string, fields ...string) *EmotePackSelect {
	epq.fields = append([]string{field}, fields...)
	return &EmotePackSelect{EmotePackQuery: epq}
}

func (epq *EmotePackQuery) prepareQuery(ctx context.Context) error {
	for _, f := range epq.fields {
		if !emotepack.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if epq.path != nil {
		prev, err := epq.path(ctx)
		if err != nil {
			return err
		}
		epq.sql = prev
	}
	return nil
}

func (epq *EmotePackQuery) sqlAll(ctx context.Context) ([]*EmotePack, error) {
	var (
		nodes       = []*EmotePack{}
		withFKs     = epq.withFKs
		_spec       = epq.querySpec()
		loadedTypes = [3]bool{
			epq.withUser != nil,
			epq.withOwner != nil,
			epq.withEmote != nil,
		}
	)
	if epq.withUser != nil || epq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, emotepack.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &EmotePack{config: epq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("entgen: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, epq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := epq.withUser; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EmotePack)
		for i := range nodes {
			if nodes[i].user_emotepack == nil {
				continue
			}
			fk := *nodes[i].user_emotepack
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_emotepack" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := epq.withOwner; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EmotePack)
		for i := range nodes {
			if nodes[i].user_createdpacks == nil {
				continue
			}
			fk := *nodes[i].user_createdpacks
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_createdpacks" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Owner = n
			}
		}
	}

	if query := epq.withEmote; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*EmotePack)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Emote = []*Emote{}
		}
		query.withFKs = true
		query.Where(predicate.Emote(func(s *sql.Selector) {
			s.Where(sql.InValues(emotepack.EmoteColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.emote_pack_emote
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "emote_pack_emote" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "emote_pack_emote" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Emote = append(node.Edges.Emote, n)
		}
	}

	return nodes, nil
}

func (epq *EmotePackQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := epq.querySpec()
	return sqlgraph.CountNodes(ctx, epq.driver, _spec)
}

func (epq *EmotePackQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := epq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("entgen: check existence: %w", err)
	}
	return n > 0, nil
}

func (epq *EmotePackQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emotepack.Table,
			Columns: emotepack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: emotepack.FieldID,
			},
		},
		From:   epq.sql,
		Unique: true,
	}
	if unique := epq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := epq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emotepack.FieldID)
		for i := range fields {
			if fields[i] != emotepack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := epq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := epq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := epq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := epq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (epq *EmotePackQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(epq.driver.Dialect())
	t1 := builder.Table(emotepack.Table)
	selector := builder.Select(t1.Columns(emotepack.Columns...)...).From(t1)
	if epq.sql != nil {
		selector = epq.sql
		selector.Select(selector.Columns(emotepack.Columns...)...)
	}
	for _, p := range epq.predicates {
		p(selector)
	}
	for _, p := range epq.order {
		p(selector)
	}
	if offset := epq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := epq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmotePackGroupBy is the group-by builder for EmotePack entities.
type EmotePackGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (epgb *EmotePackGroupBy) Aggregate(fns ...AggregateFunc) *EmotePackGroupBy {
	epgb.fns = append(epgb.fns, fns...)
	return epgb
}

// Scan applies the group-by query and scans the result into the given value.
func (epgb *EmotePackGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := epgb.path(ctx)
	if err != nil {
		return err
	}
	epgb.sql = query
	return epgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (epgb *EmotePackGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := epgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(epgb.fields) > 1 {
		return nil, errors.New("entgen: EmotePackGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := epgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (epgb *EmotePackGroupBy) StringsX(ctx context.Context) []string {
	v, err := epgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = epgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (epgb *EmotePackGroupBy) StringX(ctx context.Context) string {
	v, err := epgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(epgb.fields) > 1 {
		return nil, errors.New("entgen: EmotePackGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := epgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (epgb *EmotePackGroupBy) IntsX(ctx context.Context) []int {
	v, err := epgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = epgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (epgb *EmotePackGroupBy) IntX(ctx context.Context) int {
	v, err := epgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(epgb.fields) > 1 {
		return nil, errors.New("entgen: EmotePackGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := epgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (epgb *EmotePackGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := epgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = epgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (epgb *EmotePackGroupBy) Float64X(ctx context.Context) float64 {
	v, err := epgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(epgb.fields) > 1 {
		return nil, errors.New("entgen: EmotePackGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := epgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (epgb *EmotePackGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := epgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (epgb *EmotePackGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = epgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (epgb *EmotePackGroupBy) BoolX(ctx context.Context) bool {
	v, err := epgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (epgb *EmotePackGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range epgb.fields {
		if !emotepack.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := epgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := epgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (epgb *EmotePackGroupBy) sqlQuery() *sql.Selector {
	selector := epgb.sql
	columns := make([]string, 0, len(epgb.fields)+len(epgb.fns))
	columns = append(columns, epgb.fields...)
	for _, fn := range epgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(epgb.fields...)
}

// EmotePackSelect is the builder for selecting fields of EmotePack entities.
type EmotePackSelect struct {
	*EmotePackQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (eps *EmotePackSelect) Scan(ctx context.Context, v interface{}) error {
	if err := eps.prepareQuery(ctx); err != nil {
		return err
	}
	eps.sql = eps.EmotePackQuery.sqlQuery(ctx)
	return eps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (eps *EmotePackSelect) ScanX(ctx context.Context, v interface{}) {
	if err := eps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Strings(ctx context.Context) ([]string, error) {
	if len(eps.fields) > 1 {
		return nil, errors.New("entgen: EmotePackSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := eps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (eps *EmotePackSelect) StringsX(ctx context.Context) []string {
	v, err := eps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = eps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (eps *EmotePackSelect) StringX(ctx context.Context) string {
	v, err := eps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Ints(ctx context.Context) ([]int, error) {
	if len(eps.fields) > 1 {
		return nil, errors.New("entgen: EmotePackSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := eps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (eps *EmotePackSelect) IntsX(ctx context.Context) []int {
	v, err := eps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = eps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (eps *EmotePackSelect) IntX(ctx context.Context) int {
	v, err := eps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(eps.fields) > 1 {
		return nil, errors.New("entgen: EmotePackSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := eps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (eps *EmotePackSelect) Float64sX(ctx context.Context) []float64 {
	v, err := eps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = eps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (eps *EmotePackSelect) Float64X(ctx context.Context) float64 {
	v, err := eps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(eps.fields) > 1 {
		return nil, errors.New("entgen: EmotePackSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := eps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (eps *EmotePackSelect) BoolsX(ctx context.Context) []bool {
	v, err := eps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (eps *EmotePackSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = eps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{emotepack.Label}
	default:
		err = fmt.Errorf("entgen: EmotePackSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (eps *EmotePackSelect) BoolX(ctx context.Context) bool {
	v, err := eps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (eps *EmotePackSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := eps.sqlQuery().Query()
	if err := eps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (eps *EmotePackSelect) sqlQuery() sql.Querier {
	selector := eps.sql
	selector.Select(selector.Columns(eps.fields...)...)
	return selector
}
