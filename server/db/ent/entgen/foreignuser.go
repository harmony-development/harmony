// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/foreignuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// ForeignUser is the model entity for the ForeignUser schema.
type ForeignUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Foreignid holds the value of the "foreignid" field.
	Foreignid uint64 `json:"foreignid,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ForeignUserQuery when eager-loading is set.
	Edges             ForeignUserEdges `json:"edges"`
	user_foreign_user *uint64
}

// ForeignUserEdges holds the relations/edges for other nodes in the graph.
type ForeignUserEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ForeignUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ForeignUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case foreignuser.FieldID, foreignuser.FieldForeignid:
			values[i] = &sql.NullInt64{}
		case foreignuser.FieldHost:
			values[i] = &sql.NullString{}
		case foreignuser.ForeignKeys[0]: // user_foreign_user
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ForeignUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ForeignUser fields.
func (fu *ForeignUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case foreignuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fu.ID = int(value.Int64)
		case foreignuser.FieldForeignid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field foreignid", values[i])
			} else if value.Valid {
				fu.Foreignid = uint64(value.Int64)
			}
		case foreignuser.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				fu.Host = value.String
			}
		case foreignuser.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_foreign_user", value)
			} else if value.Valid {
				fu.user_foreign_user = new(uint64)
				*fu.user_foreign_user = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the ForeignUser entity.
func (fu *ForeignUser) QueryUser() *UserQuery {
	return (&ForeignUserClient{config: fu.config}).QueryUser(fu)
}

// Update returns a builder for updating this ForeignUser.
// Note that you need to call ForeignUser.Unwrap() before calling this method if this ForeignUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (fu *ForeignUser) Update() *ForeignUserUpdateOne {
	return (&ForeignUserClient{config: fu.config}).UpdateOne(fu)
}

// Unwrap unwraps the ForeignUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fu *ForeignUser) Unwrap() *ForeignUser {
	tx, ok := fu.config.driver.(*txDriver)
	if !ok {
		panic("entgen: ForeignUser is not a transactional entity")
	}
	fu.config.driver = tx.drv
	return fu
}

// String implements the fmt.Stringer.
func (fu *ForeignUser) String() string {
	var builder strings.Builder
	builder.WriteString("ForeignUser(")
	builder.WriteString(fmt.Sprintf("id=%v", fu.ID))
	builder.WriteString(", foreignid=")
	builder.WriteString(fmt.Sprintf("%v", fu.Foreignid))
	builder.WriteString(", host=")
	builder.WriteString(fu.Host)
	builder.WriteByte(')')
	return builder.String()
}

// ForeignUsers is a parsable slice of ForeignUser.
type ForeignUsers []*ForeignUser

func (fu ForeignUsers) config(cfg config) {
	for _i := range fu {
		fu[_i].config = cfg
	}
}
