// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/guildlistentry"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// GuildListEntryUpdate is the builder for updating GuildListEntry entities.
type GuildListEntryUpdate struct {
	config
	hooks    []Hook
	mutation *GuildListEntryMutation
}

// Where adds a new predicate for the GuildListEntryUpdate builder.
func (gleu *GuildListEntryUpdate) Where(ps ...predicate.GuildListEntry) *GuildListEntryUpdate {
	gleu.mutation.predicates = append(gleu.mutation.predicates, ps...)
	return gleu
}

// SetGuildID sets the "guild_id" field.
func (gleu *GuildListEntryUpdate) SetGuildID(u uint64) *GuildListEntryUpdate {
	gleu.mutation.ResetGuildID()
	gleu.mutation.SetGuildID(u)
	return gleu
}

// AddGuildID adds u to the "guild_id" field.
func (gleu *GuildListEntryUpdate) AddGuildID(u uint64) *GuildListEntryUpdate {
	gleu.mutation.AddGuildID(u)
	return gleu
}

// SetHost sets the "host" field.
func (gleu *GuildListEntryUpdate) SetHost(s string) *GuildListEntryUpdate {
	gleu.mutation.SetHost(s)
	return gleu
}

// SetPosition sets the "position" field.
func (gleu *GuildListEntryUpdate) SetPosition(s string) *GuildListEntryUpdate {
	gleu.mutation.SetPosition(s)
	return gleu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gleu *GuildListEntryUpdate) SetUserID(id uint64) *GuildListEntryUpdate {
	gleu.mutation.SetUserID(id)
	return gleu
}

// SetUser sets the "user" edge to the User entity.
func (gleu *GuildListEntryUpdate) SetUser(u *User) *GuildListEntryUpdate {
	return gleu.SetUserID(u.ID)
}

// Mutation returns the GuildListEntryMutation object of the builder.
func (gleu *GuildListEntryUpdate) Mutation() *GuildListEntryMutation {
	return gleu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gleu *GuildListEntryUpdate) ClearUser() *GuildListEntryUpdate {
	gleu.mutation.ClearUser()
	return gleu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gleu *GuildListEntryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gleu.hooks) == 0 {
		if err = gleu.check(); err != nil {
			return 0, err
		}
		affected, err = gleu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildListEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gleu.check(); err != nil {
				return 0, err
			}
			gleu.mutation = mutation
			affected, err = gleu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gleu.hooks) - 1; i >= 0; i-- {
			mut = gleu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gleu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gleu *GuildListEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := gleu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gleu *GuildListEntryUpdate) Exec(ctx context.Context) error {
	_, err := gleu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gleu *GuildListEntryUpdate) ExecX(ctx context.Context) {
	if err := gleu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gleu *GuildListEntryUpdate) check() error {
	if _, ok := gleu.mutation.UserID(); gleu.mutation.UserCleared() && !ok {
		return errors.New("entgen: clearing a required unique edge \"user\"")
	}
	return nil
}

func (gleu *GuildListEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildlistentry.Table,
			Columns: guildlistentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guildlistentry.FieldID,
			},
		},
	}
	if ps := gleu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gleu.mutation.GuildID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guildlistentry.FieldGuildID,
		})
	}
	if value, ok := gleu.mutation.AddedGuildID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guildlistentry.FieldGuildID,
		})
	}
	if value, ok := gleu.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildlistentry.FieldHost,
		})
	}
	if value, ok := gleu.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildlistentry.FieldPosition,
		})
	}
	if gleu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guildlistentry.UserTable,
			Columns: []string{guildlistentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gleu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guildlistentry.UserTable,
			Columns: []string{guildlistentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gleu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildlistentry.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GuildListEntryUpdateOne is the builder for updating a single GuildListEntry entity.
type GuildListEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildListEntryMutation
}

// SetGuildID sets the "guild_id" field.
func (gleuo *GuildListEntryUpdateOne) SetGuildID(u uint64) *GuildListEntryUpdateOne {
	gleuo.mutation.ResetGuildID()
	gleuo.mutation.SetGuildID(u)
	return gleuo
}

// AddGuildID adds u to the "guild_id" field.
func (gleuo *GuildListEntryUpdateOne) AddGuildID(u uint64) *GuildListEntryUpdateOne {
	gleuo.mutation.AddGuildID(u)
	return gleuo
}

// SetHost sets the "host" field.
func (gleuo *GuildListEntryUpdateOne) SetHost(s string) *GuildListEntryUpdateOne {
	gleuo.mutation.SetHost(s)
	return gleuo
}

// SetPosition sets the "position" field.
func (gleuo *GuildListEntryUpdateOne) SetPosition(s string) *GuildListEntryUpdateOne {
	gleuo.mutation.SetPosition(s)
	return gleuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gleuo *GuildListEntryUpdateOne) SetUserID(id uint64) *GuildListEntryUpdateOne {
	gleuo.mutation.SetUserID(id)
	return gleuo
}

// SetUser sets the "user" edge to the User entity.
func (gleuo *GuildListEntryUpdateOne) SetUser(u *User) *GuildListEntryUpdateOne {
	return gleuo.SetUserID(u.ID)
}

// Mutation returns the GuildListEntryMutation object of the builder.
func (gleuo *GuildListEntryUpdateOne) Mutation() *GuildListEntryMutation {
	return gleuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gleuo *GuildListEntryUpdateOne) ClearUser() *GuildListEntryUpdateOne {
	gleuo.mutation.ClearUser()
	return gleuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gleuo *GuildListEntryUpdateOne) Select(field string, fields ...string) *GuildListEntryUpdateOne {
	gleuo.fields = append([]string{field}, fields...)
	return gleuo
}

// Save executes the query and returns the updated GuildListEntry entity.
func (gleuo *GuildListEntryUpdateOne) Save(ctx context.Context) (*GuildListEntry, error) {
	var (
		err  error
		node *GuildListEntry
	)
	if len(gleuo.hooks) == 0 {
		if err = gleuo.check(); err != nil {
			return nil, err
		}
		node, err = gleuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildListEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gleuo.check(); err != nil {
				return nil, err
			}
			gleuo.mutation = mutation
			node, err = gleuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gleuo.hooks) - 1; i >= 0; i-- {
			mut = gleuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gleuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gleuo *GuildListEntryUpdateOne) SaveX(ctx context.Context) *GuildListEntry {
	node, err := gleuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gleuo *GuildListEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := gleuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gleuo *GuildListEntryUpdateOne) ExecX(ctx context.Context) {
	if err := gleuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gleuo *GuildListEntryUpdateOne) check() error {
	if _, ok := gleuo.mutation.UserID(); gleuo.mutation.UserCleared() && !ok {
		return errors.New("entgen: clearing a required unique edge \"user\"")
	}
	return nil
}

func (gleuo *GuildListEntryUpdateOne) sqlSave(ctx context.Context) (_node *GuildListEntry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildlistentry.Table,
			Columns: guildlistentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guildlistentry.FieldID,
			},
		},
	}
	id, ok := gleuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GuildListEntry.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gleuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guildlistentry.FieldID)
		for _, f := range fields {
			if !guildlistentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != guildlistentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gleuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gleuo.mutation.GuildID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guildlistentry.FieldGuildID,
		})
	}
	if value, ok := gleuo.mutation.AddedGuildID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guildlistentry.FieldGuildID,
		})
	}
	if value, ok := gleuo.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildlistentry.FieldHost,
		})
	}
	if value, ok := gleuo.mutation.Position(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildlistentry.FieldPosition,
		})
	}
	if gleuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guildlistentry.UserTable,
			Columns: []string{guildlistentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gleuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guildlistentry.UserTable,
			Columns: []string{guildlistentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GuildListEntry{config: gleuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gleuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildlistentry.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
