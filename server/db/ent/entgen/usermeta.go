// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
	"github.com/harmony-development/legato/server/db/ent/entgen/usermeta"
)

// UserMeta is the model entity for the UserMeta schema.
type UserMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta string `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMetaQuery when eager-loading is set.
	Edges         UserMetaEdges `json:"edges"`
	user_metadata *uint64
}

// UserMetaEdges holds the relations/edges for other nodes in the graph.
type UserMetaEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMetaEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMeta) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermeta.FieldID, usermeta.FieldMeta:
			values[i] = new(sql.NullString)
		case usermeta.ForeignKeys[0]: // user_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserMeta", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMeta fields.
func (um *UserMeta) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermeta.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				um.ID = value.String
			}
		case usermeta.FieldMeta:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value.Valid {
				um.Meta = value.String
			}
		case usermeta.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_metadata", value)
			} else if value.Valid {
				um.user_metadata = new(uint64)
				*um.user_metadata = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserMeta entity.
func (um *UserMeta) QueryUser() *UserQuery {
	return (&UserMetaClient{config: um.config}).QueryUser(um)
}

// Update returns a builder for updating this UserMeta.
// Note that you need to call UserMeta.Unwrap() before calling this method if this UserMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMeta) Update() *UserMetaUpdateOne {
	return (&UserMetaClient{config: um.config}).UpdateOne(um)
}

// Unwrap unwraps the UserMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserMeta) Unwrap() *UserMeta {
	tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("entgen: UserMeta is not a transactional entity")
	}
	um.config.driver = tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMeta) String() string {
	var builder strings.Builder
	builder.WriteString("UserMeta(")
	builder.WriteString(fmt.Sprintf("id=%v", um.ID))
	builder.WriteString(", meta=")
	builder.WriteString(um.Meta)
	builder.WriteByte(')')
	return builder.String()
}

// UserMetaSlice is a parsable slice of UserMeta.
type UserMetaSlice []*UserMeta

func (um UserMetaSlice) config(cfg config) {
	for _i := range um {
		um[_i].config = cfg
	}
}
