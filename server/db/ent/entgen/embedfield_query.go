// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedaction"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// EmbedFieldQuery is the builder for querying EmbedField entities.
type EmbedFieldQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.EmbedField
	// eager-loading edges.
	withEmbedAction  *EmbedActionQuery
	withEmbedMessage *EmbedMessageQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmbedFieldQuery builder.
func (efq *EmbedFieldQuery) Where(ps ...predicate.EmbedField) *EmbedFieldQuery {
	efq.predicates = append(efq.predicates, ps...)
	return efq
}

// Limit adds a limit step to the query.
func (efq *EmbedFieldQuery) Limit(limit int) *EmbedFieldQuery {
	efq.limit = &limit
	return efq
}

// Offset adds an offset step to the query.
func (efq *EmbedFieldQuery) Offset(offset int) *EmbedFieldQuery {
	efq.offset = &offset
	return efq
}

// Order adds an order step to the query.
func (efq *EmbedFieldQuery) Order(o ...OrderFunc) *EmbedFieldQuery {
	efq.order = append(efq.order, o...)
	return efq
}

// QueryEmbedAction chains the current query on the "embed_action" edge.
func (efq *EmbedFieldQuery) QueryEmbedAction() *EmbedActionQuery {
	query := &EmbedActionQuery{config: efq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := efq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := efq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(embedfield.Table, embedfield.FieldID, selector),
			sqlgraph.To(embedaction.Table, embedaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, embedfield.EmbedActionTable, embedfield.EmbedActionColumn),
		)
		fromU = sqlgraph.SetNeighbors(efq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmbedMessage chains the current query on the "embed_message" edge.
func (efq *EmbedFieldQuery) QueryEmbedMessage() *EmbedMessageQuery {
	query := &EmbedMessageQuery{config: efq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := efq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := efq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(embedfield.Table, embedfield.FieldID, selector),
			sqlgraph.To(embedmessage.Table, embedmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, embedfield.EmbedMessageTable, embedfield.EmbedMessageColumn),
		)
		fromU = sqlgraph.SetNeighbors(efq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmbedField entity from the query.
// Returns a *NotFoundError when no EmbedField was found.
func (efq *EmbedFieldQuery) First(ctx context.Context) (*EmbedField, error) {
	nodes, err := efq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{embedfield.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (efq *EmbedFieldQuery) FirstX(ctx context.Context) *EmbedField {
	node, err := efq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmbedField ID from the query.
// Returns a *NotFoundError when no EmbedField ID was found.
func (efq *EmbedFieldQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = efq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{embedfield.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (efq *EmbedFieldQuery) FirstIDX(ctx context.Context) int {
	id, err := efq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmbedField entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one EmbedField entity is not found.
// Returns a *NotFoundError when no EmbedField entities are found.
func (efq *EmbedFieldQuery) Only(ctx context.Context) (*EmbedField, error) {
	nodes, err := efq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{embedfield.Label}
	default:
		return nil, &NotSingularError{embedfield.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (efq *EmbedFieldQuery) OnlyX(ctx context.Context) *EmbedField {
	node, err := efq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmbedField ID in the query.
// Returns a *NotSingularError when exactly one EmbedField ID is not found.
// Returns a *NotFoundError when no entities are found.
func (efq *EmbedFieldQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = efq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = &NotSingularError{embedfield.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (efq *EmbedFieldQuery) OnlyIDX(ctx context.Context) int {
	id, err := efq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmbedFields.
func (efq *EmbedFieldQuery) All(ctx context.Context) ([]*EmbedField, error) {
	if err := efq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return efq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (efq *EmbedFieldQuery) AllX(ctx context.Context) []*EmbedField {
	nodes, err := efq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmbedField IDs.
func (efq *EmbedFieldQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := efq.Select(embedfield.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (efq *EmbedFieldQuery) IDsX(ctx context.Context) []int {
	ids, err := efq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (efq *EmbedFieldQuery) Count(ctx context.Context) (int, error) {
	if err := efq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return efq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (efq *EmbedFieldQuery) CountX(ctx context.Context) int {
	count, err := efq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (efq *EmbedFieldQuery) Exist(ctx context.Context) (bool, error) {
	if err := efq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return efq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (efq *EmbedFieldQuery) ExistX(ctx context.Context) bool {
	exist, err := efq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmbedFieldQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (efq *EmbedFieldQuery) Clone() *EmbedFieldQuery {
	if efq == nil {
		return nil
	}
	return &EmbedFieldQuery{
		config:           efq.config,
		limit:            efq.limit,
		offset:           efq.offset,
		order:            append([]OrderFunc{}, efq.order...),
		predicates:       append([]predicate.EmbedField{}, efq.predicates...),
		withEmbedAction:  efq.withEmbedAction.Clone(),
		withEmbedMessage: efq.withEmbedMessage.Clone(),
		// clone intermediate query.
		sql:  efq.sql.Clone(),
		path: efq.path,
	}
}

// WithEmbedAction tells the query-builder to eager-load the nodes that are connected to
// the "embed_action" edge. The optional arguments are used to configure the query builder of the edge.
func (efq *EmbedFieldQuery) WithEmbedAction(opts ...func(*EmbedActionQuery)) *EmbedFieldQuery {
	query := &EmbedActionQuery{config: efq.config}
	for _, opt := range opts {
		opt(query)
	}
	efq.withEmbedAction = query
	return efq
}

// WithEmbedMessage tells the query-builder to eager-load the nodes that are connected to
// the "embed_message" edge. The optional arguments are used to configure the query builder of the edge.
func (efq *EmbedFieldQuery) WithEmbedMessage(opts ...func(*EmbedMessageQuery)) *EmbedFieldQuery {
	query := &EmbedMessageQuery{config: efq.config}
	for _, opt := range opts {
		opt(query)
	}
	efq.withEmbedMessage = query
	return efq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmbedField.Query().
//		GroupBy(embedfield.FieldTitle).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
//
func (efq *EmbedFieldQuery) GroupBy(field string, fields ...string) *EmbedFieldGroupBy {
	group := &EmbedFieldGroupBy{config: efq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := efq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return efq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.EmbedField.Query().
//		Select(embedfield.FieldTitle).
//		Scan(ctx, &v)
//
func (efq *EmbedFieldQuery) Select(field string, fields ...string) *EmbedFieldSelect {
	efq.fields = append([]string{field}, fields...)
	return &EmbedFieldSelect{EmbedFieldQuery: efq}
}

func (efq *EmbedFieldQuery) prepareQuery(ctx context.Context) error {
	for _, f := range efq.fields {
		if !embedfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if efq.path != nil {
		prev, err := efq.path(ctx)
		if err != nil {
			return err
		}
		efq.sql = prev
	}
	return nil
}

func (efq *EmbedFieldQuery) sqlAll(ctx context.Context) ([]*EmbedField, error) {
	var (
		nodes       = []*EmbedField{}
		withFKs     = efq.withFKs
		_spec       = efq.querySpec()
		loadedTypes = [2]bool{
			efq.withEmbedAction != nil,
			efq.withEmbedMessage != nil,
		}
	)
	if efq.withEmbedMessage != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, embedfield.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &EmbedField{config: efq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("entgen: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, efq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := efq.withEmbedAction; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*EmbedField)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.EmbedAction = []*EmbedAction{}
		}
		query.withFKs = true
		query.Where(predicate.EmbedAction(func(s *sql.Selector) {
			s.Where(sql.InValues(embedfield.EmbedActionColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.embed_field_embed_action
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "embed_field_embed_action" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "embed_field_embed_action" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.EmbedAction = append(node.Edges.EmbedAction, n)
		}
	}

	if query := efq.withEmbedMessage; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*EmbedField)
		for i := range nodes {
			fk := nodes[i].embed_message_embed_field
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(embedmessage.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "embed_message_embed_field" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EmbedMessage = n
			}
		}
	}

	return nodes, nil
}

func (efq *EmbedFieldQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := efq.querySpec()
	return sqlgraph.CountNodes(ctx, efq.driver, _spec)
}

func (efq *EmbedFieldQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := efq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("entgen: check existence: %w", err)
	}
	return n > 0, nil
}

func (efq *EmbedFieldQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedfield.Table,
			Columns: embedfield.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedfield.FieldID,
			},
		},
		From:   efq.sql,
		Unique: true,
	}
	if fields := efq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, embedfield.FieldID)
		for i := range fields {
			if fields[i] != embedfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := efq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := efq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := efq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := efq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, embedfield.ValidColumn)
			}
		}
	}
	return _spec
}

func (efq *EmbedFieldQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(efq.driver.Dialect())
	t1 := builder.Table(embedfield.Table)
	selector := builder.Select(t1.Columns(embedfield.Columns...)...).From(t1)
	if efq.sql != nil {
		selector = efq.sql
		selector.Select(selector.Columns(embedfield.Columns...)...)
	}
	for _, p := range efq.predicates {
		p(selector)
	}
	for _, p := range efq.order {
		p(selector, embedfield.ValidColumn)
	}
	if offset := efq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := efq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmbedFieldGroupBy is the group-by builder for EmbedField entities.
type EmbedFieldGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (efgb *EmbedFieldGroupBy) Aggregate(fns ...AggregateFunc) *EmbedFieldGroupBy {
	efgb.fns = append(efgb.fns, fns...)
	return efgb
}

// Scan applies the group-by query and scans the result into the given value.
func (efgb *EmbedFieldGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := efgb.path(ctx)
	if err != nil {
		return err
	}
	efgb.sql = query
	return efgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := efgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(efgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := efgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) StringsX(ctx context.Context) []string {
	v, err := efgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = efgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) StringX(ctx context.Context) string {
	v, err := efgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(efgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := efgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) IntsX(ctx context.Context) []int {
	v, err := efgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = efgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) IntX(ctx context.Context) int {
	v, err := efgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(efgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := efgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := efgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = efgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) Float64X(ctx context.Context) float64 {
	v, err := efgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(efgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := efgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := efgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (efgb *EmbedFieldGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = efgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (efgb *EmbedFieldGroupBy) BoolX(ctx context.Context) bool {
	v, err := efgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (efgb *EmbedFieldGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range efgb.fields {
		if !embedfield.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := efgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := efgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (efgb *EmbedFieldGroupBy) sqlQuery() *sql.Selector {
	selector := efgb.sql
	columns := make([]string, 0, len(efgb.fields)+len(efgb.fns))
	columns = append(columns, efgb.fields...)
	for _, fn := range efgb.fns {
		columns = append(columns, fn(selector, embedfield.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(efgb.fields...)
}

// EmbedFieldSelect is the builder for selecting fields of EmbedField entities.
type EmbedFieldSelect struct {
	*EmbedFieldQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (efs *EmbedFieldSelect) Scan(ctx context.Context, v interface{}) error {
	if err := efs.prepareQuery(ctx); err != nil {
		return err
	}
	efs.sql = efs.EmbedFieldQuery.sqlQuery(ctx)
	return efs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (efs *EmbedFieldSelect) ScanX(ctx context.Context, v interface{}) {
	if err := efs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Strings(ctx context.Context) ([]string, error) {
	if len(efs.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := efs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (efs *EmbedFieldSelect) StringsX(ctx context.Context) []string {
	v, err := efs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = efs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (efs *EmbedFieldSelect) StringX(ctx context.Context) string {
	v, err := efs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Ints(ctx context.Context) ([]int, error) {
	if len(efs.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := efs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (efs *EmbedFieldSelect) IntsX(ctx context.Context) []int {
	v, err := efs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = efs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (efs *EmbedFieldSelect) IntX(ctx context.Context) int {
	v, err := efs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(efs.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := efs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (efs *EmbedFieldSelect) Float64sX(ctx context.Context) []float64 {
	v, err := efs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = efs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (efs *EmbedFieldSelect) Float64X(ctx context.Context) float64 {
	v, err := efs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(efs.fields) > 1 {
		return nil, errors.New("entgen: EmbedFieldSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := efs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (efs *EmbedFieldSelect) BoolsX(ctx context.Context) []bool {
	v, err := efs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (efs *EmbedFieldSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = efs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedfield.Label}
	default:
		err = fmt.Errorf("entgen: EmbedFieldSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (efs *EmbedFieldSelect) BoolX(ctx context.Context) bool {
	v, err := efs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (efs *EmbedFieldSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := efs.sqlQuery().Query()
	if err := efs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (efs *EmbedFieldSelect) sqlQuery() sql.Querier {
	selector := efs.sql
	selector.Select(selector.Columns(efs.fields...)...)
	return selector
}
