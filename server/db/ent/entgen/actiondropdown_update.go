// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/actiondropdown"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// ActionDropdownUpdate is the builder for updating ActionDropdown entities.
type ActionDropdownUpdate struct {
	config
	hooks    []Hook
	mutation *ActionDropdownMutation
}

// Where adds a new predicate for the ActionDropdownUpdate builder.
func (adu *ActionDropdownUpdate) Where(ps ...predicate.ActionDropdown) *ActionDropdownUpdate {
	adu.mutation.predicates = append(adu.mutation.predicates, ps...)
	return adu
}

// SetText sets the "text" field.
func (adu *ActionDropdownUpdate) SetText(s string) *ActionDropdownUpdate {
	adu.mutation.SetText(s)
	return adu
}

// SetOptions sets the "options" field.
func (adu *ActionDropdownUpdate) SetOptions(s []string) *ActionDropdownUpdate {
	adu.mutation.SetOptions(s)
	return adu
}

// Mutation returns the ActionDropdownMutation object of the builder.
func (adu *ActionDropdownUpdate) Mutation() *ActionDropdownMutation {
	return adu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *ActionDropdownUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(adu.hooks) == 0 {
		affected, err = adu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionDropdownMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			adu.mutation = mutation
			affected, err = adu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(adu.hooks) - 1; i >= 0; i-- {
			mut = adu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (adu *ActionDropdownUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *ActionDropdownUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *ActionDropdownUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (adu *ActionDropdownUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actiondropdown.Table,
			Columns: actiondropdown.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actiondropdown.FieldID,
			},
		},
	}
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actiondropdown.FieldText,
		})
	}
	if value, ok := adu.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actiondropdown.FieldOptions,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actiondropdown.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActionDropdownUpdateOne is the builder for updating a single ActionDropdown entity.
type ActionDropdownUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActionDropdownMutation
}

// SetText sets the "text" field.
func (aduo *ActionDropdownUpdateOne) SetText(s string) *ActionDropdownUpdateOne {
	aduo.mutation.SetText(s)
	return aduo
}

// SetOptions sets the "options" field.
func (aduo *ActionDropdownUpdateOne) SetOptions(s []string) *ActionDropdownUpdateOne {
	aduo.mutation.SetOptions(s)
	return aduo
}

// Mutation returns the ActionDropdownMutation object of the builder.
func (aduo *ActionDropdownUpdateOne) Mutation() *ActionDropdownMutation {
	return aduo.mutation
}

// Save executes the query and returns the updated ActionDropdown entity.
func (aduo *ActionDropdownUpdateOne) Save(ctx context.Context) (*ActionDropdown, error) {
	var (
		err  error
		node *ActionDropdown
	)
	if len(aduo.hooks) == 0 {
		node, err = aduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionDropdownMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aduo.mutation = mutation
			node, err = aduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aduo.hooks) - 1; i >= 0; i-- {
			mut = aduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *ActionDropdownUpdateOne) SaveX(ctx context.Context) *ActionDropdown {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *ActionDropdownUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *ActionDropdownUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aduo *ActionDropdownUpdateOne) sqlSave(ctx context.Context) (_node *ActionDropdown, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actiondropdown.Table,
			Columns: actiondropdown.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actiondropdown.FieldID,
			},
		},
	}
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActionDropdown.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actiondropdown.FieldText,
		})
	}
	if value, ok := aduo.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: actiondropdown.FieldOptions,
		})
	}
	_node = &ActionDropdown{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actiondropdown.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
