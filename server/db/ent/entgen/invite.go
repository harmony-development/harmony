// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/invite"
)

// Invite is the model entity for the Invite schema.
type Invite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Uses holds the value of the "uses" field.
	Uses int64 `json:"uses,omitempty"`
	// PossibleUses holds the value of the "possible_uses" field.
	PossibleUses int64 `json:"possible_uses,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InviteQuery when eager-loading is set.
	Edges        InviteEdges `json:"edges"`
	guild_invite *uint64
}

// InviteEdges holds the relations/edges for other nodes in the graph.
type InviteEdges struct {
	// Guild holds the value of the guild edge.
	Guild *Guild `json:"guild,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InviteEdges) GuildOrErr() (*Guild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// The edge guild was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: guild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invite) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case invite.FieldID, invite.FieldUses, invite.FieldPossibleUses:
			values[i] = &sql.NullInt64{}
		case invite.FieldCode:
			values[i] = &sql.NullString{}
		case invite.ForeignKeys[0]: // guild_invite
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Invite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invite fields.
func (i *Invite) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invite.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case invite.FieldCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[j])
			} else if value.Valid {
				i.Code = value.String
			}
		case invite.FieldUses:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uses", values[j])
			} else if value.Valid {
				i.Uses = value.Int64
			}
		case invite.FieldPossibleUses:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field possible_uses", values[j])
			} else if value.Valid {
				i.PossibleUses = value.Int64
			}
		case invite.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field guild_invite", value)
			} else if value.Valid {
				i.guild_invite = new(uint64)
				*i.guild_invite = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryGuild queries the "guild" edge of the Invite entity.
func (i *Invite) QueryGuild() *GuildQuery {
	return (&InviteClient{config: i.config}).QueryGuild(i)
}

// Update returns a builder for updating this Invite.
// Note that you need to call Invite.Unwrap() before calling this method if this Invite
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invite) Update() *InviteUpdateOne {
	return (&InviteClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Invite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invite) Unwrap() *Invite {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Invite is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invite) String() string {
	var builder strings.Builder
	builder.WriteString("Invite(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", code=")
	builder.WriteString(i.Code)
	builder.WriteString(", uses=")
	builder.WriteString(fmt.Sprintf("%v", i.Uses))
	builder.WriteString(", possible_uses=")
	builder.WriteString(fmt.Sprintf("%v", i.PossibleUses))
	builder.WriteByte(')')
	return builder.String()
}

// Invites is a parsable slice of Invite.
type Invites []*Invite

func (i Invites) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
