// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: foundation/v1/foundation.proto

package foundationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _foundation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on FederateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FederateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Target

	return nil
}

// FederateRequestValidationError is the validation error returned by
// FederateRequest.Validate if the designated constraints aren't met.
type FederateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FederateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FederateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FederateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FederateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FederateRequestValidationError) ErrorName() string { return "FederateRequestValidationError" }

// Error satisfies the builtin error interface
func (e FederateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFederateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FederateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FederateRequestValidationError{}

// Validate checks the field values on FederateReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FederateReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Nonce

	return nil
}

// FederateReplyValidationError is the validation error returned by
// FederateReply.Validate if the designated constraints aren't met.
type FederateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FederateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FederateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FederateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FederateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FederateReplyValidationError) ErrorName() string { return "FederateReplyValidationError" }

// Error satisfies the builtin error interface
func (e FederateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFederateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FederateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FederateReplyValidationError{}

// Validate checks the field values on KeyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *KeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// KeyRequestValidationError is the validation error returned by
// KeyRequest.Validate if the designated constraints aren't met.
type KeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyRequestValidationError) ErrorName() string { return "KeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e KeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyRequestValidationError{}

// Validate checks the field values on KeyReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *KeyReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	return nil
}

// KeyReplyValidationError is the validation error returned by
// KeyReply.Validate if the designated constraints aren't met.
type KeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyReplyValidationError) ErrorName() string { return "KeyReplyValidationError" }

// Error satisfies the builtin error interface
func (e KeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Login.(type) {

	case *LoginRequest_Federated_:

		if v, ok := interface{}(m.GetFederated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginRequestValidationError{
					field:  "Federated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LoginRequest_Local_:

		if v, ok := interface{}(m.GetLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginRequestValidationError{
					field:  "Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegisterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Session) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for SessionToken

	return nil
}

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on GetConfigResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Require_2Fa

	return nil
}

// GetConfigResponseValidationError is the validation error returned by
// GetConfigResponse.Validate if the designated constraints aren't met.
type GetConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigResponseValidationError) ErrorName() string {
	return "GetConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigResponseValidationError{}

// Validate checks the field values on LoginRequest_Federated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginRequest_Federated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AuthToken

	// no validation rules for Domain

	return nil
}

// LoginRequest_FederatedValidationError is the validation error returned by
// LoginRequest_Federated.Validate if the designated constraints aren't met.
type LoginRequest_FederatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_FederatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_FederatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_FederatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_FederatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_FederatedValidationError) ErrorName() string {
	return "LoginRequest_FederatedValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_FederatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_Federated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_FederatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_FederatedValidationError{}

// Validate checks the field values on LoginRequest_Local with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginRequest_Local) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for Password

	return nil
}

// LoginRequest_LocalValidationError is the validation error returned by
// LoginRequest_Local.Validate if the designated constraints aren't met.
type LoginRequest_LocalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_LocalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_LocalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_LocalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_LocalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_LocalValidationError) ErrorName() string {
	return "LoginRequest_LocalValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_LocalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_Local.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_LocalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_LocalValidationError{}
