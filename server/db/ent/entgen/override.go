// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/override"
)

// Override is the model entity for the Override schema.
type Override struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason int64 `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OverrideQuery when eager-loading is set.
	Edges            OverrideEdges `json:"edges"`
	message_override *uint64
}

// OverrideEdges holds the relations/edges for other nodes in the graph.
type OverrideEdges struct {
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OverrideEdges) MessageOrErr() (*Message, error) {
	if e.loadedTypes[0] {
		if e.Message == nil {
			// The edge message was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: message.Label}
		}
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Override) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case override.FieldID, override.FieldReason:
			values[i] = &sql.NullInt64{}
		case override.FieldUsername, override.FieldAvatar:
			values[i] = &sql.NullString{}
		case override.ForeignKeys[0]: // message_override
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Override", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Override fields.
func (o *Override) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case override.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case override.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				o.Username = value.String
			}
		case override.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				o.Avatar = value.String
			}
		case override.FieldReason:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				o.Reason = value.Int64
			}
		case override.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_override", value)
			} else if value.Valid {
				o.message_override = new(uint64)
				*o.message_override = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryMessage queries the "message" edge of the Override entity.
func (o *Override) QueryMessage() *MessageQuery {
	return (&OverrideClient{config: o.config}).QueryMessage(o)
}

// Update returns a builder for updating this Override.
// Note that you need to call Override.Unwrap() before calling this method if this Override
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Override) Update() *OverrideUpdateOne {
	return (&OverrideClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Override entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Override) Unwrap() *Override {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Override is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Override) String() string {
	var builder strings.Builder
	builder.WriteString("Override(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", username=")
	builder.WriteString(o.Username)
	builder.WriteString(", avatar=")
	builder.WriteString(o.Avatar)
	builder.WriteString(", reason=")
	builder.WriteString(fmt.Sprintf("%v", o.Reason))
	builder.WriteByte(')')
	return builder.String()
}

// Overrides is a parsable slice of Override.
type Overrides []*Override

func (o Overrides) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
