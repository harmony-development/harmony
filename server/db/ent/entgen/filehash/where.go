// Code generated by entc, DO NOT EDIT.

package filehash

import (
	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// Fileid applies equality check predicate on the "fileid" field. It's identical to FileidEQ.
func Fileid(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileid), v))
	})
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHash), v))
	})
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHash), v))
	})
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...[]byte) predicate.FileHash {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileHash(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHash), v...))
	})
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...[]byte) predicate.FileHash {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileHash(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHash), v...))
	})
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHash), v))
	})
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHash), v))
	})
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHash), v))
	})
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v []byte) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHash), v))
	})
}

// FileidEQ applies the EQ predicate on the "fileid" field.
func FileidEQ(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileid), v))
	})
}

// FileidNEQ applies the NEQ predicate on the "fileid" field.
func FileidNEQ(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileid), v))
	})
}

// FileidIn applies the In predicate on the "fileid" field.
func FileidIn(vs ...string) predicate.FileHash {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileHash(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileid), v...))
	})
}

// FileidNotIn applies the NotIn predicate on the "fileid" field.
func FileidNotIn(vs ...string) predicate.FileHash {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileHash(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileid), v...))
	})
}

// FileidGT applies the GT predicate on the "fileid" field.
func FileidGT(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileid), v))
	})
}

// FileidGTE applies the GTE predicate on the "fileid" field.
func FileidGTE(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileid), v))
	})
}

// FileidLT applies the LT predicate on the "fileid" field.
func FileidLT(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileid), v))
	})
}

// FileidLTE applies the LTE predicate on the "fileid" field.
func FileidLTE(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileid), v))
	})
}

// FileidContains applies the Contains predicate on the "fileid" field.
func FileidContains(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFileid), v))
	})
}

// FileidHasPrefix applies the HasPrefix predicate on the "fileid" field.
func FileidHasPrefix(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFileid), v))
	})
}

// FileidHasSuffix applies the HasSuffix predicate on the "fileid" field.
func FileidHasSuffix(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFileid), v))
	})
}

// FileidEqualFold applies the EqualFold predicate on the "fileid" field.
func FileidEqualFold(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFileid), v))
	})
}

// FileidContainsFold applies the ContainsFold predicate on the "fileid" field.
func FileidContainsFold(v string) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFileid), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileHash) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileHash) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileHash) predicate.FileHash {
	return predicate.FileHash(func(s *sql.Selector) {
		p(s.Not())
	})
}
