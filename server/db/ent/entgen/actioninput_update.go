// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/actioninput"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// ActionInputUpdate is the builder for updating ActionInput entities.
type ActionInputUpdate struct {
	config
	hooks    []Hook
	mutation *ActionInputMutation
}

// Where adds a new predicate for the ActionInputUpdate builder.
func (aiu *ActionInputUpdate) Where(ps ...predicate.ActionInput) *ActionInputUpdate {
	aiu.mutation.predicates = append(aiu.mutation.predicates, ps...)
	return aiu
}

// SetLabel sets the "label" field.
func (aiu *ActionInputUpdate) SetLabel(s string) *ActionInputUpdate {
	aiu.mutation.SetLabel(s)
	return aiu
}

// SetWide sets the "wide" field.
func (aiu *ActionInputUpdate) SetWide(b bool) *ActionInputUpdate {
	aiu.mutation.SetWide(b)
	return aiu
}

// Mutation returns the ActionInputMutation object of the builder.
func (aiu *ActionInputUpdate) Mutation() *ActionInputMutation {
	return aiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *ActionInputUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aiu.hooks) == 0 {
		affected, err = aiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionInputMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiu.mutation = mutation
			affected, err = aiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aiu.hooks) - 1; i >= 0; i-- {
			mut = aiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *ActionInputUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *ActionInputUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *ActionInputUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiu *ActionInputUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actioninput.Table,
			Columns: actioninput.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actioninput.FieldID,
			},
		},
	}
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actioninput.FieldLabel,
		})
	}
	if value, ok := aiu.mutation.Wide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: actioninput.FieldWide,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actioninput.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActionInputUpdateOne is the builder for updating a single ActionInput entity.
type ActionInputUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActionInputMutation
}

// SetLabel sets the "label" field.
func (aiuo *ActionInputUpdateOne) SetLabel(s string) *ActionInputUpdateOne {
	aiuo.mutation.SetLabel(s)
	return aiuo
}

// SetWide sets the "wide" field.
func (aiuo *ActionInputUpdateOne) SetWide(b bool) *ActionInputUpdateOne {
	aiuo.mutation.SetWide(b)
	return aiuo
}

// Mutation returns the ActionInputMutation object of the builder.
func (aiuo *ActionInputUpdateOne) Mutation() *ActionInputMutation {
	return aiuo.mutation
}

// Save executes the query and returns the updated ActionInput entity.
func (aiuo *ActionInputUpdateOne) Save(ctx context.Context) (*ActionInput, error) {
	var (
		err  error
		node *ActionInput
	)
	if len(aiuo.hooks) == 0 {
		node, err = aiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionInputMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiuo.mutation = mutation
			node, err = aiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aiuo.hooks) - 1; i >= 0; i-- {
			mut = aiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *ActionInputUpdateOne) SaveX(ctx context.Context) *ActionInput {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *ActionInputUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *ActionInputUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiuo *ActionInputUpdateOne) sqlSave(ctx context.Context) (_node *ActionInput, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actioninput.Table,
			Columns: actioninput.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actioninput.FieldID,
			},
		},
	}
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActionInput.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actioninput.FieldLabel,
		})
	}
	if value, ok := aiuo.mutation.Wide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: actioninput.FieldWide,
		})
	}
	_node = &ActionInput{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actioninput.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
