// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/actionbutton"
)

// ActionButton is the model entity for the ActionButton schema.
type ActionButton struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionButton) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case actionbutton.FieldID:
			values[i] = &sql.NullInt64{}
		case actionbutton.FieldText, actionbutton.FieldURL:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ActionButton", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionButton fields.
func (ab *ActionButton) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actionbutton.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ab.ID = int(value.Int64)
		case actionbutton.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ab.Text = value.String
			}
		case actionbutton.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ab.URL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ActionButton.
// Note that you need to call ActionButton.Unwrap() before calling this method if this ActionButton
// was returned from a transaction, and the transaction was committed or rolled back.
func (ab *ActionButton) Update() *ActionButtonUpdateOne {
	return (&ActionButtonClient{config: ab.config}).UpdateOne(ab)
}

// Unwrap unwraps the ActionButton entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ab *ActionButton) Unwrap() *ActionButton {
	tx, ok := ab.config.driver.(*txDriver)
	if !ok {
		panic("entgen: ActionButton is not a transactional entity")
	}
	ab.config.driver = tx.drv
	return ab
}

// String implements the fmt.Stringer.
func (ab *ActionButton) String() string {
	var builder strings.Builder
	builder.WriteString("ActionButton(")
	builder.WriteString(fmt.Sprintf("id=%v", ab.ID))
	builder.WriteString(", text=")
	builder.WriteString(ab.Text)
	builder.WriteString(", url=")
	builder.WriteString(ab.URL)
	builder.WriteByte(')')
	return builder.String()
}

// ActionButtons is a parsable slice of ActionButton.
type ActionButtons []*ActionButton

func (ab ActionButtons) config(cfg config) {
	for _i := range ab {
		ab[_i].config = cfg
	}
}
