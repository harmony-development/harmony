// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/actioninput"
)

// ActionInput is the model entity for the ActionInput schema.
type ActionInput struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Wide holds the value of the "wide" field.
	Wide bool `json:"wide,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActionInput) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case actioninput.FieldWide:
			values[i] = &sql.NullBool{}
		case actioninput.FieldID:
			values[i] = &sql.NullInt64{}
		case actioninput.FieldLabel:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ActionInput", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActionInput fields.
func (ai *ActionInput) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case actioninput.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case actioninput.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				ai.Label = value.String
			}
		case actioninput.FieldWide:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field wide", values[i])
			} else if value.Valid {
				ai.Wide = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ActionInput.
// Note that you need to call ActionInput.Unwrap() before calling this method if this ActionInput
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *ActionInput) Update() *ActionInputUpdateOne {
	return (&ActionInputClient{config: ai.config}).UpdateOne(ai)
}

// Unwrap unwraps the ActionInput entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *ActionInput) Unwrap() *ActionInput {
	tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("entgen: ActionInput is not a transactional entity")
	}
	ai.config.driver = tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *ActionInput) String() string {
	var builder strings.Builder
	builder.WriteString("ActionInput(")
	builder.WriteString(fmt.Sprintf("id=%v", ai.ID))
	builder.WriteString(", label=")
	builder.WriteString(ai.Label)
	builder.WriteString(", wide=")
	builder.WriteString(fmt.Sprintf("%v", ai.Wide))
	builder.WriteByte(')')
	return builder.String()
}

// ActionInputs is a parsable slice of ActionInput.
type ActionInputs []*ActionInput

func (ai ActionInputs) config(cfg config) {
	for _i := range ai {
		ai[_i].config = cfg
	}
}
