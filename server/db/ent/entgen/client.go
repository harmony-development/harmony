// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"
	"log"

	"github.com/harmony-development/legato/server/db/ent/entgen/migrate"

	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/file"
	"github.com/harmony-development/legato/server/db/ent/entgen/filehash"
	"github.com/harmony-development/legato/server/db/ent/entgen/foreignuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/guildlistentry"
	"github.com/harmony-development/legato/server/db/ent/entgen/invite"
	"github.com/harmony-development/legato/server/db/ent/entgen/localuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/permissionnode"
	"github.com/harmony-development/legato/server/db/ent/entgen/profile"
	"github.com/harmony-development/legato/server/db/ent/entgen/role"
	"github.com/harmony-development/legato/server/db/ent/entgen/session"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
	"github.com/harmony-development/legato/server/db/ent/entgen/usermeta"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Channel is the client for interacting with the Channel builders.
	Channel *ChannelClient
	// Emote is the client for interacting with the Emote builders.
	Emote *EmoteClient
	// EmotePack is the client for interacting with the EmotePack builders.
	EmotePack *EmotePackClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// FileHash is the client for interacting with the FileHash builders.
	FileHash *FileHashClient
	// ForeignUser is the client for interacting with the ForeignUser builders.
	ForeignUser *ForeignUserClient
	// Guild is the client for interacting with the Guild builders.
	Guild *GuildClient
	// GuildListEntry is the client for interacting with the GuildListEntry builders.
	GuildListEntry *GuildListEntryClient
	// Invite is the client for interacting with the Invite builders.
	Invite *InviteClient
	// LocalUser is the client for interacting with the LocalUser builders.
	LocalUser *LocalUserClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// PermissionNode is the client for interacting with the PermissionNode builders.
	PermissionNode *PermissionNodeClient
	// Profile is the client for interacting with the Profile builders.
	Profile *ProfileClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserMeta is the client for interacting with the UserMeta builders.
	UserMeta *UserMetaClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Channel = NewChannelClient(c.config)
	c.Emote = NewEmoteClient(c.config)
	c.EmotePack = NewEmotePackClient(c.config)
	c.File = NewFileClient(c.config)
	c.FileHash = NewFileHashClient(c.config)
	c.ForeignUser = NewForeignUserClient(c.config)
	c.Guild = NewGuildClient(c.config)
	c.GuildListEntry = NewGuildListEntryClient(c.config)
	c.Invite = NewInviteClient(c.config)
	c.LocalUser = NewLocalUserClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.PermissionNode = NewPermissionNodeClient(c.config)
	c.Profile = NewProfileClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserMeta = NewUserMetaClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("entgen: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entgen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Channel:        NewChannelClient(cfg),
		Emote:          NewEmoteClient(cfg),
		EmotePack:      NewEmotePackClient(cfg),
		File:           NewFileClient(cfg),
		FileHash:       NewFileHashClient(cfg),
		ForeignUser:    NewForeignUserClient(cfg),
		Guild:          NewGuildClient(cfg),
		GuildListEntry: NewGuildListEntryClient(cfg),
		Invite:         NewInviteClient(cfg),
		LocalUser:      NewLocalUserClient(cfg),
		Message:        NewMessageClient(cfg),
		PermissionNode: NewPermissionNodeClient(cfg),
		Profile:        NewProfileClient(cfg),
		Role:           NewRoleClient(cfg),
		Session:        NewSessionClient(cfg),
		User:           NewUserClient(cfg),
		UserMeta:       NewUserMetaClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:         cfg,
		Channel:        NewChannelClient(cfg),
		Emote:          NewEmoteClient(cfg),
		EmotePack:      NewEmotePackClient(cfg),
		File:           NewFileClient(cfg),
		FileHash:       NewFileHashClient(cfg),
		ForeignUser:    NewForeignUserClient(cfg),
		Guild:          NewGuildClient(cfg),
		GuildListEntry: NewGuildListEntryClient(cfg),
		Invite:         NewInviteClient(cfg),
		LocalUser:      NewLocalUserClient(cfg),
		Message:        NewMessageClient(cfg),
		PermissionNode: NewPermissionNodeClient(cfg),
		Profile:        NewProfileClient(cfg),
		Role:           NewRoleClient(cfg),
		Session:        NewSessionClient(cfg),
		User:           NewUserClient(cfg),
		UserMeta:       NewUserMetaClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Channel.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Channel.Use(hooks...)
	c.Emote.Use(hooks...)
	c.EmotePack.Use(hooks...)
	c.File.Use(hooks...)
	c.FileHash.Use(hooks...)
	c.ForeignUser.Use(hooks...)
	c.Guild.Use(hooks...)
	c.GuildListEntry.Use(hooks...)
	c.Invite.Use(hooks...)
	c.LocalUser.Use(hooks...)
	c.Message.Use(hooks...)
	c.PermissionNode.Use(hooks...)
	c.Profile.Use(hooks...)
	c.Role.Use(hooks...)
	c.Session.Use(hooks...)
	c.User.Use(hooks...)
	c.UserMeta.Use(hooks...)
}

// ChannelClient is a client for the Channel schema.
type ChannelClient struct {
	config
}

// NewChannelClient returns a client for the Channel from the given config.
func NewChannelClient(c config) *ChannelClient {
	return &ChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `channel.Hooks(f(g(h())))`.
func (c *ChannelClient) Use(hooks ...Hook) {
	c.hooks.Channel = append(c.hooks.Channel, hooks...)
}

// Create returns a create builder for Channel.
func (c *ChannelClient) Create() *ChannelCreate {
	mutation := newChannelMutation(c.config, OpCreate)
	return &ChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Channel entities.
func (c *ChannelClient) CreateBulk(builders ...*ChannelCreate) *ChannelCreateBulk {
	return &ChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Channel.
func (c *ChannelClient) Update() *ChannelUpdate {
	mutation := newChannelMutation(c.config, OpUpdate)
	return &ChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChannelClient) UpdateOne(ch *Channel) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannel(ch))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChannelClient) UpdateOneID(id uint64) *ChannelUpdateOne {
	mutation := newChannelMutation(c.config, OpUpdateOne, withChannelID(id))
	return &ChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Channel.
func (c *ChannelClient) Delete() *ChannelDelete {
	mutation := newChannelMutation(c.config, OpDelete)
	return &ChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ChannelClient) DeleteOne(ch *Channel) *ChannelDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ChannelClient) DeleteOneID(id uint64) *ChannelDeleteOne {
	builder := c.Delete().Where(channel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChannelDeleteOne{builder}
}

// Query returns a query builder for Channel.
func (c *ChannelClient) Query() *ChannelQuery {
	return &ChannelQuery{config: c.config}
}

// Get returns a Channel entity by its id.
func (c *ChannelClient) Get(ctx context.Context, id uint64) (*Channel, error) {
	return c.Query().Where(channel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChannelClient) GetX(ctx context.Context, id uint64) *Channel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuild queries the guild edge of a Channel.
func (c *ChannelClient) QueryGuild(ch *Channel) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, channel.GuildTable, channel.GuildColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessage queries the message edge of a Channel.
func (c *ChannelClient) QueryMessage(ch *Channel) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.MessageTable, channel.MessageColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a Channel.
func (c *ChannelClient) QueryRole(ch *Channel) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.RoleTable, channel.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionNode queries the permission_node edge of a Channel.
func (c *ChannelClient) QueryPermissionNode(ch *Channel) *PermissionNodeQuery {
	query := &PermissionNodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(channel.Table, channel.FieldID, id),
			sqlgraph.To(permissionnode.Table, permissionnode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, channel.PermissionNodeTable, channel.PermissionNodeColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChannelClient) Hooks() []Hook {
	return c.hooks.Channel
}

// EmoteClient is a client for the Emote schema.
type EmoteClient struct {
	config
}

// NewEmoteClient returns a client for the Emote from the given config.
func NewEmoteClient(c config) *EmoteClient {
	return &EmoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emote.Hooks(f(g(h())))`.
func (c *EmoteClient) Use(hooks ...Hook) {
	c.hooks.Emote = append(c.hooks.Emote, hooks...)
}

// Create returns a create builder for Emote.
func (c *EmoteClient) Create() *EmoteCreate {
	mutation := newEmoteMutation(c.config, OpCreate)
	return &EmoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Emote entities.
func (c *EmoteClient) CreateBulk(builders ...*EmoteCreate) *EmoteCreateBulk {
	return &EmoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Emote.
func (c *EmoteClient) Update() *EmoteUpdate {
	mutation := newEmoteMutation(c.config, OpUpdate)
	return &EmoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmoteClient) UpdateOne(e *Emote) *EmoteUpdateOne {
	mutation := newEmoteMutation(c.config, OpUpdateOne, withEmote(e))
	return &EmoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmoteClient) UpdateOneID(id string) *EmoteUpdateOne {
	mutation := newEmoteMutation(c.config, OpUpdateOne, withEmoteID(id))
	return &EmoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Emote.
func (c *EmoteClient) Delete() *EmoteDelete {
	mutation := newEmoteMutation(c.config, OpDelete)
	return &EmoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmoteClient) DeleteOne(e *Emote) *EmoteDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmoteClient) DeleteOneID(id string) *EmoteDeleteOne {
	builder := c.Delete().Where(emote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmoteDeleteOne{builder}
}

// Query returns a query builder for Emote.
func (c *EmoteClient) Query() *EmoteQuery {
	return &EmoteQuery{config: c.config}
}

// Get returns a Emote entity by its id.
func (c *EmoteClient) Get(ctx context.Context, id string) (*Emote, error) {
	return c.Query().Where(emote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmoteClient) GetX(ctx context.Context, id string) *Emote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmotepack queries the emotepack edge of a Emote.
func (c *EmoteClient) QueryEmotepack(e *Emote) *EmotePackQuery {
	query := &EmotePackQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emote.Table, emote.FieldID, id),
			sqlgraph.To(emotepack.Table, emotepack.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emote.EmotepackTable, emote.EmotepackColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmoteClient) Hooks() []Hook {
	return c.hooks.Emote
}

// EmotePackClient is a client for the EmotePack schema.
type EmotePackClient struct {
	config
}

// NewEmotePackClient returns a client for the EmotePack from the given config.
func NewEmotePackClient(c config) *EmotePackClient {
	return &EmotePackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emotepack.Hooks(f(g(h())))`.
func (c *EmotePackClient) Use(hooks ...Hook) {
	c.hooks.EmotePack = append(c.hooks.EmotePack, hooks...)
}

// Create returns a create builder for EmotePack.
func (c *EmotePackClient) Create() *EmotePackCreate {
	mutation := newEmotePackMutation(c.config, OpCreate)
	return &EmotePackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmotePack entities.
func (c *EmotePackClient) CreateBulk(builders ...*EmotePackCreate) *EmotePackCreateBulk {
	return &EmotePackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmotePack.
func (c *EmotePackClient) Update() *EmotePackUpdate {
	mutation := newEmotePackMutation(c.config, OpUpdate)
	return &EmotePackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmotePackClient) UpdateOne(ep *EmotePack) *EmotePackUpdateOne {
	mutation := newEmotePackMutation(c.config, OpUpdateOne, withEmotePack(ep))
	return &EmotePackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmotePackClient) UpdateOneID(id uint64) *EmotePackUpdateOne {
	mutation := newEmotePackMutation(c.config, OpUpdateOne, withEmotePackID(id))
	return &EmotePackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmotePack.
func (c *EmotePackClient) Delete() *EmotePackDelete {
	mutation := newEmotePackMutation(c.config, OpDelete)
	return &EmotePackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmotePackClient) DeleteOne(ep *EmotePack) *EmotePackDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmotePackClient) DeleteOneID(id uint64) *EmotePackDeleteOne {
	builder := c.Delete().Where(emotepack.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmotePackDeleteOne{builder}
}

// Query returns a query builder for EmotePack.
func (c *EmotePackClient) Query() *EmotePackQuery {
	return &EmotePackQuery{config: c.config}
}

// Get returns a EmotePack entity by its id.
func (c *EmotePackClient) Get(ctx context.Context, id uint64) (*EmotePack, error) {
	return c.Query().Where(emotepack.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmotePackClient) GetX(ctx context.Context, id uint64) *EmotePack {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a EmotePack.
func (c *EmotePackClient) QueryUser(ep *EmotePack) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emotepack.Table, emotepack.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emotepack.UserTable, emotepack.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a EmotePack.
func (c *EmotePackClient) QueryOwner(ep *EmotePack) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emotepack.Table, emotepack.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emotepack.OwnerTable, emotepack.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmote queries the emote edge of a EmotePack.
func (c *EmotePackClient) QueryEmote(ep *EmotePack) *EmoteQuery {
	query := &EmoteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emotepack.Table, emotepack.FieldID, id),
			sqlgraph.To(emote.Table, emote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, emotepack.EmoteTable, emotepack.EmoteColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmotePackClient) Hooks() []Hook {
	return c.hooks.EmotePack
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Create returns a create builder for File.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id string) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileClient) DeleteOneID(id string) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{config: c.config}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id string) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id string) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// FileHashClient is a client for the FileHash schema.
type FileHashClient struct {
	config
}

// NewFileHashClient returns a client for the FileHash from the given config.
func NewFileHashClient(c config) *FileHashClient {
	return &FileHashClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filehash.Hooks(f(g(h())))`.
func (c *FileHashClient) Use(hooks ...Hook) {
	c.hooks.FileHash = append(c.hooks.FileHash, hooks...)
}

// Create returns a create builder for FileHash.
func (c *FileHashClient) Create() *FileHashCreate {
	mutation := newFileHashMutation(c.config, OpCreate)
	return &FileHashCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileHash entities.
func (c *FileHashClient) CreateBulk(builders ...*FileHashCreate) *FileHashCreateBulk {
	return &FileHashCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileHash.
func (c *FileHashClient) Update() *FileHashUpdate {
	mutation := newFileHashMutation(c.config, OpUpdate)
	return &FileHashUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileHashClient) UpdateOne(fh *FileHash) *FileHashUpdateOne {
	mutation := newFileHashMutation(c.config, OpUpdateOne, withFileHash(fh))
	return &FileHashUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileHashClient) UpdateOneID(id int) *FileHashUpdateOne {
	mutation := newFileHashMutation(c.config, OpUpdateOne, withFileHashID(id))
	return &FileHashUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileHash.
func (c *FileHashClient) Delete() *FileHashDelete {
	mutation := newFileHashMutation(c.config, OpDelete)
	return &FileHashDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileHashClient) DeleteOne(fh *FileHash) *FileHashDeleteOne {
	return c.DeleteOneID(fh.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileHashClient) DeleteOneID(id int) *FileHashDeleteOne {
	builder := c.Delete().Where(filehash.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileHashDeleteOne{builder}
}

// Query returns a query builder for FileHash.
func (c *FileHashClient) Query() *FileHashQuery {
	return &FileHashQuery{config: c.config}
}

// Get returns a FileHash entity by its id.
func (c *FileHashClient) Get(ctx context.Context, id int) (*FileHash, error) {
	return c.Query().Where(filehash.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileHashClient) GetX(ctx context.Context, id int) *FileHash {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileHashClient) Hooks() []Hook {
	return c.hooks.FileHash
}

// ForeignUserClient is a client for the ForeignUser schema.
type ForeignUserClient struct {
	config
}

// NewForeignUserClient returns a client for the ForeignUser from the given config.
func NewForeignUserClient(c config) *ForeignUserClient {
	return &ForeignUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `foreignuser.Hooks(f(g(h())))`.
func (c *ForeignUserClient) Use(hooks ...Hook) {
	c.hooks.ForeignUser = append(c.hooks.ForeignUser, hooks...)
}

// Create returns a create builder for ForeignUser.
func (c *ForeignUserClient) Create() *ForeignUserCreate {
	mutation := newForeignUserMutation(c.config, OpCreate)
	return &ForeignUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ForeignUser entities.
func (c *ForeignUserClient) CreateBulk(builders ...*ForeignUserCreate) *ForeignUserCreateBulk {
	return &ForeignUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ForeignUser.
func (c *ForeignUserClient) Update() *ForeignUserUpdate {
	mutation := newForeignUserMutation(c.config, OpUpdate)
	return &ForeignUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ForeignUserClient) UpdateOne(fu *ForeignUser) *ForeignUserUpdateOne {
	mutation := newForeignUserMutation(c.config, OpUpdateOne, withForeignUser(fu))
	return &ForeignUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ForeignUserClient) UpdateOneID(id int) *ForeignUserUpdateOne {
	mutation := newForeignUserMutation(c.config, OpUpdateOne, withForeignUserID(id))
	return &ForeignUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ForeignUser.
func (c *ForeignUserClient) Delete() *ForeignUserDelete {
	mutation := newForeignUserMutation(c.config, OpDelete)
	return &ForeignUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ForeignUserClient) DeleteOne(fu *ForeignUser) *ForeignUserDeleteOne {
	return c.DeleteOneID(fu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ForeignUserClient) DeleteOneID(id int) *ForeignUserDeleteOne {
	builder := c.Delete().Where(foreignuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ForeignUserDeleteOne{builder}
}

// Query returns a query builder for ForeignUser.
func (c *ForeignUserClient) Query() *ForeignUserQuery {
	return &ForeignUserQuery{config: c.config}
}

// Get returns a ForeignUser entity by its id.
func (c *ForeignUserClient) Get(ctx context.Context, id int) (*ForeignUser, error) {
	return c.Query().Where(foreignuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ForeignUserClient) GetX(ctx context.Context, id int) *ForeignUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ForeignUser.
func (c *ForeignUserClient) QueryUser(fu *ForeignUser) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foreignuser.Table, foreignuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, foreignuser.UserTable, foreignuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(fu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ForeignUserClient) Hooks() []Hook {
	return c.hooks.ForeignUser
}

// GuildClient is a client for the Guild schema.
type GuildClient struct {
	config
}

// NewGuildClient returns a client for the Guild from the given config.
func NewGuildClient(c config) *GuildClient {
	return &GuildClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guild.Hooks(f(g(h())))`.
func (c *GuildClient) Use(hooks ...Hook) {
	c.hooks.Guild = append(c.hooks.Guild, hooks...)
}

// Create returns a create builder for Guild.
func (c *GuildClient) Create() *GuildCreate {
	mutation := newGuildMutation(c.config, OpCreate)
	return &GuildCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guild entities.
func (c *GuildClient) CreateBulk(builders ...*GuildCreate) *GuildCreateBulk {
	return &GuildCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guild.
func (c *GuildClient) Update() *GuildUpdate {
	mutation := newGuildMutation(c.config, OpUpdate)
	return &GuildUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildClient) UpdateOne(gu *Guild) *GuildUpdateOne {
	mutation := newGuildMutation(c.config, OpUpdateOne, withGuild(gu))
	return &GuildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildClient) UpdateOneID(id uint64) *GuildUpdateOne {
	mutation := newGuildMutation(c.config, OpUpdateOne, withGuildID(id))
	return &GuildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guild.
func (c *GuildClient) Delete() *GuildDelete {
	mutation := newGuildMutation(c.config, OpDelete)
	return &GuildDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GuildClient) DeleteOne(gu *Guild) *GuildDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GuildClient) DeleteOneID(id uint64) *GuildDeleteOne {
	builder := c.Delete().Where(guild.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuildDeleteOne{builder}
}

// Query returns a query builder for Guild.
func (c *GuildClient) Query() *GuildQuery {
	return &GuildQuery{config: c.config}
}

// Get returns a Guild entity by its id.
func (c *GuildClient) Get(ctx context.Context, id uint64) (*Guild, error) {
	return c.Query().Where(guild.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildClient) GetX(ctx context.Context, id uint64) *Guild {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvite queries the invite edge of a Guild.
func (c *GuildClient) QueryInvite(gu *Guild) *InviteQuery {
	query := &InviteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guild.InviteTable, guild.InviteColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBans queries the bans edge of a Guild.
func (c *GuildClient) QueryBans(gu *Guild) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guild.BansTable, guild.BansColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a Guild.
func (c *GuildClient) QueryChannel(gu *Guild) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guild.ChannelTable, guild.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a Guild.
func (c *GuildClient) QueryRole(gu *Guild) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, guild.RoleTable, guild.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionNode queries the permission_node edge of a Guild.
func (c *GuildClient) QueryPermissionNode(gu *Guild) *PermissionNodeQuery {
	query := &PermissionNodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(permissionnode.Table, permissionnode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guild.PermissionNodeTable, guild.PermissionNodeColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Guild.
func (c *GuildClient) QueryUser(gu *Guild) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, guild.UserTable, guild.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuildClient) Hooks() []Hook {
	return c.hooks.Guild
}

// GuildListEntryClient is a client for the GuildListEntry schema.
type GuildListEntryClient struct {
	config
}

// NewGuildListEntryClient returns a client for the GuildListEntry from the given config.
func NewGuildListEntryClient(c config) *GuildListEntryClient {
	return &GuildListEntryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guildlistentry.Hooks(f(g(h())))`.
func (c *GuildListEntryClient) Use(hooks ...Hook) {
	c.hooks.GuildListEntry = append(c.hooks.GuildListEntry, hooks...)
}

// Create returns a create builder for GuildListEntry.
func (c *GuildListEntryClient) Create() *GuildListEntryCreate {
	mutation := newGuildListEntryMutation(c.config, OpCreate)
	return &GuildListEntryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuildListEntry entities.
func (c *GuildListEntryClient) CreateBulk(builders ...*GuildListEntryCreate) *GuildListEntryCreateBulk {
	return &GuildListEntryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuildListEntry.
func (c *GuildListEntryClient) Update() *GuildListEntryUpdate {
	mutation := newGuildListEntryMutation(c.config, OpUpdate)
	return &GuildListEntryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildListEntryClient) UpdateOne(gle *GuildListEntry) *GuildListEntryUpdateOne {
	mutation := newGuildListEntryMutation(c.config, OpUpdateOne, withGuildListEntry(gle))
	return &GuildListEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildListEntryClient) UpdateOneID(id uint64) *GuildListEntryUpdateOne {
	mutation := newGuildListEntryMutation(c.config, OpUpdateOne, withGuildListEntryID(id))
	return &GuildListEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuildListEntry.
func (c *GuildListEntryClient) Delete() *GuildListEntryDelete {
	mutation := newGuildListEntryMutation(c.config, OpDelete)
	return &GuildListEntryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GuildListEntryClient) DeleteOne(gle *GuildListEntry) *GuildListEntryDeleteOne {
	return c.DeleteOneID(gle.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GuildListEntryClient) DeleteOneID(id uint64) *GuildListEntryDeleteOne {
	builder := c.Delete().Where(guildlistentry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuildListEntryDeleteOne{builder}
}

// Query returns a query builder for GuildListEntry.
func (c *GuildListEntryClient) Query() *GuildListEntryQuery {
	return &GuildListEntryQuery{config: c.config}
}

// Get returns a GuildListEntry entity by its id.
func (c *GuildListEntryClient) Get(ctx context.Context, id uint64) (*GuildListEntry, error) {
	return c.Query().Where(guildlistentry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildListEntryClient) GetX(ctx context.Context, id uint64) *GuildListEntry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GuildListEntry.
func (c *GuildListEntryClient) QueryUser(gle *GuildListEntry) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gle.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guildlistentry.Table, guildlistentry.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guildlistentry.UserTable, guildlistentry.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gle.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuildListEntryClient) Hooks() []Hook {
	return c.hooks.GuildListEntry
}

// InviteClient is a client for the Invite schema.
type InviteClient struct {
	config
}

// NewInviteClient returns a client for the Invite from the given config.
func NewInviteClient(c config) *InviteClient {
	return &InviteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invite.Hooks(f(g(h())))`.
func (c *InviteClient) Use(hooks ...Hook) {
	c.hooks.Invite = append(c.hooks.Invite, hooks...)
}

// Create returns a create builder for Invite.
func (c *InviteClient) Create() *InviteCreate {
	mutation := newInviteMutation(c.config, OpCreate)
	return &InviteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invite entities.
func (c *InviteClient) CreateBulk(builders ...*InviteCreate) *InviteCreateBulk {
	return &InviteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invite.
func (c *InviteClient) Update() *InviteUpdate {
	mutation := newInviteMutation(c.config, OpUpdate)
	return &InviteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteClient) UpdateOne(i *Invite) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInvite(i))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteClient) UpdateOneID(id string) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInviteID(id))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invite.
func (c *InviteClient) Delete() *InviteDelete {
	mutation := newInviteMutation(c.config, OpDelete)
	return &InviteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InviteClient) DeleteOne(i *Invite) *InviteDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InviteClient) DeleteOneID(id string) *InviteDeleteOne {
	builder := c.Delete().Where(invite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteDeleteOne{builder}
}

// Query returns a query builder for Invite.
func (c *InviteClient) Query() *InviteQuery {
	return &InviteQuery{config: c.config}
}

// Get returns a Invite entity by its id.
func (c *InviteClient) Get(ctx context.Context, id string) (*Invite, error) {
	return c.Query().Where(invite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteClient) GetX(ctx context.Context, id string) *Invite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuild queries the guild edge of a Invite.
func (c *InviteClient) QueryGuild(i *Invite) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invite.GuildTable, invite.GuildColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InviteClient) Hooks() []Hook {
	return c.hooks.Invite
}

// LocalUserClient is a client for the LocalUser schema.
type LocalUserClient struct {
	config
}

// NewLocalUserClient returns a client for the LocalUser from the given config.
func NewLocalUserClient(c config) *LocalUserClient {
	return &LocalUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `localuser.Hooks(f(g(h())))`.
func (c *LocalUserClient) Use(hooks ...Hook) {
	c.hooks.LocalUser = append(c.hooks.LocalUser, hooks...)
}

// Create returns a create builder for LocalUser.
func (c *LocalUserClient) Create() *LocalUserCreate {
	mutation := newLocalUserMutation(c.config, OpCreate)
	return &LocalUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocalUser entities.
func (c *LocalUserClient) CreateBulk(builders ...*LocalUserCreate) *LocalUserCreateBulk {
	return &LocalUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocalUser.
func (c *LocalUserClient) Update() *LocalUserUpdate {
	mutation := newLocalUserMutation(c.config, OpUpdate)
	return &LocalUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocalUserClient) UpdateOne(lu *LocalUser) *LocalUserUpdateOne {
	mutation := newLocalUserMutation(c.config, OpUpdateOne, withLocalUser(lu))
	return &LocalUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocalUserClient) UpdateOneID(id int) *LocalUserUpdateOne {
	mutation := newLocalUserMutation(c.config, OpUpdateOne, withLocalUserID(id))
	return &LocalUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocalUser.
func (c *LocalUserClient) Delete() *LocalUserDelete {
	mutation := newLocalUserMutation(c.config, OpDelete)
	return &LocalUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LocalUserClient) DeleteOne(lu *LocalUser) *LocalUserDeleteOne {
	return c.DeleteOneID(lu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LocalUserClient) DeleteOneID(id int) *LocalUserDeleteOne {
	builder := c.Delete().Where(localuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocalUserDeleteOne{builder}
}

// Query returns a query builder for LocalUser.
func (c *LocalUserClient) Query() *LocalUserQuery {
	return &LocalUserQuery{config: c.config}
}

// Get returns a LocalUser entity by its id.
func (c *LocalUserClient) Get(ctx context.Context, id int) (*LocalUser, error) {
	return c.Query().Where(localuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocalUserClient) GetX(ctx context.Context, id int) *LocalUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a LocalUser.
func (c *LocalUserClient) QueryUser(lu *LocalUser) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(localuser.Table, localuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, localuser.UserTable, localuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(lu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a LocalUser.
func (c *LocalUserClient) QuerySessions(lu *LocalUser) *SessionQuery {
	query := &SessionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(localuser.Table, localuser.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, localuser.SessionsTable, localuser.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(lu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocalUserClient) Hooks() []Hook {
	return c.hooks.LocalUser
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a create builder for Message.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id uint64) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageClient) DeleteOneID(id uint64) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{config: c.config}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id uint64) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id uint64) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Message.
func (c *MessageClient) QueryUser(m *Message) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.UserTable, message.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a Message.
func (c *MessageClient) QueryChannel(m *Message) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.ChannelTable, message.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Message.
func (c *MessageClient) QueryParent(m *Message) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.ParentTable, message.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplies queries the replies edge of a Message.
func (c *MessageClient) QueryReplies(m *Message) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, message.RepliesTable, message.RepliesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// PermissionNodeClient is a client for the PermissionNode schema.
type PermissionNodeClient struct {
	config
}

// NewPermissionNodeClient returns a client for the PermissionNode from the given config.
func NewPermissionNodeClient(c config) *PermissionNodeClient {
	return &PermissionNodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permissionnode.Hooks(f(g(h())))`.
func (c *PermissionNodeClient) Use(hooks ...Hook) {
	c.hooks.PermissionNode = append(c.hooks.PermissionNode, hooks...)
}

// Create returns a create builder for PermissionNode.
func (c *PermissionNodeClient) Create() *PermissionNodeCreate {
	mutation := newPermissionNodeMutation(c.config, OpCreate)
	return &PermissionNodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PermissionNode entities.
func (c *PermissionNodeClient) CreateBulk(builders ...*PermissionNodeCreate) *PermissionNodeCreateBulk {
	return &PermissionNodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PermissionNode.
func (c *PermissionNodeClient) Update() *PermissionNodeUpdate {
	mutation := newPermissionNodeMutation(c.config, OpUpdate)
	return &PermissionNodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionNodeClient) UpdateOne(pn *PermissionNode) *PermissionNodeUpdateOne {
	mutation := newPermissionNodeMutation(c.config, OpUpdateOne, withPermissionNode(pn))
	return &PermissionNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionNodeClient) UpdateOneID(id int) *PermissionNodeUpdateOne {
	mutation := newPermissionNodeMutation(c.config, OpUpdateOne, withPermissionNodeID(id))
	return &PermissionNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PermissionNode.
func (c *PermissionNodeClient) Delete() *PermissionNodeDelete {
	mutation := newPermissionNodeMutation(c.config, OpDelete)
	return &PermissionNodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PermissionNodeClient) DeleteOne(pn *PermissionNode) *PermissionNodeDeleteOne {
	return c.DeleteOneID(pn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PermissionNodeClient) DeleteOneID(id int) *PermissionNodeDeleteOne {
	builder := c.Delete().Where(permissionnode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionNodeDeleteOne{builder}
}

// Query returns a query builder for PermissionNode.
func (c *PermissionNodeClient) Query() *PermissionNodeQuery {
	return &PermissionNodeQuery{config: c.config}
}

// Get returns a PermissionNode entity by its id.
func (c *PermissionNodeClient) Get(ctx context.Context, id int) (*PermissionNode, error) {
	return c.Query().Where(permissionnode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionNodeClient) GetX(ctx context.Context, id int) *PermissionNode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a PermissionNode.
func (c *PermissionNodeClient) QueryRole(pn *PermissionNode) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionnode.Table, permissionnode.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissionnode.RoleTable, permissionnode.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuild queries the guild edge of a PermissionNode.
func (c *PermissionNodeClient) QueryGuild(pn *PermissionNode) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionnode.Table, permissionnode.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissionnode.GuildTable, permissionnode.GuildColumn),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChannel queries the channel edge of a PermissionNode.
func (c *PermissionNodeClient) QueryChannel(pn *PermissionNode) *ChannelQuery {
	query := &ChannelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionnode.Table, permissionnode.FieldID, id),
			sqlgraph.To(channel.Table, channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permissionnode.ChannelTable, permissionnode.ChannelColumn),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionNodeClient) Hooks() []Hook {
	return c.hooks.PermissionNode
}

// ProfileClient is a client for the Profile schema.
type ProfileClient struct {
	config
}

// NewProfileClient returns a client for the Profile from the given config.
func NewProfileClient(c config) *ProfileClient {
	return &ProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `profile.Hooks(f(g(h())))`.
func (c *ProfileClient) Use(hooks ...Hook) {
	c.hooks.Profile = append(c.hooks.Profile, hooks...)
}

// Create returns a create builder for Profile.
func (c *ProfileClient) Create() *ProfileCreate {
	mutation := newProfileMutation(c.config, OpCreate)
	return &ProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Profile entities.
func (c *ProfileClient) CreateBulk(builders ...*ProfileCreate) *ProfileCreateBulk {
	return &ProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Profile.
func (c *ProfileClient) Update() *ProfileUpdate {
	mutation := newProfileMutation(c.config, OpUpdate)
	return &ProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProfileClient) UpdateOne(pr *Profile) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfile(pr))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProfileClient) UpdateOneID(id int) *ProfileUpdateOne {
	mutation := newProfileMutation(c.config, OpUpdateOne, withProfileID(id))
	return &ProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Profile.
func (c *ProfileClient) Delete() *ProfileDelete {
	mutation := newProfileMutation(c.config, OpDelete)
	return &ProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProfileClient) DeleteOne(pr *Profile) *ProfileDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProfileClient) DeleteOneID(id int) *ProfileDeleteOne {
	builder := c.Delete().Where(profile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProfileDeleteOne{builder}
}

// Query returns a query builder for Profile.
func (c *ProfileClient) Query() *ProfileQuery {
	return &ProfileQuery{config: c.config}
}

// Get returns a Profile entity by its id.
func (c *ProfileClient) Get(ctx context.Context, id int) (*Profile, error) {
	return c.Query().Where(profile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProfileClient) GetX(ctx context.Context, id int) *Profile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Profile.
func (c *ProfileClient) QueryUser(pr *Profile) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(profile.Table, profile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, profile.UserTable, profile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProfileClient) Hooks() []Hook {
	return c.hooks.Profile
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a create builder for Role.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uint64) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleClient) DeleteOneID(id uint64) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{config: c.config}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uint64) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uint64) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuild queries the guild edge of a Role.
func (c *RoleClient) QueryGuild(r *Role) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.GuildTable, role.GuildPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a Role.
func (c *RoleClient) QueryMembers(r *Role) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.MembersTable, role.MembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionNode queries the permission_node edge of a Role.
func (c *RoleClient) QueryPermissionNode(r *Role) *PermissionNodeQuery {
	query := &PermissionNodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(permissionnode.Table, permissionnode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.PermissionNodeTable, role.PermissionNodeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a create builder for Session.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id string) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SessionClient) DeleteOneID(id string) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{config: c.config}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id string) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id string) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uint64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocalUser queries the local_user edge of a User.
func (c *UserClient) QueryLocalUser(u *User) *LocalUserQuery {
	query := &LocalUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(localuser.Table, localuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.LocalUserTable, user.LocalUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryForeignUser queries the foreign_user edge of a User.
func (c *UserClient) QueryForeignUser(u *User) *ForeignUserQuery {
	query := &ForeignUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(foreignuser.Table, foreignuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ForeignUserTable, user.ForeignUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfile queries the profile edge of a User.
func (c *UserClient) QueryProfile(u *User) *ProfileQuery {
	query := &ProfileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(profile.Table, profile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ProfileTable, user.ProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMetadata queries the metadata edge of a User.
func (c *UserClient) QueryMetadata(u *User) *UserMetaQuery {
	query := &UserMetaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usermeta.Table, usermeta.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MetadataTable, user.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := &SessionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessage queries the message edge of a User.
func (c *UserClient) QueryMessage(u *User) *MessageQuery {
	query := &MessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MessageTable, user.MessageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuild queries the guild edge of a User.
func (c *UserClient) QueryGuild(u *User) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.GuildTable, user.GuildPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmotepack queries the emotepack edge of a User.
func (c *UserClient) QueryEmotepack(u *User) *EmotePackQuery {
	query := &EmotePackQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(emotepack.Table, emotepack.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EmotepackTable, user.EmotepackColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedpacks queries the createdpacks edge of a User.
func (c *UserClient) QueryCreatedpacks(u *User) *EmotePackQuery {
	query := &EmotePackQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(emotepack.Table, emotepack.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedpacksTable, user.CreatedpacksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryListentry queries the listentry edge of a User.
func (c *UserClient) QueryListentry(u *User) *GuildListEntryQuery {
	query := &GuildListEntryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(guildlistentry.Table, guildlistentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ListentryTable, user.ListentryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a User.
func (c *UserClient) QueryRole(u *User) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RoleTable, user.RolePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserMetaClient is a client for the UserMeta schema.
type UserMetaClient struct {
	config
}

// NewUserMetaClient returns a client for the UserMeta from the given config.
func NewUserMetaClient(c config) *UserMetaClient {
	return &UserMetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermeta.Hooks(f(g(h())))`.
func (c *UserMetaClient) Use(hooks ...Hook) {
	c.hooks.UserMeta = append(c.hooks.UserMeta, hooks...)
}

// Create returns a create builder for UserMeta.
func (c *UserMetaClient) Create() *UserMetaCreate {
	mutation := newUserMetaMutation(c.config, OpCreate)
	return &UserMetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMeta entities.
func (c *UserMetaClient) CreateBulk(builders ...*UserMetaCreate) *UserMetaCreateBulk {
	return &UserMetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMeta.
func (c *UserMetaClient) Update() *UserMetaUpdate {
	mutation := newUserMetaMutation(c.config, OpUpdate)
	return &UserMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMetaClient) UpdateOne(um *UserMeta) *UserMetaUpdateOne {
	mutation := newUserMetaMutation(c.config, OpUpdateOne, withUserMeta(um))
	return &UserMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMetaClient) UpdateOneID(id string) *UserMetaUpdateOne {
	mutation := newUserMetaMutation(c.config, OpUpdateOne, withUserMetaID(id))
	return &UserMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMeta.
func (c *UserMetaClient) Delete() *UserMetaDelete {
	mutation := newUserMetaMutation(c.config, OpDelete)
	return &UserMetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserMetaClient) DeleteOne(um *UserMeta) *UserMetaDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserMetaClient) DeleteOneID(id string) *UserMetaDeleteOne {
	builder := c.Delete().Where(usermeta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMetaDeleteOne{builder}
}

// Query returns a query builder for UserMeta.
func (c *UserMetaClient) Query() *UserMetaQuery {
	return &UserMetaQuery{config: c.config}
}

// Get returns a UserMeta entity by its id.
func (c *UserMetaClient) Get(ctx context.Context, id string) (*UserMeta, error) {
	return c.Query().Where(usermeta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMetaClient) GetX(ctx context.Context, id string) *UserMeta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserMeta.
func (c *UserMetaClient) QueryUser(um *UserMeta) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermeta.Table, usermeta.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermeta.UserTable, usermeta.UserColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMetaClient) Hooks() []Hook {
	return c.hooks.UserMeta
}
