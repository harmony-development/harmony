// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/textmessage"
)

// TextMessage is the model entity for the TextMessage schema.
type TextMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TextMessageQuery when eager-loading is set.
	Edges               TextMessageEdges `json:"edges"`
	message_textmessage *uint64
}

// TextMessageEdges holds the relations/edges for other nodes in the graph.
type TextMessageEdges struct {
	// Textmessage holds the value of the textmessage edge.
	Textmessage *Message `json:"textmessage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TextmessageOrErr returns the Textmessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TextMessageEdges) TextmessageOrErr() (*Message, error) {
	if e.loadedTypes[0] {
		if e.Textmessage == nil {
			// The edge textmessage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: message.Label}
		}
		return e.Textmessage, nil
	}
	return nil, &NotLoadedError{edge: "textmessage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TextMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case textmessage.FieldID:
			values[i] = &sql.NullInt64{}
		case textmessage.FieldContent:
			values[i] = &sql.NullString{}
		case textmessage.ForeignKeys[0]: // message_textmessage
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type TextMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TextMessage fields.
func (tm *TextMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case textmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tm.ID = int(value.Int64)
		case textmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				tm.Content = value.String
			}
		case textmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_textmessage", value)
			} else if value.Valid {
				tm.message_textmessage = new(uint64)
				*tm.message_textmessage = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTextmessage queries the "textmessage" edge of the TextMessage entity.
func (tm *TextMessage) QueryTextmessage() *MessageQuery {
	return (&TextMessageClient{config: tm.config}).QueryTextmessage(tm)
}

// Update returns a builder for updating this TextMessage.
// Note that you need to call TextMessage.Unwrap() before calling this method if this TextMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TextMessage) Update() *TextMessageUpdateOne {
	return (&TextMessageClient{config: tm.config}).UpdateOne(tm)
}

// Unwrap unwraps the TextMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TextMessage) Unwrap() *TextMessage {
	tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TextMessage is not a transactional entity")
	}
	tm.config.driver = tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TextMessage) String() string {
	var builder strings.Builder
	builder.WriteString("TextMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", tm.ID))
	builder.WriteString(", content=")
	builder.WriteString(tm.Content)
	builder.WriteByte(')')
	return builder.String()
}

// TextMessages is a parsable slice of TextMessage.
type TextMessages []*TextMessage

func (tm TextMessages) config(cfg config) {
	for _i := range tm {
		tm[_i].config = cfg
	}
}
