// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/actionbutton"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// ActionButtonUpdate is the builder for updating ActionButton entities.
type ActionButtonUpdate struct {
	config
	hooks    []Hook
	mutation *ActionButtonMutation
}

// Where adds a new predicate for the ActionButtonUpdate builder.
func (abu *ActionButtonUpdate) Where(ps ...predicate.ActionButton) *ActionButtonUpdate {
	abu.mutation.predicates = append(abu.mutation.predicates, ps...)
	return abu
}

// SetText sets the "text" field.
func (abu *ActionButtonUpdate) SetText(s string) *ActionButtonUpdate {
	abu.mutation.SetText(s)
	return abu
}

// SetURL sets the "url" field.
func (abu *ActionButtonUpdate) SetURL(s string) *ActionButtonUpdate {
	abu.mutation.SetURL(s)
	return abu
}

// Mutation returns the ActionButtonMutation object of the builder.
func (abu *ActionButtonUpdate) Mutation() *ActionButtonMutation {
	return abu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (abu *ActionButtonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(abu.hooks) == 0 {
		affected, err = abu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionButtonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			abu.mutation = mutation
			affected, err = abu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(abu.hooks) - 1; i >= 0; i-- {
			mut = abu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, abu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (abu *ActionButtonUpdate) SaveX(ctx context.Context) int {
	affected, err := abu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (abu *ActionButtonUpdate) Exec(ctx context.Context) error {
	_, err := abu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abu *ActionButtonUpdate) ExecX(ctx context.Context) {
	if err := abu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (abu *ActionButtonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actionbutton.Table,
			Columns: actionbutton.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actionbutton.FieldID,
			},
		},
	}
	if ps := abu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionbutton.FieldText,
		})
	}
	if value, ok := abu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionbutton.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, abu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionbutton.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActionButtonUpdateOne is the builder for updating a single ActionButton entity.
type ActionButtonUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActionButtonMutation
}

// SetText sets the "text" field.
func (abuo *ActionButtonUpdateOne) SetText(s string) *ActionButtonUpdateOne {
	abuo.mutation.SetText(s)
	return abuo
}

// SetURL sets the "url" field.
func (abuo *ActionButtonUpdateOne) SetURL(s string) *ActionButtonUpdateOne {
	abuo.mutation.SetURL(s)
	return abuo
}

// Mutation returns the ActionButtonMutation object of the builder.
func (abuo *ActionButtonUpdateOne) Mutation() *ActionButtonMutation {
	return abuo.mutation
}

// Save executes the query and returns the updated ActionButton entity.
func (abuo *ActionButtonUpdateOne) Save(ctx context.Context) (*ActionButton, error) {
	var (
		err  error
		node *ActionButton
	)
	if len(abuo.hooks) == 0 {
		node, err = abuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActionButtonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			abuo.mutation = mutation
			node, err = abuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(abuo.hooks) - 1; i >= 0; i-- {
			mut = abuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, abuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (abuo *ActionButtonUpdateOne) SaveX(ctx context.Context) *ActionButton {
	node, err := abuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (abuo *ActionButtonUpdateOne) Exec(ctx context.Context) error {
	_, err := abuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (abuo *ActionButtonUpdateOne) ExecX(ctx context.Context) {
	if err := abuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (abuo *ActionButtonUpdateOne) sqlSave(ctx context.Context) (_node *ActionButton, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actionbutton.Table,
			Columns: actionbutton.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: actionbutton.FieldID,
			},
		},
	}
	id, ok := abuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ActionButton.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := abuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := abuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionbutton.FieldText,
		})
	}
	if value, ok := abuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actionbutton.FieldURL,
		})
	}
	_node = &ActionButton{config: abuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, abuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionbutton.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
