// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// EmbedMessageQuery is the builder for querying EmbedMessage entities.
type EmbedMessageQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.EmbedMessage
	// eager-loading edges.
	withEmbedField *EmbedFieldQuery
	withMessage    *MessageQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmbedMessageQuery builder.
func (emq *EmbedMessageQuery) Where(ps ...predicate.EmbedMessage) *EmbedMessageQuery {
	emq.predicates = append(emq.predicates, ps...)
	return emq
}

// Limit adds a limit step to the query.
func (emq *EmbedMessageQuery) Limit(limit int) *EmbedMessageQuery {
	emq.limit = &limit
	return emq
}

// Offset adds an offset step to the query.
func (emq *EmbedMessageQuery) Offset(offset int) *EmbedMessageQuery {
	emq.offset = &offset
	return emq
}

// Order adds an order step to the query.
func (emq *EmbedMessageQuery) Order(o ...OrderFunc) *EmbedMessageQuery {
	emq.order = append(emq.order, o...)
	return emq
}

// QueryEmbedField chains the current query on the "embed_field" edge.
func (emq *EmbedMessageQuery) QueryEmbedField() *EmbedFieldQuery {
	query := &EmbedFieldQuery{config: emq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(embedmessage.Table, embedmessage.FieldID, selector),
			sqlgraph.To(embedfield.Table, embedfield.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, embedmessage.EmbedFieldTable, embedmessage.EmbedFieldColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMessage chains the current query on the "message" edge.
func (emq *EmbedMessageQuery) QueryMessage() *MessageQuery {
	query := &MessageQuery{config: emq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := emq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(embedmessage.Table, embedmessage.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, embedmessage.MessageTable, embedmessage.MessageColumn),
		)
		fromU = sqlgraph.SetNeighbors(emq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmbedMessage entity from the query.
// Returns a *NotFoundError when no EmbedMessage was found.
func (emq *EmbedMessageQuery) First(ctx context.Context) (*EmbedMessage, error) {
	nodes, err := emq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{embedmessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (emq *EmbedMessageQuery) FirstX(ctx context.Context) *EmbedMessage {
	node, err := emq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmbedMessage ID from the query.
// Returns a *NotFoundError when no EmbedMessage ID was found.
func (emq *EmbedMessageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = emq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{embedmessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (emq *EmbedMessageQuery) FirstIDX(ctx context.Context) int {
	id, err := emq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmbedMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one EmbedMessage entity is not found.
// Returns a *NotFoundError when no EmbedMessage entities are found.
func (emq *EmbedMessageQuery) Only(ctx context.Context) (*EmbedMessage, error) {
	nodes, err := emq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{embedmessage.Label}
	default:
		return nil, &NotSingularError{embedmessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (emq *EmbedMessageQuery) OnlyX(ctx context.Context) *EmbedMessage {
	node, err := emq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmbedMessage ID in the query.
// Returns a *NotSingularError when exactly one EmbedMessage ID is not found.
// Returns a *NotFoundError when no entities are found.
func (emq *EmbedMessageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = emq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = &NotSingularError{embedmessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (emq *EmbedMessageQuery) OnlyIDX(ctx context.Context) int {
	id, err := emq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmbedMessages.
func (emq *EmbedMessageQuery) All(ctx context.Context) ([]*EmbedMessage, error) {
	if err := emq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return emq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (emq *EmbedMessageQuery) AllX(ctx context.Context) []*EmbedMessage {
	nodes, err := emq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmbedMessage IDs.
func (emq *EmbedMessageQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := emq.Select(embedmessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (emq *EmbedMessageQuery) IDsX(ctx context.Context) []int {
	ids, err := emq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (emq *EmbedMessageQuery) Count(ctx context.Context) (int, error) {
	if err := emq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return emq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (emq *EmbedMessageQuery) CountX(ctx context.Context) int {
	count, err := emq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (emq *EmbedMessageQuery) Exist(ctx context.Context) (bool, error) {
	if err := emq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return emq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (emq *EmbedMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := emq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmbedMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (emq *EmbedMessageQuery) Clone() *EmbedMessageQuery {
	if emq == nil {
		return nil
	}
	return &EmbedMessageQuery{
		config:         emq.config,
		limit:          emq.limit,
		offset:         emq.offset,
		order:          append([]OrderFunc{}, emq.order...),
		predicates:     append([]predicate.EmbedMessage{}, emq.predicates...),
		withEmbedField: emq.withEmbedField.Clone(),
		withMessage:    emq.withMessage.Clone(),
		// clone intermediate query.
		sql:  emq.sql.Clone(),
		path: emq.path,
	}
}

// WithEmbedField tells the query-builder to eager-load the nodes that are connected to
// the "embed_field" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EmbedMessageQuery) WithEmbedField(opts ...func(*EmbedFieldQuery)) *EmbedMessageQuery {
	query := &EmbedFieldQuery{config: emq.config}
	for _, opt := range opts {
		opt(query)
	}
	emq.withEmbedField = query
	return emq
}

// WithMessage tells the query-builder to eager-load the nodes that are connected to
// the "message" edge. The optional arguments are used to configure the query builder of the edge.
func (emq *EmbedMessageQuery) WithMessage(opts ...func(*MessageQuery)) *EmbedMessageQuery {
	query := &MessageQuery{config: emq.config}
	for _, opt := range opts {
		opt(query)
	}
	emq.withMessage = query
	return emq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmbedMessage.Query().
//		GroupBy(embedmessage.FieldTitle).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
//
func (emq *EmbedMessageQuery) GroupBy(field string, fields ...string) *EmbedMessageGroupBy {
	group := &EmbedMessageGroupBy{config: emq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := emq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return emq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.EmbedMessage.Query().
//		Select(embedmessage.FieldTitle).
//		Scan(ctx, &v)
//
func (emq *EmbedMessageQuery) Select(field string, fields ...string) *EmbedMessageSelect {
	emq.fields = append([]string{field}, fields...)
	return &EmbedMessageSelect{EmbedMessageQuery: emq}
}

func (emq *EmbedMessageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range emq.fields {
		if !embedmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if emq.path != nil {
		prev, err := emq.path(ctx)
		if err != nil {
			return err
		}
		emq.sql = prev
	}
	return nil
}

func (emq *EmbedMessageQuery) sqlAll(ctx context.Context) ([]*EmbedMessage, error) {
	var (
		nodes       = []*EmbedMessage{}
		withFKs     = emq.withFKs
		_spec       = emq.querySpec()
		loadedTypes = [2]bool{
			emq.withEmbedField != nil,
			emq.withMessage != nil,
		}
	)
	if emq.withMessage != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, embedmessage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &EmbedMessage{config: emq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("entgen: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, emq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := emq.withEmbedField; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*EmbedMessage)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.EmbedField = []*EmbedField{}
		}
		query.withFKs = true
		query.Where(predicate.EmbedField(func(s *sql.Selector) {
			s.Where(sql.InValues(embedmessage.EmbedFieldColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.embed_message_embed_field
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "embed_message_embed_field" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "embed_message_embed_field" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.EmbedField = append(node.Edges.EmbedField, n)
		}
	}

	if query := emq.withMessage; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EmbedMessage)
		for i := range nodes {
			fk := nodes[i].message_embed_message
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(message.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "message_embed_message" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Message = n
			}
		}
	}

	return nodes, nil
}

func (emq *EmbedMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := emq.querySpec()
	return sqlgraph.CountNodes(ctx, emq.driver, _spec)
}

func (emq *EmbedMessageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := emq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("entgen: check existence: %w", err)
	}
	return n > 0, nil
}

func (emq *EmbedMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   embedmessage.Table,
			Columns: embedmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedmessage.FieldID,
			},
		},
		From:   emq.sql,
		Unique: true,
	}
	if fields := emq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, embedmessage.FieldID)
		for i := range fields {
			if fields[i] != embedmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := emq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := emq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := emq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := emq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, embedmessage.ValidColumn)
			}
		}
	}
	return _spec
}

func (emq *EmbedMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(emq.driver.Dialect())
	t1 := builder.Table(embedmessage.Table)
	selector := builder.Select(t1.Columns(embedmessage.Columns...)...).From(t1)
	if emq.sql != nil {
		selector = emq.sql
		selector.Select(selector.Columns(embedmessage.Columns...)...)
	}
	for _, p := range emq.predicates {
		p(selector)
	}
	for _, p := range emq.order {
		p(selector, embedmessage.ValidColumn)
	}
	if offset := emq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := emq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmbedMessageGroupBy is the group-by builder for EmbedMessage entities.
type EmbedMessageGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (emgb *EmbedMessageGroupBy) Aggregate(fns ...AggregateFunc) *EmbedMessageGroupBy {
	emgb.fns = append(emgb.fns, fns...)
	return emgb
}

// Scan applies the group-by query and scans the result into the given value.
func (emgb *EmbedMessageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := emgb.path(ctx)
	if err != nil {
		return err
	}
	emgb.sql = query
	return emgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := emgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(emgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := emgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) StringsX(ctx context.Context) []string {
	v, err := emgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = emgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) StringX(ctx context.Context) string {
	v, err := emgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(emgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := emgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) IntsX(ctx context.Context) []int {
	v, err := emgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = emgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) IntX(ctx context.Context) int {
	v, err := emgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(emgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := emgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := emgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = emgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) Float64X(ctx context.Context) float64 {
	v, err := emgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(emgb.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := emgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := emgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (emgb *EmbedMessageGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = emgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (emgb *EmbedMessageGroupBy) BoolX(ctx context.Context) bool {
	v, err := emgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (emgb *EmbedMessageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range emgb.fields {
		if !embedmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := emgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := emgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (emgb *EmbedMessageGroupBy) sqlQuery() *sql.Selector {
	selector := emgb.sql
	columns := make([]string, 0, len(emgb.fields)+len(emgb.fns))
	columns = append(columns, emgb.fields...)
	for _, fn := range emgb.fns {
		columns = append(columns, fn(selector, embedmessage.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(emgb.fields...)
}

// EmbedMessageSelect is the builder for selecting fields of EmbedMessage entities.
type EmbedMessageSelect struct {
	*EmbedMessageQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ems *EmbedMessageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ems.prepareQuery(ctx); err != nil {
		return err
	}
	ems.sql = ems.EmbedMessageQuery.sqlQuery(ctx)
	return ems.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ems *EmbedMessageSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ems.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ems.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ems.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ems *EmbedMessageSelect) StringsX(ctx context.Context) []string {
	v, err := ems.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ems.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ems *EmbedMessageSelect) StringX(ctx context.Context) string {
	v, err := ems.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ems.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ems.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ems *EmbedMessageSelect) IntsX(ctx context.Context) []int {
	v, err := ems.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ems.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ems *EmbedMessageSelect) IntX(ctx context.Context) int {
	v, err := ems.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ems.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ems.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ems *EmbedMessageSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ems.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ems.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ems *EmbedMessageSelect) Float64X(ctx context.Context) float64 {
	v, err := ems.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ems.fields) > 1 {
		return nil, errors.New("entgen: EmbedMessageSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ems.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ems *EmbedMessageSelect) BoolsX(ctx context.Context) []bool {
	v, err := ems.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ems *EmbedMessageSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ems.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{embedmessage.Label}
	default:
		err = fmt.Errorf("entgen: EmbedMessageSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ems *EmbedMessageSelect) BoolX(ctx context.Context) bool {
	v, err := ems.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ems *EmbedMessageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ems.sqlQuery().Query()
	if err := ems.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ems *EmbedMessageSelect) sqlQuery() sql.Querier {
	selector := ems.sql
	selector.Select(selector.Columns(ems.fields...)...)
	return selector
}
