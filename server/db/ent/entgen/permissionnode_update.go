// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/permissionnode"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/role"
)

// PermissionNodeUpdate is the builder for updating PermissionNode entities.
type PermissionNodeUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionNodeMutation
}

// Where adds a new predicate for the PermissionNodeUpdate builder.
func (pnu *PermissionNodeUpdate) Where(ps ...predicate.PermissionNode) *PermissionNodeUpdate {
	pnu.mutation.predicates = append(pnu.mutation.predicates, ps...)
	return pnu
}

// SetNode sets the "node" field.
func (pnu *PermissionNodeUpdate) SetNode(s string) *PermissionNodeUpdate {
	pnu.mutation.SetNode(s)
	return pnu
}

// SetAllow sets the "allow" field.
func (pnu *PermissionNodeUpdate) SetAllow(b bool) *PermissionNodeUpdate {
	pnu.mutation.SetAllow(b)
	return pnu
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (pnu *PermissionNodeUpdate) SetRoleID(id uint64) *PermissionNodeUpdate {
	pnu.mutation.SetRoleID(id)
	return pnu
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (pnu *PermissionNodeUpdate) SetNillableRoleID(id *uint64) *PermissionNodeUpdate {
	if id != nil {
		pnu = pnu.SetRoleID(*id)
	}
	return pnu
}

// SetRole sets the "role" edge to the Role entity.
func (pnu *PermissionNodeUpdate) SetRole(r *Role) *PermissionNodeUpdate {
	return pnu.SetRoleID(r.ID)
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (pnu *PermissionNodeUpdate) SetGuildID(id uint64) *PermissionNodeUpdate {
	pnu.mutation.SetGuildID(id)
	return pnu
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (pnu *PermissionNodeUpdate) SetNillableGuildID(id *uint64) *PermissionNodeUpdate {
	if id != nil {
		pnu = pnu.SetGuildID(*id)
	}
	return pnu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (pnu *PermissionNodeUpdate) SetGuild(g *Guild) *PermissionNodeUpdate {
	return pnu.SetGuildID(g.ID)
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (pnu *PermissionNodeUpdate) SetChannelID(id uint64) *PermissionNodeUpdate {
	pnu.mutation.SetChannelID(id)
	return pnu
}

// SetNillableChannelID sets the "channel" edge to the Channel entity by ID if the given value is not nil.
func (pnu *PermissionNodeUpdate) SetNillableChannelID(id *uint64) *PermissionNodeUpdate {
	if id != nil {
		pnu = pnu.SetChannelID(*id)
	}
	return pnu
}

// SetChannel sets the "channel" edge to the Channel entity.
func (pnu *PermissionNodeUpdate) SetChannel(c *Channel) *PermissionNodeUpdate {
	return pnu.SetChannelID(c.ID)
}

// Mutation returns the PermissionNodeMutation object of the builder.
func (pnu *PermissionNodeUpdate) Mutation() *PermissionNodeMutation {
	return pnu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (pnu *PermissionNodeUpdate) ClearRole() *PermissionNodeUpdate {
	pnu.mutation.ClearRole()
	return pnu
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (pnu *PermissionNodeUpdate) ClearGuild() *PermissionNodeUpdate {
	pnu.mutation.ClearGuild()
	return pnu
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (pnu *PermissionNodeUpdate) ClearChannel() *PermissionNodeUpdate {
	pnu.mutation.ClearChannel()
	return pnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pnu *PermissionNodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pnu.hooks) == 0 {
		affected, err = pnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionNodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pnu.mutation = mutation
			affected, err = pnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pnu.hooks) - 1; i >= 0; i-- {
			mut = pnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pnu *PermissionNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := pnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pnu *PermissionNodeUpdate) Exec(ctx context.Context) error {
	_, err := pnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnu *PermissionNodeUpdate) ExecX(ctx context.Context) {
	if err := pnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pnu *PermissionNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permissionnode.Table,
			Columns: permissionnode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permissionnode.FieldID,
			},
		},
	}
	if ps := pnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pnu.mutation.Node(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionnode.FieldNode,
		})
	}
	if value, ok := pnu.mutation.Allow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permissionnode.FieldAllow,
		})
	}
	if pnu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.RoleTable,
			Columns: []string{permissionnode.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.RoleTable,
			Columns: []string{permissionnode.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.GuildTable,
			Columns: []string{permissionnode.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.GuildTable,
			Columns: []string{permissionnode.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.ChannelTable,
			Columns: []string{permissionnode.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.ChannelTable,
			Columns: []string{permissionnode.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionnode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PermissionNodeUpdateOne is the builder for updating a single PermissionNode entity.
type PermissionNodeUpdateOne struct {
	config
	hooks    []Hook
	mutation *PermissionNodeMutation
}

// SetNode sets the "node" field.
func (pnuo *PermissionNodeUpdateOne) SetNode(s string) *PermissionNodeUpdateOne {
	pnuo.mutation.SetNode(s)
	return pnuo
}

// SetAllow sets the "allow" field.
func (pnuo *PermissionNodeUpdateOne) SetAllow(b bool) *PermissionNodeUpdateOne {
	pnuo.mutation.SetAllow(b)
	return pnuo
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (pnuo *PermissionNodeUpdateOne) SetRoleID(id uint64) *PermissionNodeUpdateOne {
	pnuo.mutation.SetRoleID(id)
	return pnuo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (pnuo *PermissionNodeUpdateOne) SetNillableRoleID(id *uint64) *PermissionNodeUpdateOne {
	if id != nil {
		pnuo = pnuo.SetRoleID(*id)
	}
	return pnuo
}

// SetRole sets the "role" edge to the Role entity.
func (pnuo *PermissionNodeUpdateOne) SetRole(r *Role) *PermissionNodeUpdateOne {
	return pnuo.SetRoleID(r.ID)
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (pnuo *PermissionNodeUpdateOne) SetGuildID(id uint64) *PermissionNodeUpdateOne {
	pnuo.mutation.SetGuildID(id)
	return pnuo
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (pnuo *PermissionNodeUpdateOne) SetNillableGuildID(id *uint64) *PermissionNodeUpdateOne {
	if id != nil {
		pnuo = pnuo.SetGuildID(*id)
	}
	return pnuo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (pnuo *PermissionNodeUpdateOne) SetGuild(g *Guild) *PermissionNodeUpdateOne {
	return pnuo.SetGuildID(g.ID)
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (pnuo *PermissionNodeUpdateOne) SetChannelID(id uint64) *PermissionNodeUpdateOne {
	pnuo.mutation.SetChannelID(id)
	return pnuo
}

// SetNillableChannelID sets the "channel" edge to the Channel entity by ID if the given value is not nil.
func (pnuo *PermissionNodeUpdateOne) SetNillableChannelID(id *uint64) *PermissionNodeUpdateOne {
	if id != nil {
		pnuo = pnuo.SetChannelID(*id)
	}
	return pnuo
}

// SetChannel sets the "channel" edge to the Channel entity.
func (pnuo *PermissionNodeUpdateOne) SetChannel(c *Channel) *PermissionNodeUpdateOne {
	return pnuo.SetChannelID(c.ID)
}

// Mutation returns the PermissionNodeMutation object of the builder.
func (pnuo *PermissionNodeUpdateOne) Mutation() *PermissionNodeMutation {
	return pnuo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (pnuo *PermissionNodeUpdateOne) ClearRole() *PermissionNodeUpdateOne {
	pnuo.mutation.ClearRole()
	return pnuo
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (pnuo *PermissionNodeUpdateOne) ClearGuild() *PermissionNodeUpdateOne {
	pnuo.mutation.ClearGuild()
	return pnuo
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (pnuo *PermissionNodeUpdateOne) ClearChannel() *PermissionNodeUpdateOne {
	pnuo.mutation.ClearChannel()
	return pnuo
}

// Save executes the query and returns the updated PermissionNode entity.
func (pnuo *PermissionNodeUpdateOne) Save(ctx context.Context) (*PermissionNode, error) {
	var (
		err  error
		node *PermissionNode
	)
	if len(pnuo.hooks) == 0 {
		node, err = pnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionNodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pnuo.mutation = mutation
			node, err = pnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pnuo.hooks) - 1; i >= 0; i-- {
			mut = pnuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pnuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pnuo *PermissionNodeUpdateOne) SaveX(ctx context.Context) *PermissionNode {
	node, err := pnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pnuo *PermissionNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := pnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pnuo *PermissionNodeUpdateOne) ExecX(ctx context.Context) {
	if err := pnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pnuo *PermissionNodeUpdateOne) sqlSave(ctx context.Context) (_node *PermissionNode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permissionnode.Table,
			Columns: permissionnode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permissionnode.FieldID,
			},
		},
	}
	id, ok := pnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PermissionNode.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := pnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pnuo.mutation.Node(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionnode.FieldNode,
		})
	}
	if value, ok := pnuo.mutation.Allow(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permissionnode.FieldAllow,
		})
	}
	if pnuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.RoleTable,
			Columns: []string{permissionnode.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.RoleTable,
			Columns: []string{permissionnode.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnuo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.GuildTable,
			Columns: []string{permissionnode.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.GuildTable,
			Columns: []string{permissionnode.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pnuo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.ChannelTable,
			Columns: []string{permissionnode.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pnuo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.ChannelTable,
			Columns: []string{permissionnode.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PermissionNode{config: pnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionnode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
