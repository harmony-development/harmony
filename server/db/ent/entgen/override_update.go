// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/override"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// OverrideUpdate is the builder for updating Override entities.
type OverrideUpdate struct {
	config
	hooks    []Hook
	mutation *OverrideMutation
}

// Where adds a new predicate for the OverrideUpdate builder.
func (ou *OverrideUpdate) Where(ps ...predicate.Override) *OverrideUpdate {
	ou.mutation.predicates = append(ou.mutation.predicates, ps...)
	return ou
}

// SetUsername sets the "username" field.
func (ou *OverrideUpdate) SetUsername(s string) *OverrideUpdate {
	ou.mutation.SetUsername(s)
	return ou
}

// SetAvatar sets the "avatar" field.
func (ou *OverrideUpdate) SetAvatar(s string) *OverrideUpdate {
	ou.mutation.SetAvatar(s)
	return ou
}

// SetReason sets the "reason" field.
func (ou *OverrideUpdate) SetReason(i int64) *OverrideUpdate {
	ou.mutation.ResetReason()
	ou.mutation.SetReason(i)
	return ou
}

// AddReason adds i to the "reason" field.
func (ou *OverrideUpdate) AddReason(i int64) *OverrideUpdate {
	ou.mutation.AddReason(i)
	return ou
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (ou *OverrideUpdate) SetMessageID(id uint64) *OverrideUpdate {
	ou.mutation.SetMessageID(id)
	return ou
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (ou *OverrideUpdate) SetNillableMessageID(id *uint64) *OverrideUpdate {
	if id != nil {
		ou = ou.SetMessageID(*id)
	}
	return ou
}

// SetMessage sets the "message" edge to the Message entity.
func (ou *OverrideUpdate) SetMessage(m *Message) *OverrideUpdate {
	return ou.SetMessageID(m.ID)
}

// Mutation returns the OverrideMutation object of the builder.
func (ou *OverrideUpdate) Mutation() *OverrideMutation {
	return ou.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (ou *OverrideUpdate) ClearMessage() *OverrideUpdate {
	ou.mutation.ClearMessage()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OverrideUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OverrideMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OverrideUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OverrideUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OverrideUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OverrideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   override.Table,
			Columns: override.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: override.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: override.FieldUsername,
		})
	}
	if value, ok := ou.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: override.FieldAvatar,
		})
	}
	if value, ok := ou.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: override.FieldReason,
		})
	}
	if value, ok := ou.mutation.AddedReason(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: override.FieldReason,
		})
	}
	if ou.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   override.MessageTable,
			Columns: []string{override.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   override.MessageTable,
			Columns: []string{override.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{override.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OverrideUpdateOne is the builder for updating a single Override entity.
type OverrideUpdateOne struct {
	config
	hooks    []Hook
	mutation *OverrideMutation
}

// SetUsername sets the "username" field.
func (ouo *OverrideUpdateOne) SetUsername(s string) *OverrideUpdateOne {
	ouo.mutation.SetUsername(s)
	return ouo
}

// SetAvatar sets the "avatar" field.
func (ouo *OverrideUpdateOne) SetAvatar(s string) *OverrideUpdateOne {
	ouo.mutation.SetAvatar(s)
	return ouo
}

// SetReason sets the "reason" field.
func (ouo *OverrideUpdateOne) SetReason(i int64) *OverrideUpdateOne {
	ouo.mutation.ResetReason()
	ouo.mutation.SetReason(i)
	return ouo
}

// AddReason adds i to the "reason" field.
func (ouo *OverrideUpdateOne) AddReason(i int64) *OverrideUpdateOne {
	ouo.mutation.AddReason(i)
	return ouo
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (ouo *OverrideUpdateOne) SetMessageID(id uint64) *OverrideUpdateOne {
	ouo.mutation.SetMessageID(id)
	return ouo
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (ouo *OverrideUpdateOne) SetNillableMessageID(id *uint64) *OverrideUpdateOne {
	if id != nil {
		ouo = ouo.SetMessageID(*id)
	}
	return ouo
}

// SetMessage sets the "message" edge to the Message entity.
func (ouo *OverrideUpdateOne) SetMessage(m *Message) *OverrideUpdateOne {
	return ouo.SetMessageID(m.ID)
}

// Mutation returns the OverrideMutation object of the builder.
func (ouo *OverrideUpdateOne) Mutation() *OverrideMutation {
	return ouo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (ouo *OverrideUpdateOne) ClearMessage() *OverrideUpdateOne {
	ouo.mutation.ClearMessage()
	return ouo
}

// Save executes the query and returns the updated Override entity.
func (ouo *OverrideUpdateOne) Save(ctx context.Context) (*Override, error) {
	var (
		err  error
		node *Override
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OverrideMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OverrideUpdateOne) SaveX(ctx context.Context) *Override {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OverrideUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OverrideUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OverrideUpdateOne) sqlSave(ctx context.Context) (_node *Override, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   override.Table,
			Columns: override.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: override.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Override.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: override.FieldUsername,
		})
	}
	if value, ok := ouo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: override.FieldAvatar,
		})
	}
	if value, ok := ouo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: override.FieldReason,
		})
	}
	if value, ok := ouo.mutation.AddedReason(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: override.FieldReason,
		})
	}
	if ouo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   override.MessageTable,
			Columns: []string{override.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   override.MessageTable,
			Columns: []string{override.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Override{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{override.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
