// Code generated by sqlc. DO NOT EDIT.
// source: messages.sql

package queries

import (
	"context"
	"time"
)

const addAttachment = `-- name: AddAttachment :exec
INSERT INTO Attachments(
    Message_ID, Attachment_URL
) VALUES (
    $1, $2
)
`

type AddAttachmentParams struct {
	MessageID     int64  `json:"message_id"`
	AttachmentUrl string `json:"attachment_url"`
}

func (q *Queries) AddAttachment(ctx context.Context, arg AddAttachmentParams) error {
	_, err := q.exec(ctx, q.addAttachmentStmt, addAttachment, arg.MessageID, arg.AttachmentUrl)
	return err
}

const addMessage = `-- name: AddMessage :one
INSERT INTO Messages (
    Guild_ID, Channel_ID, User_ID, Content, Created_At
) VALUES (
    $1, $2, $3, $4, NOW()
)
RETURNING message_id, guild_id, channel_id, user_id, created_at, edited_at, content
`

type AddMessageParams struct {
	GuildID   int64  `json:"guild_id"`
	ChannelID int64  `json:"channel_id"`
	UserID    int64  `json:"user_id"`
	Content   string `json:"content"`
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.addMessageStmt, addMessage,
		arg.GuildID,
		arg.ChannelID,
		arg.UserID,
		arg.Content,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.GuildID,
		&i.ChannelID,
		&i.UserID,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Content,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :execrows
DELETE FROM Messages
    WHERE Message_ID = $1
    AND Channel_ID = $2
    AND Guild_ID = $3
`

type DeleteMessageParams struct {
	MessageID int64 `json:"message_id"`
	ChannelID int64 `json:"channel_id"`
	GuildID   int64 `json:"guild_id"`
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteMessageStmt, deleteMessage, arg.MessageID, arg.ChannelID, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAttachments = `-- name: GetAttachments :many
SELECT Attachment_URL FROM Attachments
    WHERE Message_ID = $1
`

func (q *Queries) GetAttachments(ctx context.Context, messageID int64) ([]string, error) {
	rows, err := q.query(ctx, q.getAttachmentsStmt, getAttachments, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var attachment_url string
		if err := rows.Scan(&attachment_url); err != nil {
			return nil, err
		}
		items = append(items, attachment_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageAuthor = `-- name: GetMessageAuthor :one
SELECT User_ID FROM Messages
    WHERE Message_ID = $1
`

func (q *Queries) GetMessageAuthor(ctx context.Context, messageID int64) (int64, error) {
	row := q.queryRow(ctx, q.getMessageAuthorStmt, getMessageAuthor, messageID)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getMessageDate = `-- name: GetMessageDate :one
SELECT Created_At FROM Messages
    WHERE Message_ID = $1
`

func (q *Queries) GetMessageDate(ctx context.Context, messageID int64) (time.Time, error) {
	row := q.queryRow(ctx, q.getMessageDateStmt, getMessageDate, messageID)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const getMessages = `-- name: GetMessages :many
SELECT Message_ID, User_ID, Content, Created_At FROM Messages
    WHERE Guild_ID = $1
    AND Channel_ID = $2
    AND Created_At < $3
    ORDER BY Created_At DESC
    LIMIT $4
`

type GetMessagesParams struct {
	Guildid   int64     `json:"guildid"`
	Channelid int64     `json:"channelid"`
	Before    time.Time `json:"before"`
	Max       int32     `json:"max"`
}

type GetMessagesRow struct {
	MessageID int64     `json:"message_id"`
	UserID    int64     `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]GetMessagesRow, error) {
	rows, err := q.query(ctx, q.getMessagesStmt, getMessages,
		arg.Guildid,
		arg.Channelid,
		arg.Before,
		arg.Max,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesRow
	for rows.Next() {
		var i GetMessagesRow
		if err := rows.Scan(
			&i.MessageID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
