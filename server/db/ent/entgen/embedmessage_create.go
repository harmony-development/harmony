// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
)

// EmbedMessageCreate is the builder for creating a EmbedMessage entity.
type EmbedMessageCreate struct {
	config
	mutation *EmbedMessageMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (emc *EmbedMessageCreate) SetTitle(s string) *EmbedMessageCreate {
	emc.mutation.SetTitle(s)
	return emc
}

// SetBody sets the "body" field.
func (emc *EmbedMessageCreate) SetBody(s string) *EmbedMessageCreate {
	emc.mutation.SetBody(s)
	return emc
}

// SetColor sets the "color" field.
func (emc *EmbedMessageCreate) SetColor(i int64) *EmbedMessageCreate {
	emc.mutation.SetColor(i)
	return emc
}

// SetHeaderText sets the "header_text" field.
func (emc *EmbedMessageCreate) SetHeaderText(s string) *EmbedMessageCreate {
	emc.mutation.SetHeaderText(s)
	return emc
}

// SetHeaderSubtext sets the "header_subtext" field.
func (emc *EmbedMessageCreate) SetHeaderSubtext(s string) *EmbedMessageCreate {
	emc.mutation.SetHeaderSubtext(s)
	return emc
}

// SetHeaderURL sets the "header_url" field.
func (emc *EmbedMessageCreate) SetHeaderURL(s string) *EmbedMessageCreate {
	emc.mutation.SetHeaderURL(s)
	return emc
}

// SetHeaderIcon sets the "header_icon" field.
func (emc *EmbedMessageCreate) SetHeaderIcon(s string) *EmbedMessageCreate {
	emc.mutation.SetHeaderIcon(s)
	return emc
}

// SetFooterText sets the "footer_text" field.
func (emc *EmbedMessageCreate) SetFooterText(s string) *EmbedMessageCreate {
	emc.mutation.SetFooterText(s)
	return emc
}

// SetFooterSubtext sets the "footer_subtext" field.
func (emc *EmbedMessageCreate) SetFooterSubtext(s string) *EmbedMessageCreate {
	emc.mutation.SetFooterSubtext(s)
	return emc
}

// SetFooterURL sets the "footer_url" field.
func (emc *EmbedMessageCreate) SetFooterURL(s string) *EmbedMessageCreate {
	emc.mutation.SetFooterURL(s)
	return emc
}

// SetFooterIcon sets the "footer_icon" field.
func (emc *EmbedMessageCreate) SetFooterIcon(s string) *EmbedMessageCreate {
	emc.mutation.SetFooterIcon(s)
	return emc
}

// AddEmbedFieldIDs adds the "embed_field" edge to the EmbedField entity by IDs.
func (emc *EmbedMessageCreate) AddEmbedFieldIDs(ids ...int) *EmbedMessageCreate {
	emc.mutation.AddEmbedFieldIDs(ids...)
	return emc
}

// AddEmbedField adds the "embed_field" edges to the EmbedField entity.
func (emc *EmbedMessageCreate) AddEmbedField(e ...*EmbedField) *EmbedMessageCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return emc.AddEmbedFieldIDs(ids...)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (emc *EmbedMessageCreate) SetMessageID(id uint64) *EmbedMessageCreate {
	emc.mutation.SetMessageID(id)
	return emc
}

// SetNillableMessageID sets the "message" edge to the Message entity by ID if the given value is not nil.
func (emc *EmbedMessageCreate) SetNillableMessageID(id *uint64) *EmbedMessageCreate {
	if id != nil {
		emc = emc.SetMessageID(*id)
	}
	return emc
}

// SetMessage sets the "message" edge to the Message entity.
func (emc *EmbedMessageCreate) SetMessage(m *Message) *EmbedMessageCreate {
	return emc.SetMessageID(m.ID)
}

// Mutation returns the EmbedMessageMutation object of the builder.
func (emc *EmbedMessageCreate) Mutation() *EmbedMessageMutation {
	return emc.mutation
}

// Save creates the EmbedMessage in the database.
func (emc *EmbedMessageCreate) Save(ctx context.Context) (*EmbedMessage, error) {
	var (
		err  error
		node *EmbedMessage
	)
	if len(emc.hooks) == 0 {
		if err = emc.check(); err != nil {
			return nil, err
		}
		node, err = emc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmbedMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = emc.check(); err != nil {
				return nil, err
			}
			emc.mutation = mutation
			node, err = emc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(emc.hooks) - 1; i >= 0; i-- {
			mut = emc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, emc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (emc *EmbedMessageCreate) SaveX(ctx context.Context) *EmbedMessage {
	v, err := emc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (emc *EmbedMessageCreate) check() error {
	if _, ok := emc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New("entgen: missing required field \"title\"")}
	}
	if _, ok := emc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New("entgen: missing required field \"body\"")}
	}
	if _, ok := emc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New("entgen: missing required field \"color\"")}
	}
	if _, ok := emc.mutation.HeaderText(); !ok {
		return &ValidationError{Name: "header_text", err: errors.New("entgen: missing required field \"header_text\"")}
	}
	if _, ok := emc.mutation.HeaderSubtext(); !ok {
		return &ValidationError{Name: "header_subtext", err: errors.New("entgen: missing required field \"header_subtext\"")}
	}
	if _, ok := emc.mutation.HeaderURL(); !ok {
		return &ValidationError{Name: "header_url", err: errors.New("entgen: missing required field \"header_url\"")}
	}
	if _, ok := emc.mutation.HeaderIcon(); !ok {
		return &ValidationError{Name: "header_icon", err: errors.New("entgen: missing required field \"header_icon\"")}
	}
	if _, ok := emc.mutation.FooterText(); !ok {
		return &ValidationError{Name: "footer_text", err: errors.New("entgen: missing required field \"footer_text\"")}
	}
	if _, ok := emc.mutation.FooterSubtext(); !ok {
		return &ValidationError{Name: "footer_subtext", err: errors.New("entgen: missing required field \"footer_subtext\"")}
	}
	if _, ok := emc.mutation.FooterURL(); !ok {
		return &ValidationError{Name: "footer_url", err: errors.New("entgen: missing required field \"footer_url\"")}
	}
	if _, ok := emc.mutation.FooterIcon(); !ok {
		return &ValidationError{Name: "footer_icon", err: errors.New("entgen: missing required field \"footer_icon\"")}
	}
	return nil
}

func (emc *EmbedMessageCreate) sqlSave(ctx context.Context) (*EmbedMessage, error) {
	_node, _spec := emc.createSpec()
	if err := sqlgraph.CreateNode(ctx, emc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (emc *EmbedMessageCreate) createSpec() (*EmbedMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &EmbedMessage{config: emc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: embedmessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: embedmessage.FieldID,
			},
		}
	)
	if value, ok := emc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := emc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := emc.mutation.Color(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: embedmessage.FieldColor,
		})
		_node.Color = value
	}
	if value, ok := emc.mutation.HeaderText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldHeaderText,
		})
		_node.HeaderText = value
	}
	if value, ok := emc.mutation.HeaderSubtext(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldHeaderSubtext,
		})
		_node.HeaderSubtext = value
	}
	if value, ok := emc.mutation.HeaderURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldHeaderURL,
		})
		_node.HeaderURL = value
	}
	if value, ok := emc.mutation.HeaderIcon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldHeaderIcon,
		})
		_node.HeaderIcon = value
	}
	if value, ok := emc.mutation.FooterText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldFooterText,
		})
		_node.FooterText = value
	}
	if value, ok := emc.mutation.FooterSubtext(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldFooterSubtext,
		})
		_node.FooterSubtext = value
	}
	if value, ok := emc.mutation.FooterURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldFooterURL,
		})
		_node.FooterURL = value
	}
	if value, ok := emc.mutation.FooterIcon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: embedmessage.FieldFooterIcon,
		})
		_node.FooterIcon = value
	}
	if nodes := emc.mutation.EmbedFieldIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   embedmessage.EmbedFieldTable,
			Columns: []string{embedmessage.EmbedFieldColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: embedfield.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := emc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   embedmessage.MessageTable,
			Columns: []string{embedmessage.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_embed_message = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmbedMessageCreateBulk is the builder for creating many EmbedMessage entities in bulk.
type EmbedMessageCreateBulk struct {
	config
	builders []*EmbedMessageCreate
}

// Save creates the EmbedMessage entities in the database.
func (emcb *EmbedMessageCreateBulk) Save(ctx context.Context) ([]*EmbedMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(emcb.builders))
	nodes := make([]*EmbedMessage, len(emcb.builders))
	mutators := make([]Mutator, len(emcb.builders))
	for i := range emcb.builders {
		func(i int, root context.Context) {
			builder := emcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmbedMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, emcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, emcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, emcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (emcb *EmbedMessageCreateBulk) SaveX(ctx context.Context) []*EmbedMessage {
	v, err := emcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
