// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
)

// EmoteUpdate is the builder for updating Emote entities.
type EmoteUpdate struct {
	config
	hooks    []Hook
	mutation *EmoteMutation
}

// Where adds a new predicate for the EmoteUpdate builder.
func (eu *EmoteUpdate) Where(ps ...predicate.Emote) *EmoteUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EmoteUpdate) SetName(s string) *EmoteUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetEmotepackID sets the "emotepack" edge to the EmotePack entity by ID.
func (eu *EmoteUpdate) SetEmotepackID(id uint64) *EmoteUpdate {
	eu.mutation.SetEmotepackID(id)
	return eu
}

// SetNillableEmotepackID sets the "emotepack" edge to the EmotePack entity by ID if the given value is not nil.
func (eu *EmoteUpdate) SetNillableEmotepackID(id *uint64) *EmoteUpdate {
	if id != nil {
		eu = eu.SetEmotepackID(*id)
	}
	return eu
}

// SetEmotepack sets the "emotepack" edge to the EmotePack entity.
func (eu *EmoteUpdate) SetEmotepack(e *EmotePack) *EmoteUpdate {
	return eu.SetEmotepackID(e.ID)
}

// Mutation returns the EmoteMutation object of the builder.
func (eu *EmoteUpdate) Mutation() *EmoteMutation {
	return eu.mutation
}

// ClearEmotepack clears the "emotepack" edge to the EmotePack entity.
func (eu *EmoteUpdate) ClearEmotepack() *EmoteUpdate {
	eu.mutation.ClearEmotepack()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmoteUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmoteUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmoteUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emote.Table,
			Columns: emote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emote.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emote.FieldName,
		})
	}
	if eu.mutation.EmotepackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emote.EmotepackTable,
			Columns: []string{emote.EmotepackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: emotepack.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmotepackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emote.EmotepackTable,
			Columns: []string{emote.EmotepackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: emotepack.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emote.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmoteUpdateOne is the builder for updating a single Emote entity.
type EmoteUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmoteMutation
}

// SetName sets the "name" field.
func (euo *EmoteUpdateOne) SetName(s string) *EmoteUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetEmotepackID sets the "emotepack" edge to the EmotePack entity by ID.
func (euo *EmoteUpdateOne) SetEmotepackID(id uint64) *EmoteUpdateOne {
	euo.mutation.SetEmotepackID(id)
	return euo
}

// SetNillableEmotepackID sets the "emotepack" edge to the EmotePack entity by ID if the given value is not nil.
func (euo *EmoteUpdateOne) SetNillableEmotepackID(id *uint64) *EmoteUpdateOne {
	if id != nil {
		euo = euo.SetEmotepackID(*id)
	}
	return euo
}

// SetEmotepack sets the "emotepack" edge to the EmotePack entity.
func (euo *EmoteUpdateOne) SetEmotepack(e *EmotePack) *EmoteUpdateOne {
	return euo.SetEmotepackID(e.ID)
}

// Mutation returns the EmoteMutation object of the builder.
func (euo *EmoteUpdateOne) Mutation() *EmoteMutation {
	return euo.mutation
}

// ClearEmotepack clears the "emotepack" edge to the EmotePack entity.
func (euo *EmoteUpdateOne) ClearEmotepack() *EmoteUpdateOne {
	euo.mutation.ClearEmotepack()
	return euo
}

// Save executes the query and returns the updated Emote entity.
func (euo *EmoteUpdateOne) Save(ctx context.Context) (*Emote, error) {
	var (
		err  error
		node *Emote
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmoteUpdateOne) SaveX(ctx context.Context) *Emote {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmoteUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmoteUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmoteUpdateOne) sqlSave(ctx context.Context) (_node *Emote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emote.Table,
			Columns: emote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emote.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Emote.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emote.FieldName,
		})
	}
	if euo.mutation.EmotepackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emote.EmotepackTable,
			Columns: []string{emote.EmotepackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: emotepack.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmotepackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emote.EmotepackTable,
			Columns: []string{emote.EmotepackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: emotepack.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Emote{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emote.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
