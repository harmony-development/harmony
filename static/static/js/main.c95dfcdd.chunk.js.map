{"version":3,"sources":["types/redux.ts","Root/App/HarmonyBar/HarmonyBarStyle.ts","Root/App/HarmonyBar/HarmonyBar.tsx","Root/App/Dialog/ColorPicker.tsx","Root/App/Dialog/ThemeDialog.tsx","Root/App/AppStyle.ts","Root/App/ChatArea/ChatAreaStyle.ts","Root/App/ChatArea/Messages/Message.tsx","Root/App/ChatArea/Messages/Messages.tsx","Root/App/ChatArea/Input/Input.tsx","Root/App/ChatArea/GuildList/GuildListStyle.ts","redux/Dispatches.ts","Root/App/ChatArea/GuildList/GuildIcon.tsx","Root/App/ChatArea/GuildList/GuildList.tsx","Root/App/ChatArea/ChannelList/ChannelListStyle.ts","Root/App/ChatArea/ChannelList/ChannelList.tsx","Root/App/ChatArea/ChatArea.tsx","Root/App/Dialog/JoinGuildDialog/JoinGuild.tsx","Root/App/Dialog/GuildSettingsDialog/GuildSettingsStyle.ts","Root/App/Dialog/GuildSettingsDialog/GuildSettings.tsx","Root/App/Dialog/UserSettingsDialog/UserSettingsStyle.ts","Root/App/Dialog/UserSettingsDialog/UserSettingsDialog.tsx","Root/App/App.tsx","Root/Entry/EntryStyle.ts","Root/Entry/Login/LoginStyle.ts","Root/Entry/Login/Login.tsx","Root/Entry/Register/RegisterStyle.ts","Root/Entry/Register/Register.tsx","Root/Entry/Entry.tsx","socket/socket.ts","Root/RootStyle.ts","Root/InviteHandler/InviteHandlerStyle.tsx","Root/InviteHandler/HandleInvite.tsx","Root/Root.tsx","redux/AppReducer.ts","redux/store.ts","index.tsx"],"names":["Actions","useHarmonyBarStyles","makeStyles","theme","leftMenuBtn","marginRight","spacing","title","flexGrow","HarmonyBar","classes","dispatch","useDispatch","AppBar","position","Toolbar","IconButton","edge","color","className","Typography","variant","onClick","type","TOGGLE_THEME_DIALOG","TOGGLE_USER_SETTINGS_DIALOG","ColorPicker","state","label","style","display","ButtonBase","backgroundColor","red","width","height","setColor","undefined","orange","yellow","green","blue","indigo","ThemeDialog","useSelector","themeDialog","inputStyle","open","themeType","useState","primary","setPrimary","secondary","setSecondary","useEffect","CHANGE_PRIMARY","payload","CHANGE_SECONDARY","Dialog","onClose","DialogTitle","DialogContent","FormControl","component","FormLabel","RadioGroup","value","row","onChange","e","INVERT_THEME","FormControlLabel","control","Radio","labelPlacement","Select","ev","target","SET_INPUT_STYLE","fullWidth","MenuItem","DialogActions","Button","useAppStyles","root","flexDirection","navFill","mixins","toolbar","useChatAreaStyles","flex","overflow","guildlist","palette","grey","padding","borderRight","channellist","overflowY","guildiconroot","borderRadius","guildicon","chatArea","flexFlow","messages","input","UtcEpochToLocalDate","time","returnDate","Date","setUTCSeconds","toDateString","toLocaleTimeString","Message","props","ListItem","alignItems","ListItemAvatar","Avatar","alt","userid","src","avatar","ListItemText","username","createdat","message","Messages","selectedChannel","users","messageList","useRef","current","scrollTop","scrollHeight","scrollLeft","Set","map","val","forEach","harmonySocket","sendGetUser","List","innerRef","channel","key","messageid","guild","Input","connected","selectedGuild","chatInputFocus","guildID","channelID","focus","inputField","TextField","multiline","rowsMax","rows","onKeyPress","shiftKey","preventDefault","test","sendMessage","inputRef","useGuildListStyle","boxSizing","marginTop","border","selectedguildicon","light","objectFit","joinGuild","dark","SetConnected","SET_CONNECTED","SetMessages","SET_MESSAGES","SetSelectedChannel","SET_SELECTED_CHANNEL","SetSelectedGuild","SET_SELECTED_GUILD","SetChannels","SET_CHANNELS","ToggleGuildSettingsDialog","TOGGLE_GUILD_SETTINGS_DIALOG","SetInvites","invites","SET_INVITES","GuildIcon","guildList","guildsList","id","guildid","selected","Tooltip","guildname","placement","picture","draggable","button","leaveGuild","owner","GuildList","Object","keys","TOGGLE_JOIN_GUILD_DIALOG","useChannelListStyle","nested","paddingLeft","newChannelInput","marginLeft","Channel","channelid","setSelectedChannel","channelname","sendDeleteChannel","ChannelList","channels","actionsExpanded","setActionsExpanded","addingChannel","setAddingChannel","addChannelInput","Collapse","in","timeout","unmountOnExit","disablePadding","sendGetInvites","ListItemIcon","autoFocus","sendAddChannel","onBlur","placeholder","textAlign","ChatArea","messagesRef","ref","onKeyDown","FOCUS_CHAT_INPUT","tabIndex","JoinGuild","joinGuildDialog","joinErr","createErr","joinCodeRef","guildNameRef","Grid","container","item","xs","createGuild","useGuildSettingsStyle","guildIcon","menuEntry","clipboardbtn","GuildSettings","guildSettingsDialog","guilds","guildIconUpload","guildName","setGuildName","guildIconFile","setGuildIconFile","setGuildIcon","fullScreen","multiple","event","currentTarget","files","length","file","startsWith","size","fileReader","FileReader","readAsDataURL","addEventListener","result","click","FormData","append","axios","post","window","location","hostname","then","res","data","uploadID","sendGuildPictureUpdate","catch","toast","error","sendGuildNameUpdate","Table","TableHead","TableRow","TableCell","TableBody","scope","copy","port","info","invite","sendDeleteInvite","sendCreateInvite","useUserSettingsStyle","UserSettingsDialog","userSettingsDialog","userAvatarUpload","setUsername","App","useParams","selectedGuildParam","selectedguildparam","selectedChannelParam","selectedchannelparam","themeDialogOpen","joinDialogOpen","guildSettingsDialogOpen","userSettingsDialogOpen","history","useHistory","events","addListener","getChannels","getMessages","removeCurrentListener","getGuilds","conn","readyState","WebSocket","OPEN","CONNECTING","localStorage","getItem","push","raw","SET_GUILDS","reverse","ADD_MESSAGE","console","log","warn","SET_GUILD_PICTURE","name","SET_GUILD_NAME","channelDeleted","invitesDeleted","SET_USER","removeAllListeners","useEntryStyles","form","justifyContent","useLoginStyles","paddingRight","paddingTop","paddingBottom","submitBtn","bottom","left","Login","React","err","setErr","emailRef","pwdRef","setItem","onSubmit","autoComplete","margin","CLOSED","login","useRegisterStyles","Register","usernameRef","register","Entry","tabIDX","setTabIDX","Paper","Tabs","newValue","indicatorColor","Tab","HarmonySocket","connect","emit","onmessage","unprocessed","JSON","parse","packet","this","EventEmitter","send","stringify","email","password","emitEvent","token","text","inviteCode","newname","newpicture","useRootStyles","scrollbarColor","useInviteHandlerStyle","errorRoot","errorMsg","errorBtn","InviteHandler","invitecode","errorMessage","setErrorMessage","align","previouslyDisconnected","Root","setTimeout","success","CssBaseline","exact","path","ThemedRoot","themeState","createMuiTheme","ThemeProvider","appState","persistConfig","storage","whitelist","persistedReducer","persistReducer","action","store","createStore","persistor","persistStore","setupRedux","ReactDOM","render","loading","document","getElementById"],"mappings":"qOAGYA,E,sPCACC,EAAsBC,aAAW,SAACC,GAAD,MAAmB,CAC7DC,YAAa,CACTC,YAAaF,EAAMG,QAAQ,IAE/BC,MAAO,CACHC,SAAU,Q,SDLNR,O,6CAAAA,I,uDAAAA,I,+DAAAA,I,6DAAAA,I,+BAAAA,I,mCAAAA,I,uCAAAA,I,qCAAAA,I,iCAAAA,I,2BAAAA,I,4CAAAA,I,gCAAAA,I,gDAAAA,I,0CAAAA,I,oCAAAA,I,8BAAAA,I,wBAAAA,I,gCAAAA,I,8BAAAA,I,yCAAAA,M,KEML,IAAMS,EAAa,WACtB,IAAMC,EAAUT,IACVU,EAAWC,cAEjB,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,YACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,UAAWT,EAAQN,aACxD,kBAAC,IAAD,OAEJ,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWT,EAAQH,OAA5C,WAGA,kBAACS,EAAA,EAAD,CAAYC,KAAK,MAAMC,MAAM,UAAUI,QAAS,kBAAMX,EAAS,CAAEY,KAAMvB,EAAQwB,wBAC3E,kBAAC,IAAD,OAEJ,kBAACR,EAAA,EAAD,CAAYC,KAAK,MAAMC,MAAM,UAAUI,QAAS,kBAAMX,EAAS,CAAEY,KAAMvB,EAAQyB,gCAC3E,kBAAC,IAAD,U,gLCfPC,EAAc,SAACC,GACxB,OACI,6BACI,kBAACP,EAAA,EAAD,KAAaO,EAAMC,OACnB,yBAAKC,MAAO,CAAEC,QAAS,SACnB,kBAACC,EAAA,EAAD,CAAYF,MAAO,CAAEG,gBAAiBC,IAAI,KAAMC,MAAO,OAAQC,OAAQ,QAAUb,QAAS,kBAAMK,EAAMS,SAASH,OAC1GN,EAAMT,QAAUe,IAAM,kBAAC,IAAD,WAAkBI,GAE7C,kBAACN,EAAA,EAAD,CAAYF,MAAO,CAAEG,gBAAiBM,IAAO,KAAMJ,MAAO,OAAQC,OAAQ,QAAUb,QAAS,kBAAMK,EAAMS,SAASE,OAC7GX,EAAMT,QAAUoB,IAAS,kBAAC,IAAD,WAAkBD,GAEhD,kBAACN,EAAA,EAAD,CAAYF,MAAO,CAAEG,gBAAiBO,IAAO,KAAML,MAAO,OAAQC,OAAQ,QAAUb,QAAS,kBAAMK,EAAMS,SAASG,OAC7GZ,EAAMT,QAAUqB,IAAS,kBAAC,IAAD,WAAkBF,GAEhD,kBAACN,EAAA,EAAD,CAAYF,MAAO,CAAEG,gBAAiBQ,IAAM,KAAMN,MAAO,OAAQC,OAAQ,QAAUb,QAAS,kBAAMK,EAAMS,SAASI,OAC5Gb,EAAMT,QAAUsB,IAAQ,kBAAC,IAAD,WAAkBH,GAE/C,kBAACN,EAAA,EAAD,CAAYF,MAAO,CAAEG,gBAAiBS,IAAK,KAAMP,MAAO,OAAQC,OAAQ,QAAUb,QAAS,kBAAMK,EAAMS,SAASK,OAC3Gd,EAAMT,QAAUuB,IAAO,kBAAC,IAAD,WAAkBJ,GAE9C,kBAACN,EAAA,EAAD,CAAYF,MAAO,CAAEG,gBAAiBU,IAAO,KAAMR,MAAO,OAAQC,OAAQ,QAAUb,QAAS,kBAAMK,EAAMS,SAASM,OAC7Gf,EAAMT,QAAUwB,IAAS,kBAAC,IAAD,WAAkBL,MCVnDM,EAAc,WAAO,IAAD,EACSC,aAAY,SAACjB,GAAD,MAAmB,CACjEA,EAAMkB,YACNlB,EAAMxB,MAAMoB,KACZI,EAAMxB,MAAM2C,eAJa,mBACtBC,EADsB,KAChBC,EADgB,KACLF,EADK,OAMCG,mBAAgBhB,KANjB,mBAMtBiB,EANsB,KAMbC,EANa,OAOKF,mBAAgBX,KAPrB,mBAOtBc,EAPsB,KAOXC,EAPW,KAQvB1C,EAAWC,cAejB,OAPA0C,qBAAU,WACN3C,EAAS,CAAEY,KAAMvB,EAAQuD,eAAgBC,QAASN,MACnD,CAACA,EAASvC,IACb2C,qBAAU,WACN3C,EAAS,CAAEY,KAAMvB,EAAQyD,iBAAkBD,QAASJ,MACrD,CAACA,EAAWzC,IAGX,kBAAC+C,EAAA,EAAD,CAAQX,KAAMA,EAAMY,QAAS,kBAAMhD,EAAS,CAAEY,KAAMvB,EAAQwB,wBACxD,kBAACoC,EAAA,EAAD,wBACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,UAAU,YACnB,kBAACC,EAAA,EAAD,CAAWD,UAAU,UAArB,cACA,kBAACE,EAAA,EAAD,CACIC,MAAOlB,EACPmB,KAAG,EACHC,SAAU,SAACC,GAAD,OAA4C1D,EAAS,CAAEY,KAAMvB,EAAQsE,iBAE/E,kBAACC,EAAA,EAAD,CACIL,MAAM,QACNM,QAAS,kBAACC,EAAA,EAAD,CAAOvD,MAAM,cACtBU,MAAM,QACN8C,eAAe,QAEnB,kBAACH,EAAA,EAAD,CACIL,MAAM,OACNM,QAAS,kBAACC,EAAA,EAAD,CAAOvD,MAAM,cACtBU,MAAM,OACN8C,eAAe,UAI3B,kBAAC,EAAD,CAAaxD,MAAOgC,EAASd,SAAUe,EAAYvB,MAAO,kBAC1D,kBAAC,EAAD,CAAaV,MAAOkC,EAAWhB,SAAUiB,EAAczB,MAAO,oBAC9D,kBAACR,EAAA,EAAD,yBACA,kBAACuD,EAAA,EAAD,CACIT,MAAOpB,GAAc,WACrBsB,SA3CS,SAACQ,GACS,kBAApBA,EAAGC,OAAOX,OACjBvD,EAAS,CAAEY,KAAMvB,EAAQ8E,gBAAiBtB,QAASoB,EAAGC,OAAOX,SA0CrD7C,QAASyB,EACTiC,WAAS,GAET,kBAACC,EAAA,EAAD,CAAUd,MAAO,YAAjB,YACA,kBAACc,EAAA,EAAD,CAAUd,MAAO,UAAjB,UACA,kBAACc,EAAA,EAAD,CAAUd,MAAO,YAAjB,cAGR,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQhE,MAAM,UAAUI,QAAS,kBAAMX,EAAS,CAAEY,KAAMvB,EAAQwB,wBAAhE,YClFH2D,GAAejF,aAAW,SAACC,GAAD,MAAmB,CACtDiF,KAAM,CACFtD,QAAS,OACTK,OAAQ,OACRkD,cAAe,UAEnBjF,YAAa,CACTC,YAAaF,EAAMG,QAAQ,IAE/BC,MAAO,CACHC,SAAU,GAEd8E,QAAQ,eACDnF,EAAMoF,OAAOC,aCbXC,GAAoBvF,aAAW,SAACC,GAAD,MAAmB,CAC3DiF,KAAM,CACFM,KAAM,EACN5D,QAAS,OACTuD,cAAe,MACf7E,SAAU,EACV0B,MAAO,OACPyD,SAAU,QAEdC,UAAW,CACP5D,gBAAwC,SAAvB7B,EAAM0F,QAAQtE,KAAkBpB,EAAM0F,QAAQC,KAAK,KAAO3F,EAAM0F,QAAQC,KAAK,KAC9FC,QAAS5F,EAAMG,QAAQ,GACvB0F,YAAa,kBAEjBC,YAAa,CACTjE,gBAAwC,SAAvB7B,EAAM0F,QAAQtE,KAAkBpB,EAAM0F,QAAQC,KAAK,KAAO3F,EAAM0F,QAAQC,KAAK,KAC9FC,QAAS,EACT7D,MAAO,QACPgE,UAAW,QAEfC,cAAe,CACXC,aAAc,QAElBC,UAAW,CACPnE,MAAO,OACPC,OAAQ,QAEZmE,SAAU,CACNxE,QAAS,OACTuD,cAAe,SACfkB,SAAU,SACVrE,MAAO,OACPC,OAAQ,QAEZqE,SAAU,CACNtE,MAAO,OACPwD,KAAM,WACNC,SAAU,QAEdc,MAAO,CACHvE,MAAO,Y,2DC/BTwE,GAAsB,SAACC,GACzB,IAAMC,EAAa,IAAIC,KAAK,GAE5B,OADAD,EAAWE,cAAcH,GACnB,MAAN,OAAaC,EAAWG,eAAxB,eAA6CH,EAAWI,uBAG/CC,GAAU,SAACC,GACpB,OACI,kBAACC,GAAA,EAAD,CAAUC,WAAW,cACjB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,IAAKL,EAAMM,OACXC,IAAKP,EAAMQ,OAAN,0CAAkDR,EAAMQ,aAAWrF,KAGhF,kBAACsF,GAAA,EAAD,CACIzE,QACI,oCACKgE,EAAMU,UAAYV,EAAMM,OACzB,kBAACpG,EAAA,EAAD,CAAY2C,UAAU,OAAO1C,QAAQ,QAAQH,MAAM,iBAC9CwF,GAAoBQ,EAAMW,aAIvCzE,UAAW8D,EAAMY,YC7BpBC,GAAW,WAAO,IAAD,EACiBnF,aAAY,SAACjB,GAAD,MAAmB,CACtEA,EAAM6E,SACN7E,EAAMqG,gBACNrG,EAAMsG,UAJgB,mBACnBzB,EADmB,KACTwB,EADS,KACQC,EADR,KAMpBC,EAAcC,sBAAqC9F,GAmBzD,OAjBAiB,qBAAU,WACF4E,EAAYE,UACZF,EAAYE,QAAQC,UAAYH,EAAYE,QAAQE,aACpDJ,EAAYE,QAAQG,WAAa,KAEtC,CAAC/B,IAGJlD,qBAAU,WACO,aAAO,IAAIkF,IAAIhC,EAASiC,KAAI,SAACC,GAAD,OAASA,EAAIlB,YAC9CmB,SAAQ,SAACD,GACRT,EAAMS,IACPE,GAAcC,YAAYH,QAGnC,CAAClC,EAAUyB,IAGV,kBAACa,GAAA,EAAD,CAAMC,SAAUb,GACX1B,EACKA,EAASiC,KAAI,SAACC,GACV,OAAIA,EAAIM,UAAYhB,EAEZ,kBAAC,GAAD,CACIiB,IAAKP,EAAIQ,UACTC,MAAOT,EAAIS,MACX3B,OAAQkB,EAAIlB,OACZI,SAAUK,EAAMS,EAAIlB,QAAUS,EAAMS,EAAIlB,QAAQI,SAAW,GAC3DC,UAAWa,EAAIb,UACfH,OAAQO,EAAMS,EAAIlB,QAAUS,EAAMS,EAAIlB,QAAQE,YAASrF,EACvDyF,QAASY,EAAIZ,eAIrB,UAGRzF,I,UC9CL+G,GAAQ,WAAO,IAAD,EACoCxG,aAAY,SAACjB,GAAD,MAAmB,CACtFA,EAAM0H,UACN1H,EAAMxB,MAAM2C,WACZnB,EAAM2H,cACN3H,EAAMqG,gBACNrG,EAAM4H,mBANa,mBAChBF,EADgB,KACLvG,EADK,KACO0G,EADP,KACgBC,EADhB,KAC2BC,EAD3B,KAQjBC,EAAaxB,mBAmBnB,OANA7E,qBAAU,WACFqG,EAAWvB,SACXuB,EAAWvB,QAAQsB,UAExB,CAACA,IAGA,6BACI,kBAACE,GAAA,EAAD,CACIhI,MAAOyH,EAAY,UAAY,oBAC/BhI,QAASyB,EACTiC,WAAS,EACT8E,WAAS,EACTC,QAAS,EACTC,KAAM,EACNC,WA1BO,SAAC3F,GACF,UAAVA,EAAE4E,KAAoB5E,EAAE4F,WACxB5F,EAAE6F,iBAEEP,EAAWvB,UAAY,QAAQ+B,KAAKR,EAAWvB,QAAQlE,QAAUuF,IACjEb,GAAcwB,YAAYZ,EAASC,EAAWE,EAAWvB,QAAQlE,OACjEyF,EAAWvB,QAAQlE,MAAQ,MAqB3BmG,SAAUV,EACVzI,MAAM,gB,qBCzCToJ,GAAoBpK,aAAW,SAACC,GAAD,MAAmB,CAC3DyF,UAAW,CACP1D,MAAO,QAEXiE,cAAe,CACXoE,UAAW,aACXnE,aAAc,MACdoE,UAAWrK,EAAMG,QAAQ,GACzBmK,OAAO,yBAEXC,kBAAmB,CACfD,OAAO,aAAD,OAAetK,EAAM0F,QAAQ3C,QAAQyH,QAE/CtE,UAAW,CACPnE,MAAO,OACPC,OAAQ,OACRiE,aAAc,OACdwE,UAAW,QACX5I,gBAAwC,SAAvB7B,EAAM0F,QAAQtE,KAAkBpB,EAAM0F,QAAQC,KAAK,KAAO3F,EAAM0F,QAAQC,KAAK,MAElG+E,UAAW,CACPL,UAAWrK,EAAMG,QAAQ,GACzB4B,MAAO,OACPC,OAAQ,OACRiE,aAAc,OACdpE,gBAAiB7B,EAAM0F,QAAQzC,UAAU0H,U,mBCrB1C,SAASC,GAAavH,GACzB,MAAO,CACHjC,KAAMvB,EAAQgL,cACdxH,WAQD,SAASyH,GAAYzH,GACxB,MAAO,CACHjC,KAAMvB,EAAQkL,aACd1H,WAeD,SAAS2H,GAAmB3H,GAC/B,MAAO,CACHjC,KAAMvB,EAAQoL,qBACd5H,WAQD,SAAS6H,GAAiB7H,GAC7B,MAAO,CACHjC,KAAMvB,EAAQsL,mBACd9H,WAID,SAAS+H,GAAY/H,GACxB,MAAO,CACHjC,KAAMvB,EAAQwL,aACdhI,WAuBD,SAASiI,KACZ,MAAO,CACHlK,KAAMvB,EAAQ0L,8BA4Bf,SAASC,GAAWC,GACvB,MAAO,CACHrK,KAAMvB,EAAQ6L,YACdrI,QAASoI,GCjGV,IAAME,GAAY,SAAC5E,GAAmB,IAAD,EACnBtE,aAAY,SAACjB,GAAD,MAAmB,CAACA,EAAMoK,cAApDC,EADiC,oBAElCtL,EAAU4J,KACV3J,EAAWC,cAajB,OACI,oCACI,kBAAC,KAAD,CAAoBqL,GAAI/E,EAAMgF,SAC1B,kBAACnK,EAAA,EAAD,CACIZ,UAAS,UAAKT,EAAQyF,cAAb,YAA8Be,EAAMiF,SAAWzL,EAAQgK,uBAAoBrI,GACpF4G,IAAK/B,EAAMgF,QACX5K,QAjBA,WACZX,EAAS,CACLY,KAAMvB,EAAQsL,mBACd9H,QAAS0D,EAAMgF,YAgBP,kBAACE,GAAA,EAAD,CAAS7L,MAAO2G,EAAMmF,UAAWC,UAAU,SACvC,yBAAKnL,UAAWT,EAAQ2F,UAAWkB,IAAI,GAAGE,IAAKP,EAAMqF,QAASC,WAAW,OAIrF,kBAAC,KAAD,CAAaP,GAAI/E,EAAMgF,SACnB,kBAACpD,GAAA,EAAD,KACI,kBAAC,KAAD,KACI,kBAAC3B,GAAA,EAAD,CAAUsF,QAAM,EAACnL,QApBjB,WAChBsH,GAAc8D,WAAWxF,EAAMgF,WAoBX,kBAACvE,GAAA,EAAD,CAAczE,QAAQ,kBAG7B8I,GAAcA,EAAW9E,EAAMgF,SAASS,MACrC,oCACI,kBAAC,KAAD,KACI,kBAACxF,GAAA,EAAD,CAAUsF,QAAM,EAACnL,QAAS,kBAAMX,EAAS8K,QACrC,kBAAC9D,GAAA,EAAD,CAAczE,QAAQ,2BAKlCb,MCrDXuK,GAAY,WACrB,IAAMlM,EAAU4J,KADW,EAEQ1H,aAAY,SAACjB,GAAD,MAAmB,CAACA,EAAMoK,UAAWpK,EAAM2H,kBAF/D,mBAEpByC,EAFoB,KAETzC,EAFS,KAGrB3I,EAAWC,cAEjB,OACI,yBAAKO,UAAWT,EAAQkF,WACnBiH,OAAOC,KAAKf,GAAWtD,KAAI,SAACQ,GACzB,OACI,kBAAC,GAAD,CACIiD,QAASjD,EACTA,IAAKA,EACLkD,SAAU7C,IAAkBL,EAC5BoD,UAAWN,EAAU9C,GAAKoD,UAC1BE,QAASR,EAAU9C,GAAKsD,aAIpC,kBAACxK,EAAA,EAAD,CACIZ,UAAWT,EAAQmK,UACnBvJ,QAAS,kBAAMX,EAAS,CAAEY,KAAMvB,EAAQ+M,6BAExC,kBAACX,GAAA,EAAD,CAAS7L,MAAO,uBAAwB+L,UAAU,SAC9C,kBAAC,KAAD,U,kHC5BPU,GAAsB9M,aAAW,SAACC,GAAD,MAAmB,CAC7D6H,gBAAiB,CACbhG,gBAAwC,SAAvB7B,EAAM0F,QAAQtE,KAAkBpB,EAAM0F,QAAQC,KAAK,KAAO3F,EAAM0F,QAAQC,KAAK,MAElGmH,OAAQ,CACJC,YAAa/M,EAAMG,QAAQ,IAE/B6M,gBAAiB,CACbC,WAAYjN,EAAMG,QAAQ,GAC1BD,YAAaF,EAAMG,QAAQ,QCO7B+M,GAAU,SAACnG,GAA0B,IAAD,EACetE,aAAY,SAACjB,GAAD,MAAmB,CAChFA,EAAM2H,cACN3H,EAAMqG,gBACNrG,EAAMoK,cAJ4B,mBAC/BzC,EAD+B,KAChBtB,EADgB,KACCgE,EADD,KAMhCtL,EAAUsM,KAMhB,OACI,oCACI,kBAAC,KAAD,CAAoBf,GAAI/E,EAAMoG,WAC1B,kBAACnG,GAAA,EAAD,CACIsF,QAAM,EACNxD,IAAK/B,EAAMoG,UACXnM,UAAW+F,EAAMoG,YAActF,EAAkBtH,EAAQsH,qBAAkB3F,EAC3Ef,QAAS,kBAAM4F,EAAMqG,mBAAmBrG,EAAMoG,aAE9C,kBAAC3F,GAAA,EAAD,CAAcvE,UAAS,WAAM8D,EAAMsG,iBAG1CxB,EAAW1C,IAAkB0C,EAAW1C,GAAeqD,MACpD,kBAAC,KAAD,CAAaV,GAAI/E,EAAMoG,WACnB,kBAACxE,GAAA,EAAD,KACI,kBAAC3B,GAAA,EAAD,CAAUsF,QAAM,EAACnL,QAnBhB,WACjBsH,GAAc6E,kBAAkBnE,EAAepC,EAAMoG,aAmBjC,kBAAC3F,GAAA,EAAD,CAAczE,QAAQ,2BAKlCb,IAMHqL,GAAc,WAAO,IAAD,EACiB9K,aAAY,SAACjB,GAAD,MAAmB,CACzEA,EAAMgM,SACNhM,EAAM2H,cACN3H,EAAMoK,cAJmB,mBACtB4B,EADsB,KACZrE,EADY,KACG0C,EADH,OAMiB/I,oBAAkB,GANnC,mBAMtB2K,EANsB,KAMLC,EANK,OAOa5K,oBAAkB,GAP/B,mBAOtB6K,EAPsB,KAOPC,EAPO,KAQvBC,EAAkB7F,iBAAgC,MAClDxH,EAAWC,cACXF,EAAUsM,KAMVO,EAAqB,SAACrJ,GACxBvD,EAASwK,GAAmBjH,KAmBhC,OACI,6BACI,kBAAC4E,GAAA,EAAD,CAAMjH,MAAO,CAAEkE,QAAS,IACnBuD,EACG,oCACI,kBAACnC,GAAA,EAAD,CAAUsF,QAAM,EAACnL,QAAS,kBAAMuM,GAAoBD,KAChD,kBAACjG,GAAA,EAAD,CAAczE,QAAQ,kBACrB0K,EAAkB,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAExC,kBAACK,GAAA,EAAD,CAAUC,GAAIN,EAAiBO,QAAQ,OAAOC,eAAa,GACvD,kBAACtF,GAAA,EAAD,CAAM/E,UAAU,MAAMsK,gBAAc,GAC/BrC,EAAW1C,IAAkB0C,EAAW1C,GAAeqD,MACpD,oCACI,kBAACxF,GAAA,EAAD,CAAUsF,QAAM,EAACtL,UAAWT,EAAQuM,OAAQ3L,QA7BpD,WACxBsH,GAAc0F,eAAehF,GAC7B3I,EAAS8K,QA4B2B,kBAAC8C,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC5G,GAAA,EAAD,CAAczE,QAAQ,0BAI9Bb,EAEJ,kBAAC8E,GAAA,EAAD,CAAUsF,QAAM,EAACtL,UAAWT,EAAQuM,OAAQ3L,QA/CrD,WACfsH,GAAc8D,WAAWpD,KA+CG,kBAACiF,GAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAAC5G,GAAA,EAAD,CAAczE,QAAQ,yBAMtCb,EAEHsL,EACKd,OAAOC,KAAKa,GAAUlF,KAAI,SAACQ,GACvB,OACI,kBAAC,GAAD,CACIA,IAAKA,EACLqE,UAAWrE,EACXuE,YAAaG,EAAS1E,GACtBsE,mBAAoBA,YAIhClL,EACN,yBAAKlB,UAAWT,EAAQyM,iBACnBW,EACG,kBAAC,KAAD,CACI/I,WAAS,EACTyJ,WAAS,EACTxE,WA3DQ,SAACpF,GACd,UAAXA,EAAGqE,KAAmB+E,EAAgB5F,UACtCQ,GAAc6F,eAAenF,EAAe0E,EAAgB5F,QAAQlE,OACpE6J,GAAiB,KAyDDW,OAAQ,kBAAMX,GAAiB,IAC/BY,YAAa,eACbtE,SAAU2D,SAGd3L,GAGPiH,GAAiB0C,EAAW1C,IAAkB0C,EAAW1C,GAAeqD,MACrE,kBAACP,GAAA,EAAD,CAAS7L,MAAM,kBACX,kBAAC4G,GAAA,EAAD,CAAUsF,QAAM,EAACnL,QA1EL,WAC5ByM,GAAiB,KA0EG,kBAACpG,GAAA,EAAD,CAAc9F,MAAO,CAAE+M,UAAW,UAAY1L,QAAQ,aAI9Db,KCvJPwM,GAAW,WACpB,IAAMnO,EAAU+E,KADU,EAEP7C,aAAY,SAACjB,GAAD,MAAmB,CAACA,EAAM6E,aAAlDA,EAFmB,oBAGpBsI,EAAc3G,iBAA8B,MAC5CxH,EAAWC,cAEjB0C,qBAAU,WACFwL,EAAY1G,UACZ0G,EAAY1G,QAAQC,UAAYyG,EAAY1G,QAAQE,gBAEzD,CAAC9B,IAQJ,OACI,yBAAKrF,UAAWT,EAAQ0E,MACpB,yBAAKjE,UAAWT,EAAQkF,WACpB,kBAAC,GAAD,OAEJ,yBAAKzE,UAAWT,EAAQuF,aACpB,kBAAC,GAAD,OAEJ,yBAAK9E,UAAWT,EAAQ4F,UACpB,yBAAKnF,UAAWT,EAAQ8F,SAAUuI,IAAKD,EAAaE,UAf9C,SAACpK,GACA,QAAXA,EAAGqE,KACHtI,ELwGD,CACHY,KAAMvB,EAAQiP,oBK5FoEC,UAAW,GACjF,kBAAC,GAAD,OAEJ,yBAAK/N,UAAWT,EAAQ+F,OACpB,kBAAC,GAAD,U,UCpCP0I,GAAY,WAAO,IAAD,EACAvM,aAAY,SAACjB,GAAD,MAAmB,CAACA,EAAMyN,gBAAiBzN,EAAMxB,MAAM2C,eADnE,mBACpBC,EADoB,KACdD,EADc,OAETG,mBAAiB,IAA5BoM,EAFoB,sBAGPpM,mBAAiB,IAA9BqM,EAHoB,oBAIrBC,EAAcpH,iBAAgC,MAC9CqH,EAAerH,iBAAgC,MAC/CxH,EAAWC,cAcjB,OACI,kBAAC8C,EAAA,EAAD,CAAQX,KAAMA,EAAMY,QAAS,kBAAMhD,EAAS,CAAEY,KAAMvB,EAAQ+M,6BACxD,kBAAClJ,EAAA,EAAD,KACI,kBAAC4L,GAAA,EAAD,CAAMC,WAAS,EAACpP,QAAS,GACrB,kBAACmP,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,6BACI,kBAACxO,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACA,kBAACuI,GAAA,EAAD,CAAWhI,MAAM,YAAYP,QAASyB,EAAmBiC,WAAS,EAACsF,SAAUkF,IAC7E,kBAACnO,EAAA,EAAD,CAAYF,MAAM,QAAQG,QAAQ,SAC7BgO,GAAW,8BAEhB,kBAACnK,EAAA,EAAD,CAAQ5D,QAjBd,WACViO,EAAYnH,SAAWmH,EAAYnH,QAAQlE,OAC3C0E,GAAciC,UAAU0E,EAAYnH,QAAQlE,SAe5B,gBAGR,kBAACuL,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,6BACI,kBAACxO,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBACA,kBAACuI,GAAA,EAAD,CACIhI,MAAM,aACNP,QAASyB,EACTiC,WAAS,EACTsF,SAAUmF,IAEd,kBAACpO,EAAA,EAAD,CAAYF,MAAM,QAAQG,QAAQ,SAC7BiO,GAAa,8BAElB,kBAACpK,EAAA,EAAD,CAAQ5D,QAtCZ,WACZkO,EAAapH,SAAWoH,EAAapH,QAAQlE,OAC7C0E,GAAciH,YAAYL,EAAapH,QAAQlE,SAoC/B,sB,+KCjDf4L,GAAwB5P,aAAW,SAACC,GAAD,MAAmB,CAC/D4P,UAAW,CACP7N,MAAO,QACPC,OAAQ,SAEZ6N,UAAW,CACPxF,UAAWrK,EAAMG,QAAQ,IAE7B2P,aAAc,CACV7C,WAAYjN,EAAMG,QAAQ,QCmBrB4P,GAAgB,WAAO,IAAD,EAC4BtN,aAAY,SAACjB,GAAD,MAAmB,CACtFA,EAAMwO,oBACNxO,EAAM2H,cACN3H,EAAMxB,MAAM2C,WACZnB,EAAMoK,UACNpK,EAAMiK,YANqB,mBACxB7I,EADwB,KAClBuG,EADkB,KACHxG,EADG,KACSsN,EADT,KACiBxE,EADjB,KAQzBjL,EAAWC,cACXyP,EAAkBlI,iBAAgC,MATzB,EAUGlF,mBAC9BmN,EAAO9G,GAAiB8G,EAAO9G,GAAe+C,eAAYhK,GAX/B,mBAUxBiO,EAVwB,KAUbC,EAVa,OAaWtN,mBAAsB,MAbjC,mBAaxBuN,EAbwB,KAaTC,EAbS,OAcGxN,mBAC9BmN,EAAO9G,GAAiB8G,EAAO9G,GAAeiD,aAAUlK,GAf7B,mBAcxB0N,EAdwB,KAcbW,EAda,KAiBzBhQ,EAAUoP,KAoDhB,OACI,kBAACpM,EAAA,EAAD,CAAQX,KAAMA,EAAMY,QAAS,kBAAMhD,EAAS,CAAEY,KAAMvB,EAAQ0L,gCAAiCiF,YAAU,GACnG,kBAAC9P,EAAA,EAAD,CAAQgB,MAAO,CAAEf,SAAU,aACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,UACNI,QAAS,kBACLX,EAAS,CACLY,KAAMvB,EAAQ0L,iCAItB,kBAAC,KAAD,OAEJ,kBAACtK,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAGR,kBAACwC,EAAA,EAAD,KACI,yBAAKhC,MAAO,CAAEK,MAAO,QACjB,2BACIX,KAAK,OACL0K,GAAG,OACH2E,UAAQ,EACR7B,IAAKsB,EACLxO,MAAO,CAAEC,QAAS,QAClBsC,SA1CQ,SAACyM,GACzB,GAAIA,EAAMC,cAAcC,OAASF,EAAMC,cAAcC,MAAMC,OAAS,EAAG,CACnE,IAAMC,EAAOJ,EAAMC,cAAcC,MAAM,GAEvC,GADAN,EAAiBQ,GACbA,EAAK1P,KAAK2P,WAAW,WAAaD,EAAKE,KAAO,SAAU,CACxD,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,cAAcL,GACzBG,EAAWG,iBAAiB,QAAQ,WACC,kBAAtBH,EAAWI,QAClBd,EAAaU,EAAWI,gBAmC5B,kBAACzP,EAAA,EAAD,CACIF,MAAO,CAAEuE,aAAc,OACvB9E,QAAS,WACD+O,EAAgBjI,SAChBiI,EAAgBjI,QAAQqJ,UAIhC,kBAACnK,GAAA,EAAD,CAAQnG,UAAWT,EAAQqP,UAAWtI,IAAKsI,KAE/C,kBAACnG,GAAA,EAAD,CACIhI,MAAM,aACNmD,WAAS,EACT1D,QAASyB,EACT3B,UAAWT,EAAQsP,UACnB9L,MAAOoM,EACPlM,SAAU,SAACC,GAAD,OAA4CkM,EAAalM,EAAEyM,cAAc5M,UAEvF,kBAACgB,EAAA,EAAD,CAAQ7D,QAAQ,YAAYH,MAAM,YAAYC,UAAWT,EAAQsP,UAAW1O,QAxFtE,WAClB,GAAI8O,EAAO9G,GAAgB,CACvB,GAAIyG,IAAcK,EAAO9G,GAAeiD,SAAWiE,EAAe,CAC9D,IAAMH,EAAkB,IAAIqB,SAC5BrB,EAAgBsB,OAAO,OAAQnB,GAC/BoB,KACKC,KADL,iBACoBC,OAAOC,SAASC,SADpC,6BACyE3B,EAAiB,IACrF4B,MAAK,SAACC,GACH,GAAIA,EAAIC,KAAM,CACV,IAAMC,EAAWF,EAAIC,KACrBvJ,GAAcyJ,uBACV/I,EADJ,iBAEcwI,OAAOC,SAASC,SAF9B,2BAEyDI,QAIhEE,OAAM,WACHC,IAAMC,MAAM,kCAGpBpC,EAAO9G,GAAe+C,YAAciE,GAAaA,GACjD1H,GAAc6J,oBAAoBnJ,EAAegH,MAmE7C,gBAGA,kBAAClP,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWT,EAAQsP,WAA5C,cAGA,kBAAC0C,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,kBACA,kBAACA,GAAA,EAAD,oBACA,kBAACA,GAAA,EAAD,kBAGR,kBAACC,GAAA,EAAD,KACKjG,OAAOC,KAAKlB,GAASnD,KAAI,SAACQ,GACvB,OACI,kBAAC2J,GAAA,EAAD,CAAU3J,IAAKA,GACX,kBAAC4J,GAAA,EAAD,CAAW9O,UAAU,KAAKgP,MAAM,OAC3B9J,GAEL,kBAAC4J,GAAA,EAAD,CAAW9O,UAAU,KAAKgP,MAAM,OAC3BnH,EAAQ3C,IAEb,kBAAC4J,GAAA,EAAD,CAAW9O,UAAU,KAAKgP,MAAM,OAC5B,kBAAC3G,GAAA,EAAD,CAAS7L,MAAM,oBACX,kBAACS,EAAA,EAAD,CACIM,QAAS,WACL0R,KAAK,UAAD,OACUlB,OAAOC,SAASC,UAD1B,OAEIF,OAAOC,SAASkB,KAAO,IAAMnB,OAAOC,SAASkB,KAAO,GAFxD,mBAGWhK,IAEfsJ,IAAMW,KAAK,uCAGf,kBAAC,KAAD,QAGR,kBAAC9G,GAAA,EAAD,CAAS7L,MAAM,sBACX,kBAACS,EAAA,EAAD,CAAYM,QAAS,kBAxIvC6R,EAwI8DlK,OAvIpFL,GAAcwK,iBAAiBD,EAAQ7J,GADlB,IAAC6J,IAyIsB,kBAAC,KAAD,eAShC,kBAACjO,EAAA,EAAD,CAAQH,WAAS,EAACzD,QA9IT,WACrBsH,GAAcyK,iBAAiB/J,KA8If,kBAAC,KAAD,WClMXgK,GAAuBpT,aAAW,SAACC,GAAD,MAAmB,CAC9D4P,UAAW,CACP7N,MAAO,QACPC,OAAQ,SAEZ6N,UAAW,CACPxF,UAAWrK,EAAMG,QAAQ,IAE7B2P,aAAc,CACV7C,WAAYjN,EAAMG,QAAQ,QCLrBiT,GAAqB,WAAO,IAAD,EACT3Q,aAAY,SAACjB,GAAD,MAAmB,CAACA,EAAM6R,mBAAoB7R,EAAM6R,uBADvD,mBAC7BzQ,EAD6B,KACvBD,EADuB,KAE9B2Q,EAAmBtL,iBAAgC,MAFrB,EAGJlF,mBAAiB,IAHb,mBAG7B2E,EAH6B,KAGnB8L,EAHmB,KAI9B/S,EAAWC,cACXF,EAAU4S,KAEhB,OACI,kBAAC5P,EAAA,EAAD,CAAQX,KAAMA,EAAMY,QAAS,kBAAMhD,EAAS,CAAEY,KAAMvB,EAAQyB,+BAAgCkP,YAAU,GAClG,kBAAC9P,EAAA,EAAD,CAAQgB,MAAO,CAAEf,SAAU,aACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQK,QAAS,kBAAMX,EAAS,CAAEY,KAAMvB,EAAQyB,gCAC7D,kBAAC,KAAD,OAEJ,kBAACL,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGR,kBAACwC,EAAA,EAAD,KACI,yBAAKhC,MAAO,CAAEK,MAAO,QACjB,2BAAOX,KAAK,OAAO0K,GAAG,OAAO2E,UAAQ,EAAC7B,IAAK0E,EAAkB5R,MAAO,CAAEC,QAAS,UAC/E,kBAACC,EAAA,EAAD,CACIF,MAAO,CAAEuE,aAAc,OACvB9E,QAAS,WACDmS,EAAiBrL,SACjBqL,EAAiBrL,QAAQqJ,UAIjC,kBAACnK,GAAA,EAAD,CAAQnG,UAAWT,EAAQqP,aAE/B,kBAACnG,GAAA,EAAD,CACIhI,MAAM,WACNmD,WAAS,EACT1D,QAASyB,EACT3B,UAAWT,EAAQsP,UACnB9L,MAAO0D,EACPxD,SAAU,SAACC,GAAD,OAA4CqP,EAAYrP,EAAEyM,cAAc5M,UAEtF,kBAACgB,EAAA,EAAD,CAAQ7D,QAAQ,YAAYH,MAAM,YAAYC,UAAWT,EAAQsP,WAAjE,oBCjBP2D,GAAM,WACf,IAAMjT,EAAUyE,KACVxE,EAAWC,cAFI,EAG0EgT,cAAnEC,EAHP,EAGbC,mBAA8DC,EAHjD,EAG2BC,qBAH3B,EAajBpR,aAAY,SAACjB,GAAD,MAAmB,CAC/BA,EAAM0H,UACN1H,EAAMgM,SACNhM,EAAMiK,QACNjK,EAAM2H,cACN3H,EAAMkB,YACNlB,EAAMyN,gBACNzN,EAAMwO,oBACNxO,EAAM6R,uBArBW,mBAKjBnK,EALiB,KAMjBsE,EANiB,KAOjB/B,EAPiB,KAQjBtC,EARiB,KASjB2K,EATiB,KAUjBC,EAViB,KAWjBC,EAXiB,KAYjBC,EAZiB,KAuBfC,EAAUC,cA6LhB,OA1LAhR,qBAAU,WACFuQ,IACAlT,EAAS0K,GAAiBwI,IAC1BjL,GAAc2L,OAAOC,YAAY,QAAQ,WACrC5L,GAAc6L,YAAYZ,GAC1BjL,GAAc8L,YAAYb,GAC1BjL,GAAc2L,OAAOI,4BAGzBZ,GACApT,EAASwK,GAAmB4I,MAEjC,CAACF,EAAoBE,EAAsBpT,IAG9C2C,qBAAU,WACF+F,GACAT,GAAcgM,cAEnB,CAACvL,IAEJ/F,qBAAU,WACF+F,IACA1I,EAASsK,GAAY,KACrBtK,EAASwK,QAAmB9I,IAC5BuG,GAAc8L,YAAYpL,GAC1BV,GAAc6L,YAAYnL,MAG/B,CAACA,IAEJhG,qBAAU,WAEF,OACKsF,GAAciM,KAAKC,aAAeC,UAAUC,MACzCpM,GAAciM,KAAKC,aAAeC,UAAUE,YACP,kBAAlCC,aAAaC,QAAQ,cAG5Bd,EAAQe,KAAK,MAIjBxM,GAAc2L,OAAOC,YAAY,aAAa,SAACa,GAC3C,IXrCU7R,EWqCNwI,EAAaqJ,EAAG,OACmB,IAAnCxI,OAAOC,KAAKd,GAAYgF,SACxBrQ,EAASsK,GAAY,KACrBtK,EAASwK,QAAmB9I,IAC5B1B,EAAS0K,QAAiBhJ,IAC1B1B,EAAS4K,GAAY,MAEzB5K,GX5CU6C,EW4CSwI,EX3CxB,CACHzK,KAAMvB,EAAQsV,WACd9R,gBW2CIoF,GAAc2L,OAAOC,YAAY,eAAe,SAACa,GACzCA,EAAG,UACH1U,EAASsK,GAAaoK,EAAG,SAA4BE,eAG7D3M,GAAc2L,OAAOC,YAAY,WAAW,SAACa,GXvFlD,IAAoB7R,EW0FkB,kBAAlB6R,EAAG,QACkB,kBAArBA,EAAG,WACc,kBAAjBA,EAAG,OACgB,kBAAnBA,EAAG,SAEV1U,GX/FO6C,EW+Fa6R,EX9F7B,CACH9T,KAAMvB,EAAQwV,YACdhS,gBW+FIoF,GAAc2L,OAAOC,YAAY,eAAe,SAACa,GAC7CI,QAAQC,IAAIL,GACO,kBAARA,GACP1U,EAAS4K,GAAY8J,EAAG,cAGhCzM,GAAc2L,OAAOC,YAAY,UAAU,WACvCjC,IAAMoD,KAAK,gDACXtB,EAAQe,KAAK,QAGjBxM,GAAc2L,OAAOC,YAAY,cAAc,SAACa,GACd,kBAAnBA,EAAG,QAIdzM,GAAcgM,YAHVrC,IAAMC,MAAM6C,EAAG,YAKvBzM,GAAc2L,OAAOC,YAAY,aAAa,SAACa,GACtCA,EAAG,UACJzM,GAAcgM,YACdjU,EAAS,CAAEY,KAAMvB,EAAQ+M,+BAGjCnE,GAAc2L,OAAOC,YAAY,eAAe,SAACa,GACxCA,EAAG,UACJzM,GAAcgM,YACdjU,EAAS,CAAEY,KAAMvB,EAAQ+M,+BAGjCnE,GAAc2L,OAAOC,YAAY,sBAAsB,SAACa,GXnE7D,IAAyBlM,EAAeoD,GWoER,IAAnB8I,EAAG,SAAwBA,EAAG,SAAeA,EAAG,OAChD1U,GXrEYwI,EWqEakM,EAAG,MXrED9I,EWqEY8I,EAAG,QXpEnD,CACH9T,KAAMvB,EAAQ4V,kBACdpS,QAAS,CACL2F,QACAoD,cWiEY4H,GACAxT,EAAS8K,OAGb8G,IAAMC,MAAM,yBAGpB5J,GAAc2L,OAAOC,YAAY,mBAAmB,SAACa,GXnE1D,IAAsBlM,EAAe0M,GWoEL,IAAnBR,EAAG,SAAwBA,EAAG,MAAYA,EAAG,OAC7C1U,GXrESwI,EWqEakM,EAAG,MXrEDQ,EWqEYR,EAAG,KXpEhD,CACH9T,KAAMvB,EAAQ8V,eACdtS,QAAS,CACL2F,QACA0M,WWiEY1B,GACAxT,EAAS8K,OAGb8G,IAAMC,MAAM,yBAGpB5J,GAAc2L,OAAOC,YAAY,cAAc,SAACa,GACxCA,EAAG,SAAeA,EAAG,OACrB1U,EAASgL,GAAW0J,EAAG,aAG/BzM,GAAc2L,OAAOC,YAAY,mBAAmB,SAACa,IAC1B,IAAnBA,EAAG,SAAwBA,EAAG,OAAaA,EAAG,aAAmBA,EAAG,WACpE1U,EAAS4K,GAAY,eAAKoC,EAAN,eAAiB0H,EAAG,UAAgBA,EAAG,mBAGnEzM,GAAc2L,OAAOC,YAAY,sBAAsB,SAACa,GACpD,IAAuB,IAAnBA,EAAG,SAAwBA,EAAG,OAAaA,EAAG,UAAe,CAC7D,IAAMU,EAAc,eACbpI,UAEAoI,EAAeV,EAAG,WACzB1U,EAAS4K,GAAY,eAAKwK,SAGlCnN,GAAc2L,OAAOC,YAAY,gBAAgB,SAACa,GAC9C,IAAuB,IAAnBA,EAAG,SAAwBA,EAAG,OAAY,CAC1C,IAAMW,EAAc,eACbpK,UAEAoK,EAAeX,EAAG,QACzB1U,EAASgL,GAAWqK,QAG5BpN,GAAc2L,OAAOC,YAAY,gBAAgB,SAACa,GAC9C,IAAuB,IAAnBA,EAAG,SAAwBA,EAAG,OAAY,CAC1C,IAAMW,EAAc,eACbpK,EADa,eAEfyJ,EAAG,OAAa,IAErB1U,EAASgL,GAAWqK,QAG5BpN,GAAc2L,OAAOC,YAAY,WAAW,SAACa,GX7FlD,IAAiB7N,EAAgBI,EAAkBF,EW+Fb,kBAAlB2N,EAAG,QACiB,kBAApBA,EAAG,UACe,kBAAlBA,EAAG,QAEV1U,GXnGI6G,EWmGa6N,EAAG,OXnGAzN,EWmGYyN,EAAG,SXnGG3N,EWmGW2N,EAAG,OXlG7D,CACH9T,KAAMvB,EAAQiW,SACdzS,QAAS,CACLgE,SACAI,WACAF,gBWgGO,WACHkB,GAAc2L,OAAO2B,mBAAmB,aACxCtN,GAAc2L,OAAO2B,mBAAmB,eACxCtN,GAAc2L,OAAO2B,mBAAmB,WACxCtN,GAAc2L,OAAO2B,mBAAmB,eACxCtN,GAAc2L,OAAO2B,mBAAmB,UACxCtN,GAAc2L,OAAO2B,mBAAmB,cACxCtN,GAAc2L,OAAO2B,mBAAmB,aACxCtN,GAAc2L,OAAO2B,mBAAmB,eACxCtN,GAAc2L,OAAO2B,mBAAmB,sBACxCtN,GAAc2L,OAAO2B,mBAAmB,mBACxCtN,GAAc2L,OAAO2B,mBAAmB,cACxCtN,GAAc2L,OAAO2B,mBAAmB,mBACxCtN,GAAc2L,OAAO2B,mBAAmB,sBACxCtN,GAAc2L,OAAO2B,mBAAmB,gBACxCtN,GAAc2L,OAAO2B,mBAAmB,gBACxCtN,GAAc2L,OAAO2B,mBAAmB,mBAGjD,CAAC7B,EAAS1T,EAAUwT,GA1LL,EA0L2CxG,EAAU/B,IAGnE,yBAAKzK,UAAWT,EAAQ0E,MACnB6O,EAAkB,kBAAC,EAAD,WAAkB5R,EACpC6R,EAAiB,kBAAC,GAAD,WAAgB7R,EACjC8R,EAA0B,kBAAC,GAAD,WAAoB9R,EAC9C+R,EAAyB,kBAAC,GAAD,WAAyB/R,EACnD,kBAAC,EAAD,MACA,yBAAKlB,UAAWT,EAAQ4E,UAN5B,IAOI,kBAAC,GAAD,Q,8BCrPC6Q,GAAiBjW,aAAW,SAACC,GAAD,MAAmB,CACxDiW,KAAM,CACFlU,MAAO,MACPC,OAAQ,MACRrB,SAAU,YAEdsE,KAAM,CACFlD,MAAO,QACPC,OAAQ,QACRL,QAAS,OACTsF,WAAY,SACZiP,eAAgB,cCXXC,GAAiBpW,aAAW,SAACC,GAAD,MAAmB,CACxDiF,KAAM,CACF8H,YAAa/M,EAAMG,QAAQ,GAC3BiW,aAAcpW,EAAMG,QAAQ,GAC5BkW,WAAYrW,EAAMG,QAAQ,GAC1BmW,cAAetW,EAAMG,QAAQ,IAEjCoW,UAAW,CACP5V,SAAU,WACV6V,OAAQxW,EAAMG,QAAQ,GACtBsW,KAAMzW,EAAMG,QAAQ,QCNfuW,GAAkB,WAC3B,IAAMxC,EAAUC,cACV5T,EAAU4V,KAFiB,EAIXQ,IAAM7T,cAA6BZ,GAJxB,mBAI1B0U,EAJ0B,KAIrBC,EAJqB,KAK3BC,EAAW9O,sBAAqC9F,GAChD6U,EAAS/O,sBAAqC9F,GA+BpD,OAnBAiB,qBAAU,WAaN,OAZAsF,GAAc2L,OAAOC,YAAY,cAAc,SAACa,GACd,kBAAnBA,EAAG,SACV2B,EAAO3B,EAAG,YAGlBzM,GAAc2L,OAAOC,YAAY,SAAS,SAACa,GACX,kBAAjBA,EAAG,OAAmD,kBAAlBA,EAAG,SAC9CH,aAAaiC,QAAQ,QAAS9B,EAAG,OACjCH,aAAaiC,QAAQ,SAAU9B,EAAG,QAClChB,EAAQe,KAAK,YAGd,WACHxM,GAAc2L,OAAO2B,mBAAmB,cACxCtN,GAAc2L,OAAO2B,mBAAmB,YAE7C,CAAC7B,IAGA,yBAAKlT,UAAWT,EAAQ0E,MACpB,0BAAMgS,SAAU,SAAC/S,GAAD,OAAqCA,EAAE6F,mBACnD,kBAACN,GAAA,EAAD,CAAWhI,MAAM,QAAQL,KAAK,QAAQsU,KAAK,QAAQwB,aAAa,QAAQC,OAAO,SAASvS,WAAS,EAACsF,SAAU4M,IAC5G,kBAACrN,GAAA,EAAD,CAAWhI,MAAM,WAAWL,KAAK,WAAWsU,KAAK,WAAWyB,OAAO,SAASvS,WAAS,EAACsF,SAAU6M,IAC/FH,EACG,kBAAC3V,EAAA,EAAD,CAAYC,QAAQ,YAAYH,MAAO,SAClC6V,QAGL1U,EAEJ,kBAAC6C,EAAA,EAAD,CAAQ7D,QAAQ,YAAYH,MAAM,UAAUC,UAAWT,EAAQgW,UAAWpV,QAzCxE,WACNsH,GAAciM,KAAKC,aAAeC,UAAUwC,OAC5ChF,IAAMC,MAAM,6CACLyE,EAAS7O,SAAW8O,EAAO9O,SAAW6O,EAAS7O,QAAQlE,MAAM8M,QAAUkG,EAAO9O,QAAQlE,MAC7F0E,GAAc4O,MAAMP,EAAS7O,QAAQlE,MAAOgT,EAAO9O,QAAQlE,OAE3DqO,IAAMC,MAAM,2CAmCkFjR,KAAK,UAA/F,aCrDHkW,GAAoBvX,aAAW,SAACC,GAAD,MAAmB,CAC3DiF,KAAM,CACF8H,YAAa/M,EAAMG,QAAQ,GAC3BiW,aAAcpW,EAAMG,QAAQ,GAC5BkW,WAAYrW,EAAMG,QAAQ,GAC1BmW,cAAetW,EAAMG,QAAQ,IAEjCoW,UAAW,CACP5V,SAAU,WACV6V,OAAQxW,EAAMG,QAAQ,GACtBsW,KAAMzW,EAAMG,QAAQ,QCNfoX,GAAW,WACpB,IAAMhX,EAAU+W,KACVpD,EAAUC,cAFU,EAGJwC,IAAM7T,cAA6BZ,GAH/B,mBAGnB0U,EAHmB,KAGdC,EAHc,KAIpBC,EAAW9O,sBAAqC9F,GAChDsV,EAAcxP,sBAAqC9F,GACnD6U,EAAS/O,sBAAqC9F,GA+BpD,OAnBAiB,qBAAU,WAaN,OAZAsF,GAAc2L,OAAOC,YAAY,iBAAiB,SAACa,GACjB,kBAAnBA,EAAG,SACV2B,EAAO3B,EAAG,YAGlBzM,GAAc2L,OAAOC,YAAY,SAAS,SAACa,GACX,kBAAjBA,EAAG,OAAmD,kBAAlBA,EAAG,SAC9CH,aAAaiC,QAAQ,QAAS9B,EAAG,OACjCH,aAAaiC,QAAQ,SAAU9B,EAAG,QAClChB,EAAQe,KAAK,YAGd,WACHxM,GAAc2L,OAAO2B,mBAAmB,iBACxCtN,GAAc2L,OAAO2B,mBAAmB,YAE7C,CAAC7B,IAGA,yBAAKlT,UAAWT,EAAQ0E,MACpB,0BAAMgS,SAAU,SAAC/S,GAAD,OAAqCA,EAAE6F,mBACnD,kBAACN,GAAA,EAAD,CAAWhI,MAAM,QAAQL,KAAK,QAAQsU,KAAK,QAAQwB,aAAa,QAAQC,OAAO,SAASvS,WAAS,EAACsF,SAAU4M,IAC5G,kBAACrN,GAAA,EAAD,CAAWhI,MAAM,WAAWL,KAAK,OAAOsU,KAAK,YAAYwB,aAAa,WAAWC,OAAO,SAASvS,WAAS,EAACsF,SAAUsN,IACrH,kBAAC/N,GAAA,EAAD,CAAWhI,MAAM,WAAWL,KAAK,WAAWsU,KAAK,WAAWwB,aAAa,eAAeC,OAAO,SAASvS,WAAS,EAACsF,SAAU6M,IAC5H,kBAACtN,GAAA,EAAD,CAAWhI,MAAM,mBAAmBL,KAAK,WAAWsU,KAAK,kBAAkBwB,aAAa,OAAOC,OAAO,SAASvS,WAAS,IACvHgS,EACG,kBAAC3V,EAAA,EAAD,CAAYC,QAAQ,YAAYH,MAAO,SAClC6V,QAGL1U,EAEJ,kBAAC6C,EAAA,EAAD,CAAQ7D,QAAQ,YAAYH,MAAM,UAAUC,UAAWT,EAAQgW,UAAWpV,QA3CrE,WACTsH,GAAciM,KAAKC,aAAeC,UAAUwC,OAC5ChF,IAAMC,MAAM,gDACLyE,EAAS7O,SAAWuP,EAAYvP,SAAW8O,EAAO9O,SAAW6O,EAAS7O,QAAQlE,OAASgT,EAAO9O,QAAQlE,OAASyT,EAAYvP,QAAQlE,MAC1I0E,GAAcgP,SAASX,EAAS7O,QAAQlE,MAAOyT,EAAYvP,QAAQlE,MAAOgT,EAAO9O,QAAQlE,OAEzFqO,IAAMC,MAAM,yDAqCqFjR,KAAK,UAAlG,aCpDHsW,GAAQ,WACjB,IAAMnX,EAAUyV,KADO,EAEKW,IAAM7T,SAAS,GAFpB,mBAEhB6U,EAFgB,KAERC,EAFQ,KAIvB,OACI,yBAAK5W,UAAWT,EAAQ0E,MACpB,kBAAC4S,GAAA,EAAD,CAAO7W,UAAWT,EAAQ0V,MACtB,kBAAC6B,GAAA,EAAD,CAAM/T,MAAO4T,EAAQ1T,SAAU,SAACyM,EAAYqH,GAAb,OAAwCH,EAAUG,IAAW7W,QAAQ,YAAY8W,eAAgB,WAC5H,kBAACC,GAAA,EAAD,CAAKxW,MAAM,QAAQqK,GAAG,eACtB,kBAACmM,GAAA,EAAD,CAAKxW,MAAM,WAAWqK,GAAG,gBAEjB,IAAX6L,EAAe,kBAAC,GAAD,MAAY,kBAAC,GAAD,S,8BCdvBO,G,WAIjB,aAAe,IAAD,iCAHdxD,UAGc,OAFdN,YAEc,OAkBd+D,QAAU,WACN,EAAKzD,KAAO,IAAIE,UAAJ,eAAsBjD,OAAOC,SAASC,SAAtC,qBACZ,EAAK6C,KAAKtD,iBAAiB,QAAQ,kBAAM,EAAKgD,OAAOgE,KAAK,WAC1D,EAAK1D,KAAKtD,iBAAiB,SAAS,kBAAM,EAAKgD,OAAOgE,KAAK,YAC3D,EAAK1D,KAAKtD,iBAAiB,SAAS,kBAAM,EAAKgD,OAAOgE,KAAK,YAC3D,EAAK1D,KAAK2D,UAAY,SAACnU,GACnB,IAAMoU,EAAcC,KAAKC,MAAMtU,EAAE8N,MACjC,GAAmC,kBAAxBsG,EAAW,MAAwD,kBAAxBA,EAAW,KAAuB,CACpF,IAAMG,EAAkBH,EACxB,EAAKlE,OAAOgE,KAAKK,EAAOrX,KAAMqX,EAAOzG,WAErCsD,QAAQE,KAAR,+BACAF,QAAQC,IAAI+C,KA7BpBI,KAAKhE,KAAO,IAAIE,UAAJ,eAAsBjD,OAAOC,SAASC,SAAtC,qBACZ6G,KAAKtE,OAAS,IAAIuE,gBAClBD,KAAKhE,KAAKtD,iBAAiB,QAAQ,kBAAM,EAAKgD,OAAOgE,KAAK,WAC1DM,KAAKhE,KAAKtD,iBAAiB,SAAS,kBAAM,EAAKgD,OAAOgE,KAAK,YAC3DM,KAAKhE,KAAKtD,iBAAiB,SAAS,kBAAM,EAAKgD,OAAOgE,KAAK,YAC3DM,KAAKhE,KAAK2D,UAAY,SAACnU,GACnB,IAAMoU,EAAcC,KAAKC,MAAMtU,EAAE8N,MACjC,GAAmC,kBAAxBsG,EAAW,MAAwD,kBAAxBA,EAAW,KAAuB,CACpF,IAAMG,EAAkBH,EACxB,EAAKlE,OAAOgE,KAAKK,EAAOrX,KAAMqX,EAAOzG,WAErCsD,QAAQE,KAAR,+BACAF,QAAQC,IAAI+C,I,uDAsBdlX,EAAc4Q,GAEhB0G,KAAKhE,KAAKC,aAAeC,UAAUC,MACnC6D,KAAKhE,KAAKkE,KAAKL,KAAKM,UAAU,CAAEzX,OAAM4Q,Y,4BAIxC8G,EAAeC,GACjBL,KAAKM,UAAU,QAAS,CACpBF,QACAC,e,+BAICD,EAAerR,EAAkBsR,GACtCL,KAAKM,UAAU,WAAY,CACvBF,QACArR,WACAsR,e,kCAKJL,KAAKM,UAAU,YAAa,CACxBC,MAAOlE,aAAaC,QAAQ,a,kCAIxB3L,GACRqP,KAAKM,UAAU,cAAe,CAC1BC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,M,kCAIHA,EAAiBC,EAAmB4P,GAC5CR,KAAKM,UAAU,UAAW,CACtBC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,EACPR,QAASS,EACT3B,QAASuR,M,kCAIL7P,GACRqP,KAAKM,UAAU,cAAe,CAC1BC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,M,gCAIL8P,GACNT,KAAKM,UAAU,YAAa,CACxBC,MAAOlE,aAAaC,QAAQ,SAC5BhC,OAAQmG,M,kCAIJhJ,GACRuI,KAAKM,UAAU,cAAe,CAC1BC,MAAOlE,aAAaC,QAAQ,SAC5B9I,UAAWiE,M,iCAIR9G,GACPqP,KAAKM,UAAU,aAAc,CACzBC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,M,0CAIKA,EAAiB+P,GACjCV,KAAKM,UAAU,kBAAmB,CAC9BC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,EACPqM,KAAM0D,M,6CAIS/P,EAAiBgQ,GACpCX,KAAKM,UAAU,qBAAsB,CACjCC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,EACP+C,QAASiN,M,qCAIFhQ,GACXqP,KAAKM,UAAU,aAAc,CACzBC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,M,qCAIAA,EAAiBgE,GAC5BqL,KAAKM,UAAU,aAAc,CACzBC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,EACPR,QAASwE,M,wCAIChE,EAAiBC,GAC/BoP,KAAKM,UAAU,gBAAiB,CAC5BC,MAAOlE,aAAaC,QAAQ,SAC5BhM,MAAOK,EACPR,QAASS,M,uCAIA0J,EAAgBhK,GAC7B0P,KAAKM,UAAU,eAAgB,CAC3BC,MAAOlE,aAAaC,QAAQ,SAC5BhC,SACAhK,Y,uCAISA,GACb0P,KAAKM,UAAU,eAAgB,CAC3BC,MAAOlE,aAAaC,QAAQ,SAC5BhM,Y,kCAII3B,GACRqR,KAAKM,UAAU,UAAW,CACtBC,MAAOlE,aAAaC,QAAQ,SAC5B3N,e,eCzKCiS,GAAgBvZ,cAAW,SAACC,GAAD,MAAmB,CACvD,UAAW,CACP,sBAAuB,CACnB+B,MAAO,QAEX,kCAAmC,CAC/BF,gBAAwC,UAAvB7B,EAAM0F,QAAQtE,KAAmB,qBAAuB,sBAE7E,4BAA6B,CACzBS,gBAAwC,UAAvB7B,EAAM0F,QAAQtE,KAAmB,qBAAuB,mBAE7E,4BAA6B,CACzBS,gBAAwC,UAAvB7B,EAAM0F,QAAQtE,KAAmB,qBAAuB,mBAE7E,6BAA8B,CAC1BS,gBAAwC,UAAvB7B,EAAM0F,QAAQtE,KAAmB,qBAAuB,mBAE7E,IAAK,CACDmY,eAAe,GAAD,OAA4B,UAAvBvZ,EAAM0F,QAAQtE,KAAmB,qBAAuB,kBAA7D,YAAyG,UAAvBpB,EAAM0F,QAAQtE,KAAmB,qBAAuB,yBCjBvJoY,I,OAAwBzZ,aAAW,SAACC,GAAD,MAAmB,CAC/DyZ,UAAW,CACPhL,UAAW,UAEfiL,SAAU,CACNrD,WAAYrW,EAAMG,QAAQ,KAE9BwZ,SAAU,CACNtP,UAAWrK,EAAMG,QAAQ,SCLpByZ,GAAgB,WAAO,IACxBC,EAAepG,cAAfoG,WACF3F,EAAUC,cAFe,EAGSrR,mBAAwB,MAHjC,mBAGxBgX,EAHwB,KAGVC,EAHU,KAIzBxZ,EAAUiZ,KAmBhB,OAjBArW,qBAAU,WACNsF,GAAc2L,OAAOC,YAAY,aAAa,SAACa,GAC3CI,QAAQC,IAAIL,GACPA,EAAG,QAIJ6E,EAAgB7E,EAAG,UAHnB6E,EAAgB,MAChB7F,EAAQe,KAAK,YAKrBxM,GAAc2L,OAAOC,YAAY,QAAQ,WACjCwF,GACApR,GAAciC,UAAUmP,QAGjC,CAAC3F,EAAS2F,IAGT,6BACKC,EACG,yBAAK9Y,UAAWT,EAAQkZ,WACpB,kBAACxY,EAAA,EAAD,CAAYC,QAAQ,KAAK8Y,MAAM,SAAShZ,UAAWT,EAAQmZ,UAA3D,MAEI,6BACCI,GAEL,kBAAC/U,EAAA,EAAD,CAAQ7D,QAAQ,YAAYH,MAAM,YAAYC,UAAWT,EAAQoZ,SAAUxY,QAAS,kBAAM+S,EAAQe,KAAK,OAAvG,yBAKJ/S,ICzBHuG,GAAgB,IAAIyP,GACtB+B,IAAyB,EAE9BC,GAAO,WACT,IAAM1Z,EAAWC,cAuBjB,OAtBA6Y,KAEAnW,qBAAU,WAcN,OAbAsF,GAAc2L,OAAOC,YAAY,SAAS,WAEjC4F,KACD7H,IAAMC,MAAM,0CACZ7R,EAASoK,IAAa,IACtBqP,IAAyB,GAE7BE,WAAW1R,GAAc0P,QAAS,QAEtC1P,GAAc2L,OAAOC,YAAY,QAAQ,WACjC4F,IAAwB7H,IAAMgI,QAAQ,sCAC1C5Z,EAASoK,IAAa,OAEnB,WACHnC,GAAc2L,OAAO2B,mBAAmB,SACxCtN,GAAc2L,OAAO2B,mBAAmB,WAE7C,CAACvV,IAGA,oCACI,kBAAC6Z,EAAA,EAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,oDACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,uBACd,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SACd,kBAACxV,EAAA,EAAD,CACI5D,QAAS,WACLiR,IAAMW,KAAK,uBAFnB,oBAiCTyH,GAnBI,WACf,IAAMC,EAAahY,aAAY,SAACjB,GAAD,OAAmBA,EAAMxB,SAClDA,EAAQ0a,YAAe,CACzBhV,QAAS,CACL3C,QAAS0X,EAAW1X,QACpBE,UAAWwX,EAAWxX,UACtB7B,KAAMqZ,EAAWrZ,QAIzB,OACI,yBAAKJ,UAAU,QACX,kBAAC2Z,EAAA,EAAD,CAAe3a,MAAOA,GAClB,kBAAC,GAAD,S,uCCrFV4a,GAAmB,CACrB5a,MAAO,CACHoB,KAAM,OACN2B,QAASjB,IACTmB,UAAWd,IACXQ,WAAY,UAEhBiJ,UAAW,GACXlJ,aAAa,EACbwG,WAAW,EACXC,cAAe,GACf9C,SAAU,GACVoF,QAAS,GACT+B,SAAU,GACV3F,qBAAiB3F,EACjB+M,iBAAiB,EACjBe,qBAAqB,EACrBlI,MAAO,GACPuL,oBAAoB,EACpBjK,gBAAgB,GCjBpB,IAAMyR,GAAgB,CAClB/R,IAAK,OACLgS,aACAC,UAAW,CAAC,UAGVC,GAAmBC,aAAeJ,IDczB,WAA+D,IAA3CrZ,EAA0C,uDAAlCoZ,GAAUM,EAAwB,uCACzE,OAAQA,EAAO9Z,MACX,KAAKvB,EAAQsE,aACT,OAAO,eACA3C,EADP,CAEIxB,MAAM,eACCwB,EAAMxB,MADR,CAEDoB,KAA2B,SAArBI,EAAMxB,MAAMoB,KAAkB,QAAU,WAI1D,KAAKvB,EAAQwB,oBACT,OAAO,eACAG,EADP,CAEIkB,aAAclB,EAAMkB,cAG5B,KAAK7C,EAAQuD,eACT,OAAO,eACA5B,EADP,CAEIxB,MAAM,eACCwB,EAAMxB,MADR,CAED+C,QAASmY,EAAO7X,YAI5B,KAAKxD,EAAQyD,iBACT,OAAO,eACA9B,EADP,CAEIxB,MAAM,eACCwB,EAAMxB,MADR,CAEDiD,UAAWiY,EAAO7X,YAI9B,KAAKxD,EAAQgL,cACT,OAAO,eACArJ,EADP,CAEI0H,UAAWgS,EAAO7X,UAG1B,KAAKxD,EAAQsV,WACT,OAAO,eACA3T,EADP,CAEIoK,UAAWsP,EAAO7X,UAG1B,KAAKxD,EAAQsL,mBACT,OAAO,eACA3J,EADP,CAEI2H,cAAe+R,EAAO7X,UAG9B,KAAKxD,EAAQwV,YACT,OAAO,eACA7T,EADP,CAEI6E,SAAS,GAAD,oBAAM7E,EAAM6E,UAAZ,CAAsB6U,EAAO7X,YAG7C,KAAKxD,EAAQkL,aACT,OAAO,eACAvJ,EADP,CAEI6E,SAAU6U,EAAO7X,UAGzB,KAAKxD,EAAQ8E,gBACT,OAAO,eACAnD,EADP,CAEIxB,MAAM,eACCwB,EAAMxB,MADR,CAED2C,WAAYuY,EAAO7X,YAI/B,KAAKxD,EAAQwL,aACT,OAAO,eACA7J,EADP,CAEIgM,SAAU0N,EAAO7X,UAGzB,KAAKxD,EAAQoL,qBACT,OAAO,eACAzJ,EADP,CAEIqG,gBAAiBqT,EAAO7X,UAGhC,KAAKxD,EAAQ+M,yBACT,OAAO,eACApL,EADP,CAEIyN,iBAAkBzN,EAAMyN,kBAGhC,KAAKpP,EAAQ0L,6BACT,OAAO,eACA/J,EADP,CAEIwO,qBAAsBxO,EAAMwO,sBAGpC,KAAKnQ,EAAQ4V,kBACT,OAAO,eACAjU,EADP,CAEIoK,UAAU,eACHpK,EAAMoK,UADJ,eAEJsP,EAAO7X,QAAQ2F,MAFX,eAGExH,EAAMoK,UAAUsP,EAAO7X,QAAQ2F,OAHjC,CAIDoD,QAAS8O,EAAO7X,QAAQ+I,cAKxC,KAAKvM,EAAQ8V,eACT,OAAO,eACAnU,EADP,CAEIoK,UAAU,eACHpK,EAAMoK,UADJ,eAEJsP,EAAO7X,QAAQ2F,MAFX,eAGExH,EAAMoK,UAAUsP,EAAO7X,QAAQ2F,OAHjC,CAIDkD,UAAWgP,EAAO7X,QAAQqS,WAK1C,KAAK7V,EAAQ6L,YACT,OAAO,eACAlK,EADP,CAEIiK,QAASyP,EAAO7X,UAGxB,KAAKxD,EAAQiW,SACT,OAAO,eACAtU,EADP,CAEIsG,MAAM,eACCtG,EAAMsG,MADR,eAEAoT,EAAO7X,QAAQgE,OAAS6T,EAAO7X,YAI5C,KAAKxD,EAAQyB,4BACT,OAAO,eACAE,EADP,CAEI6R,oBAAqB7R,EAAM6R,qBAGnC,KAAKxT,EAAQiP,iBACT,OAAO,eACAtN,EADP,CAEI4H,gBAAiB5H,EAAM4H,iBAG/B,QACI,OAAO5H,M,aClKJ,WACX,IAAM2Z,EAAQC,aAAYJ,IAE1B,MAAO,CAAEG,QAAOE,UADEC,aAAaH,ICNNI,GAArBJ,G,GAAAA,MAAOE,G,GAAAA,UAYfG,IAASC,OAAO,mBAVY,WACxB,OACI,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,KAAD,CAAaO,QAAS,KAAML,UAAWA,IACnC,kBAAC,GAAD,UAMA,MAAeM,SAASC,eAAe,W","file":"static/js/main.c95dfcdd.chunk.js","sourcesContent":["import { ITheme } from './theming';\nimport { Color } from '@material-ui/core';\n\nexport enum Actions {\n    TOGGLE_THEME_DIALOG,\n    TOGGLE_JOIN_GUILD_DIALOG,\n    TOGGLE_GUILD_SETTINGS_DIALOG,\n    TOGGLE_USER_SETTINGS_DIALOG,\n\n    INVERT_THEME,\n    CHANGE_PRIMARY,\n    CHANGE_SECONDARY,\n    SET_INPUT_STYLE,\n\n    SET_CONNECTED,\n\n    SET_GUILDS,\n    SET_SELECTED_GUILD,\n    SET_CHANNELS,\n    SET_SELECTED_CHANNEL,\n    SET_GUILD_PICTURE,\n    SET_GUILD_NAME,\n    SET_INVITES,\n    SET_USER,\n    SET_MESSAGES,\n    ADD_MESSAGE,\n\n    FOCUS_CHAT_INPUT\n}\n\ninterface IGuild {\n    guildid: string;\n    picture: string;\n    guildname: string;\n    owner: boolean;\n}\n\ninterface ISetGuildPicturePayload {\n    guild: string;\n    picture: string;\n}\n\ninterface ISetGuildNamePayload {\n    guild: string;\n    name: string;\n}\n\nexport interface IChannels {\n    [key: string]: string;\n}\n\nexport interface IMessage {\n    userid: string;\n    createdat: number;\n    guild: string;\n    channel: string;\n    message: string;\n    messageid: string;\n}\n\nexport interface IInvertTheme {\n    type: Actions.INVERT_THEME;\n}\n\nexport interface IToggleThemeDialog {\n    type: Actions.TOGGLE_THEME_DIALOG;\n}\n\nexport interface IChangePrimary {\n    type: Actions.CHANGE_PRIMARY;\n    payload: Color;\n}\n\nexport interface IChangeSecondary {\n    type: Actions.CHANGE_SECONDARY;\n    payload: Color;\n}\n\nexport interface ISetConnected {\n    type: Actions.SET_CONNECTED;\n    payload: boolean;\n}\n\nexport interface ISetGuilds {\n    type: Actions.SET_GUILDS;\n    payload: {\n        [key: string]: IGuild;\n    };\n}\n\nexport interface ISetSelectedGuild {\n    type: Actions.SET_SELECTED_GUILD;\n    payload: string;\n}\n\nexport interface IAddMessage {\n    type: Actions.ADD_MESSAGE;\n    payload: IMessage;\n}\n\nexport interface ISetMessages {\n    type: Actions.SET_MESSAGES;\n    payload: IMessage[];\n}\n\nexport interface ISetInputStyle {\n    type: Actions.SET_INPUT_STYLE;\n    payload: 'standard' | 'filled' | 'outlined';\n}\n\nexport interface ISetChannels {\n    type: Actions.SET_CHANNELS;\n    payload: {\n        [key: string]: string;\n    };\n}\n\nexport interface ISetSelectedChannel {\n    type: Actions.SET_SELECTED_CHANNEL;\n    payload: string;\n}\n\nexport interface IToggleJoinGuildDialog {\n    type: Actions.TOGGLE_JOIN_GUILD_DIALOG;\n}\n\nexport interface IToggleGuildSettingsDialog {\n    type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG;\n}\n\nexport interface ISetGuildPicture {\n    type: Actions.SET_GUILD_PICTURE;\n    payload: ISetGuildPicturePayload;\n}\n\nexport interface ISetGuildName {\n    type: Actions.SET_GUILD_NAME;\n    payload: ISetGuildNamePayload;\n}\n\nexport interface ISetInvites {\n    type: Actions.SET_INVITES;\n    payload: {\n        [key: string]: number;\n    };\n}\n\nexport interface ISetUser {\n    type: Actions.SET_USER;\n    payload: {\n        userid: string;\n        username: string;\n        avatar: string;\n    };\n}\n\nexport interface IToggleUserSettingsDialog {\n    type: Actions.TOGGLE_USER_SETTINGS_DIALOG;\n}\n\nexport interface IFocusChatInput {\n    type: Actions.FOCUS_CHAT_INPUT;\n}\n\nexport interface IState {\n    theme: ITheme;\n    themeDialog: boolean;\n    connected: boolean;\n    guildList: {\n        [key: string]: IGuild;\n    };\n    selectedGuild: string;\n    messages: IMessage[];\n    channels: {\n        [key: string]: string;\n    };\n    selectedChannel: string | undefined;\n    joinGuildDialog: boolean;\n    guildSettingsDialog: boolean;\n    invites: {\n        [key: string]: number;\n    };\n    users: {\n        [key: string]: {\n            username: string;\n            avatar: string;\n        };\n    };\n    userSettingsDialog: boolean;\n    chatInputFocus: boolean;\n}\n\nexport type Action =\n    | IInvertTheme\n    | IToggleThemeDialog\n    | IChangePrimary\n    | IChangeSecondary\n    | ISetConnected\n    | ISetGuilds\n    | ISetSelectedGuild\n    | IAddMessage\n    | ISetMessages\n    | ISetInputStyle\n    | ISetChannels\n    | ISetSelectedChannel\n    | IToggleJoinGuildDialog\n    | IToggleGuildSettingsDialog\n    | ISetGuildPicture\n    | ISetGuildName\n    | ISetInvites\n    | ISetUser\n    | IToggleUserSettingsDialog\n    | IFocusChatInput;\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useHarmonyBarStyles = makeStyles((theme: Theme) => ({\n    leftMenuBtn: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    }\n}));\n","import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport UserIcon from '@material-ui/icons/AccountCircle';\nimport { useHarmonyBarStyles } from './HarmonyBarStyle';\nimport { useDispatch } from 'react-redux';\nimport { Actions } from '../../../types/redux';\n\nexport const HarmonyBar = () => {\n    const classes = useHarmonyBarStyles();\n    const dispatch = useDispatch();\n\n    return (\n        <AppBar position='absolute'>\n            <Toolbar>\n                <IconButton edge='start' color='inherit' className={classes.leftMenuBtn}>\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant='h6' className={classes.title}>\n                    Harmony\n                </Typography>\n                <IconButton edge='end' color='inherit' onClick={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n                    <PaletteIcon />\n                </IconButton>\n                <IconButton edge='end' color='inherit' onClick={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })}>\n                    <UserIcon />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n};\n","import React from 'react';\nimport { ButtonBase, Color, Typography } from '@material-ui/core';\nimport { red, yellow, orange, blue, green, indigo } from '@material-ui/core/colors';\nimport CheckCircle from '@material-ui/icons/CheckCircle';\n\ninterface IPickerState {\n    color: Color;\n    setColor: React.Dispatch<React.SetStateAction<Color>>;\n    label: string;\n}\n\nexport const ColorPicker = (state: IPickerState) => {\n    return (\n        <div>\n            <Typography>{state.label}</Typography>\n            <div style={{ display: 'flex' }}>\n                <ButtonBase style={{ backgroundColor: red[500], width: '40px', height: '40px' }} onClick={() => state.setColor(red)}>\n                    {state.color === red ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: orange[500], width: '40px', height: '40px' }} onClick={() => state.setColor(orange)}>\n                    {state.color === orange ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: yellow[500], width: '40px', height: '40px' }} onClick={() => state.setColor(yellow)}>\n                    {state.color === yellow ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: green[500], width: '40px', height: '40px' }} onClick={() => state.setColor(green)}>\n                    {state.color === green ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: blue[500], width: '40px', height: '40px' }} onClick={() => state.setColor(blue)}>\n                    {state.color === blue ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: indigo[500], width: '40px', height: '40px' }} onClick={() => state.setColor(indigo)}>\n                    {state.color === indigo ? <CheckCircle /> : undefined}\n                </ButtonBase>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Color,\n    FormControlLabel,\n    FormControl,\n    FormLabel,\n    RadioGroup,\n    Radio,\n    Typography,\n    Select,\n    MenuItem\n} from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../types/redux';\nimport { ColorPicker } from './ColorPicker';\nimport { orange, red } from '@material-ui/core/colors';\n\nexport const ThemeDialog = () => {\n    const [open, themeType, inputStyle] = useSelector((state: IState) => [\n        state.themeDialog,\n        state.theme.type,\n        state.theme.inputStyle\n    ]);\n    const [primary, setPrimary] = useState<Color>(red);\n    const [secondary, setSecondary] = useState<Color>(orange);\n    const dispatch = useDispatch();\n\n    const changeInputStyle = (ev: React.ChangeEvent<{ value: unknown }>) => {\n        if (typeof ev.target.value === 'string') {\n            dispatch({ type: Actions.SET_INPUT_STYLE, payload: ev.target.value });\n        }\n    };\n\n    useEffect(() => {\n        dispatch({ type: Actions.CHANGE_PRIMARY, payload: primary });\n    }, [primary, dispatch]);\n    useEffect(() => {\n        dispatch({ type: Actions.CHANGE_SECONDARY, payload: secondary });\n    }, [secondary, dispatch]);\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n            <DialogTitle>Customize Theme</DialogTitle>\n            <DialogContent>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>Theme Type</FormLabel>\n                    <RadioGroup\n                        value={themeType}\n                        row\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch({ type: Actions.INVERT_THEME })}\n                    >\n                        <FormControlLabel\n                            value='light'\n                            control={<Radio color='secondary' />}\n                            label='Light'\n                            labelPlacement='end'\n                        />\n                        <FormControlLabel\n                            value='dark'\n                            control={<Radio color='secondary' />}\n                            label='Dark'\n                            labelPlacement='end'\n                        />\n                    </RadioGroup>\n                </FormControl>\n                <ColorPicker color={primary} setColor={setPrimary} label={'Primary Color'} />\n                <ColorPicker color={secondary} setColor={setSecondary} label={'Secondary Color'} />\n                <Typography>Text Input Style</Typography>\n                <Select\n                    value={inputStyle || 'standard'}\n                    onChange={changeInputStyle}\n                    variant={inputStyle as any}\n                    fullWidth\n                >\n                    <MenuItem value={'standard'}>Standard</MenuItem>\n                    <MenuItem value={'filled'}>Filled</MenuItem>\n                    <MenuItem value={'outlined'}>Outlined</MenuItem>\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button color='primary' onClick={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useAppStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n        height: '100%',\n        flexDirection: 'column'\n    },\n    leftMenuBtn: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    },\n    navFill: {\n        ...theme.mixins.toolbar\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useChatAreaStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        flexGrow: 1,\n        width: '100%',\n        overflow: 'auto'\n    },\n    guildlist: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[200],\n        padding: theme.spacing(1),\n        borderRight: '1px solid grey'\n    },\n    channellist: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[300],\n        padding: 0,\n        width: '300px',\n        overflowY: 'auto'\n    },\n    guildiconroot: {\n        borderRadius: '64px'\n    },\n    guildicon: {\n        width: '64px',\n        height: '64px'\n    },\n    chatArea: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexFlow: 'column',\n        width: '100%',\n        height: '100%'\n    },\n    messages: {\n        width: '100%',\n        flex: '1 1 auto',\n        overflow: 'auto'\n    },\n    input: {\n        width: '100%'\n    }\n}));\n","import React from 'react';\nimport { ListItem, ListItemAvatar, Avatar, ListItemText, Typography } from '@material-ui/core';\n\ninterface IProps {\n    guild: string;\n    userid: string;\n    username: string;\n    createdat: number;\n    message: string;\n    avatar?: string;\n}\n\nconst UtcEpochToLocalDate = (time: number) => {\n    const returnDate = new Date(0);\n    returnDate.setUTCSeconds(time);\n    return ` - ${returnDate.toDateString()} at ${returnDate.toLocaleTimeString()}`;\n};\n\nexport const Message = (props: IProps) => {\n    return (\n        <ListItem alignItems='flex-start'>\n            <ListItemAvatar>\n                <Avatar\n                    alt={props.userid}\n                    src={props.avatar ? `http://localhost:2288/filestore/${props.avatar}` : undefined}\n                />\n            </ListItemAvatar>\n            <ListItemText\n                primary={\n                    <>\n                        {props.username || props.userid}\n                        <Typography component='span' variant='body1' color='textSecondary'>\n                            {UtcEpochToLocalDate(props.createdat)}\n                        </Typography>\n                    </>\n                }\n                secondary={props.message}\n            />\n        </ListItem>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { List } from '@material-ui/core';\nimport { Message } from './Message';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { harmonySocket } from '../../../Root';\n\nexport const Messages = () => {\n    const [messages, selectedChannel, users] = useSelector((state: IState) => [\n        state.messages,\n        state.selectedChannel,\n        state.users\n    ]);\n    const messageList = useRef<HTMLUListElement | undefined>(undefined);\n\n    useEffect(() => {\n        if (messageList.current) {\n            messageList.current.scrollTop = messageList.current.scrollHeight;\n            messageList.current.scrollLeft = 0;\n        }\n    }, [messages]);\n\n    // TODO : FIX DOUBLE REQUEST\n    useEffect(() => {\n        const userIDs = [...new Set(messages.map((val) => val.userid))];\n        userIDs.forEach((val) => {\n            if (!users[val]) {\n                harmonySocket.sendGetUser(val);\n            }\n        });\n    }, [messages, users]);\n\n    return (\n        <List innerRef={messageList}>\n            {messages\n                ? messages.map((val) => {\n                      if (val.channel === selectedChannel) {\n                          return (\n                              <Message\n                                  key={val.messageid}\n                                  guild={val.guild}\n                                  userid={val.userid}\n                                  username={users[val.userid] ? users[val.userid].username : ''}\n                                  createdat={val.createdat}\n                                  avatar={users[val.userid] ? users[val.userid].avatar : undefined}\n                                  message={val.message}\n                              />\n                          );\n                      } else {\n                          return undefined;\n                      }\n                  })\n                : undefined}\n        </List>\n    );\n};\n","import React, { useRef, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { harmonySocket } from '../../../Root';\n\nexport const Input = () => {\n    const [connected, inputStyle, guildID, channelID, focus] = useSelector((state: IState) => [\n        state.connected,\n        state.theme.inputStyle,\n        state.selectedGuild,\n        state.selectedChannel,\n        state.chatInputFocus\n    ]);\n    const inputField = useRef<HTMLInputElement | undefined>();\n\n    const onKeyPress = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            // does the input field exist and is it not blank\n            if (inputField.current && !/^\\s*$/.test(inputField.current.value) && channelID) {\n                harmonySocket.sendMessage(guildID, channelID, inputField.current.value);\n                inputField.current.value = '';\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (inputField.current) {\n            inputField.current.focus();\n        }\n    }, [focus]);\n\n    return (\n        <div>\n            <TextField\n                label={connected ? 'Message' : 'Currently Offline'}\n                variant={inputStyle as any}\n                fullWidth\n                multiline\n                rowsMax={3}\n                rows={3}\n                onKeyPress={onKeyPress}\n                inputRef={inputField}\n                color='secondary'\n            />\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useGuildListStyle = makeStyles((theme: Theme) => ({\n    guildlist: {\n        width: '68px'\n    },\n    guildiconroot: {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        marginTop: theme.spacing(1),\n        border: `2px solid transparent`\n    },\n    selectedguildicon: {\n        border: `2px solid ${theme.palette.primary.light}`\n    },\n    guildicon: {\n        width: '64px',\n        height: '64px',\n        borderRadius: '64px',\n        objectFit: 'cover',\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[400]\n    },\n    joinGuild: {\n        marginTop: theme.spacing(1),\n        width: '64px',\n        height: '64px',\n        borderRadius: '64px',\n        backgroundColor: theme.palette.secondary.dark\n    }\n}));\n","import { Actions, IMessage, IChannels } from '../types/redux';\nimport { IGuildData } from '../types/socket';\n\n/**\n * A function that sets the connected state to a value\n * @param payload The connection state to set it to\n */\nexport function SetConnected(payload: boolean) {\n    return {\n        type: Actions.SET_CONNECTED,\n        payload\n    };\n}\n\n/**\n * A function that sets the messages (displayed in the chat area)\n * @param payload The messages to assign\n */\nexport function SetMessages(payload: IMessage[]) {\n    return {\n        type: Actions.SET_MESSAGES,\n        payload\n    };\n}\n\nexport function AddMessage(payload: IMessage) {\n    return {\n        type: Actions.ADD_MESSAGE,\n        payload\n    };\n}\n\n/**\n * A function that sets the selected channel. Used for the channel list\n * @param payload What to set the selected channel to\n */\nexport function SetSelectedChannel(payload: string | undefined) {\n    return {\n        type: Actions.SET_SELECTED_CHANNEL,\n        payload\n    };\n}\n\n/**\n * A function that sets the selected guild. Used for the guild list\n * @param payload The guild ID to set the selection to\n */\nexport function SetSelectedGuild(payload: string | undefined) {\n    return {\n        type: Actions.SET_SELECTED_GUILD,\n        payload\n    };\n}\n\nexport function SetChannels(payload: IChannels) {\n    return {\n        type: Actions.SET_CHANNELS,\n        payload\n    };\n}\n\nexport function SetGuilds(payload: IGuildData[]) {\n    return {\n        type: Actions.SET_GUILDS,\n        payload\n    };\n}\n\nexport function ToggleThemeDialog() {\n    return {\n        type: Actions.TOGGLE_THEME_DIALOG\n    };\n}\n\nexport function ToggleGuildDialog() {\n    return {\n        type: Actions.TOGGLE_JOIN_GUILD_DIALOG\n    };\n}\n\nexport function ToggleGuildSettingsDialog() {\n    return {\n        type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG\n    };\n}\n\nexport function SetGuildPicture(guild: string, picture: string) {\n    return {\n        type: Actions.SET_GUILD_PICTURE,\n        payload: {\n            guild,\n            picture\n        }\n    };\n}\n\nexport function SetGuildName(guild: string, name: string) {\n    return {\n        type: Actions.SET_GUILD_NAME,\n        payload: {\n            guild,\n            name\n        }\n    };\n}\n\ninterface IInvites {\n    [key: string]: number;\n}\n\nexport function SetInvites(invites: IInvites) {\n    return {\n        type: Actions.SET_INVITES,\n        payload: invites\n    };\n}\n\nexport function SetUser(userid: string, username: string, avatar: string) {\n    return {\n        type: Actions.SET_USER,\n        payload: {\n            userid,\n            username,\n            avatar\n        }\n    };\n}\n\nexport function FocusChatInput() {\n    return {\n        type: Actions.FOCUS_CHAT_INPUT\n    };\n}\n","import React from 'react';\nimport { ButtonBase, Tooltip, List, ListItem, ListItemText } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Actions, IState } from '../../../../types/redux';\nimport { useGuildListStyle } from './GuildListStyle';\nimport { ContextMenuTrigger, ContextMenu, MenuItem } from 'react-contextmenu';\nimport { harmonySocket } from '../../../Root';\nimport { ToggleGuildSettingsDialog } from '../../../../redux/Dispatches';\n\ninterface IProps {\n    guildid: string;\n    guildname: string;\n    picture: string;\n    selected: boolean;\n}\n\nexport const GuildIcon = (props: IProps) => {\n    const [guildsList] = useSelector((state: IState) => [state.guildList]);\n    const classes = useGuildListStyle();\n    const dispatch = useDispatch();\n\n    const onClick = () => {\n        dispatch({\n            type: Actions.SET_SELECTED_GUILD,\n            payload: props.guildid\n        });\n    };\n\n    const handleLeave = () => {\n        harmonySocket.leaveGuild(props.guildid);\n    };\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.guildid}>\n                <ButtonBase\n                    className={`${classes.guildiconroot} ${props.selected ? classes.selectedguildicon : undefined}`}\n                    key={props.guildid}\n                    onClick={onClick}\n                >\n                    <Tooltip title={props.guildname} placement='right'>\n                        <img className={classes.guildicon} alt='' src={props.picture} draggable={false} />\n                    </Tooltip>\n                </ButtonBase>\n            </ContextMenuTrigger>\n            <ContextMenu id={props.guildid}>\n                <List>\n                    <MenuItem>\n                        <ListItem button onClick={handleLeave}>\n                            <ListItemText primary='Leave Guild' />\n                        </ListItem>\n                    </MenuItem>\n                    {guildsList && guildsList[props.guildid].owner ? (\n                        <>\n                            <MenuItem>\n                                <ListItem button onClick={() => dispatch(ToggleGuildSettingsDialog())}>\n                                    <ListItemText primary='Guild Settings' />\n                                </ListItem>\n                            </MenuItem>\n                        </>\n                    ) : (\n                        undefined\n                    )}\n                </List>\n            </ContextMenu>\n        </>\n    );\n};\n","import React from 'react';\nimport GroupAdd from '@material-ui/icons/GroupAdd';\nimport { useGuildListStyle } from './GuildListStyle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { GuildIcon } from './GuildIcon';\nimport { ButtonBase, Tooltip } from '@material-ui/core';\n\nexport const GuildList = () => {\n    const classes = useGuildListStyle();\n    const [guildList, selectedGuild] = useSelector((state: IState) => [state.guildList, state.selectedGuild]);\n    const dispatch = useDispatch();\n\n    return (\n        <div className={classes.guildlist}>\n            {Object.keys(guildList).map((key) => {\n                return (\n                    <GuildIcon\n                        guildid={key}\n                        key={key}\n                        selected={selectedGuild === key}\n                        guildname={guildList[key].guildname}\n                        picture={guildList[key].picture}\n                    />\n                );\n            })}\n            <ButtonBase\n                className={classes.joinGuild}\n                onClick={() => dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG })}\n            >\n                <Tooltip title={'Join Or Create Guild'} placement='right'>\n                    <GroupAdd />\n                </Tooltip>\n            </ButtonBase>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useChannelListStyle = makeStyles((theme: Theme) => ({\n    selectedChannel: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[400]\n    },\n    nested: {\n        paddingLeft: theme.spacing(4)\n    },\n    newChannelInput: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2)\n    }\n}));\n","import React, { useState, useRef } from 'react';\nimport { List, ListItem, ListItemText, ListItemIcon, Collapse, Tooltip, Input } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport LeaveIcon from '@material-ui/icons/ExitToApp';\nimport { ContextMenu, ContextMenuTrigger } from 'react-contextmenu';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { useChannelListStyle } from './ChannelListStyle';\nimport { harmonySocket } from '../../../Root';\nimport { ToggleGuildSettingsDialog, SetSelectedChannel } from '../../../../redux/Dispatches';\n\ninterface IChannelProps {\n    channelid: string;\n    channelname: string;\n    setSelectedChannel: (value: string) => void;\n}\n\nconst Channel = (props: IChannelProps) => {\n    const [selectedGuild, selectedChannel, guildsList] = useSelector((state: IState) => [\n        state.selectedGuild,\n        state.selectedChannel,\n        state.guildList\n    ]);\n    const classes = useChannelListStyle();\n\n    const handleDelete = () => {\n        harmonySocket.sendDeleteChannel(selectedGuild, props.channelid);\n    };\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.channelid}>\n                <ListItem\n                    button\n                    key={props.channelid}\n                    className={props.channelid === selectedChannel ? classes.selectedChannel : undefined}\n                    onClick={() => props.setSelectedChannel(props.channelid)}\n                >\n                    <ListItemText secondary={`#${props.channelname}`} />\n                </ListItem>\n            </ContextMenuTrigger>\n            {guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                <ContextMenu id={props.channelid}>\n                    <List>\n                        <ListItem button onClick={handleDelete}>\n                            <ListItemText primary='Delete Channel' />\n                        </ListItem>\n                    </List>\n                </ContextMenu>\n            ) : (\n                undefined\n            )}\n        </>\n    );\n};\n\nexport const ChannelList = () => {\n    const [channels, selectedGuild, guildsList] = useSelector((state: IState) => [\n        state.channels,\n        state.selectedGuild,\n        state.guildList\n    ]);\n    const [actionsExpanded, setActionsExpanded] = useState<boolean>(false);\n    const [addingChannel, setAddingChannel] = useState<boolean>(false);\n    const addChannelInput = useRef<HTMLInputElement | null>(null);\n    const dispatch = useDispatch();\n    const classes = useChannelListStyle();\n\n    const leaveGuild = () => {\n        harmonySocket.leaveGuild(selectedGuild);\n    };\n\n    const setSelectedChannel = (value: string) => {\n        dispatch(SetSelectedChannel(value));\n    };\n\n    const toggleGuildSettings = () => {\n        harmonySocket.sendGetInvites(selectedGuild);\n        dispatch(ToggleGuildSettingsDialog());\n    };\n\n    const addChannelButtonClicked = () => {\n        setAddingChannel(true);\n    };\n\n    const handleChannelNameFinish = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n        if (ev.key === 'Enter' && addChannelInput.current) {\n            harmonySocket.sendAddChannel(selectedGuild, addChannelInput.current.value);\n            setAddingChannel(false);\n        }\n    };\n\n    return (\n        <div>\n            <List style={{ padding: 0 }}>\n                {selectedGuild ? (\n                    <>\n                        <ListItem button onClick={() => setActionsExpanded(!actionsExpanded)}>\n                            <ListItemText primary='Guild Options' />\n                            {actionsExpanded ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={actionsExpanded} timeout='auto' unmountOnExit>\n                            <List component='div' disablePadding>\n                                {guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                                    <>\n                                        <ListItem button className={classes.nested} onClick={toggleGuildSettings}>\n                                            <ListItemIcon>\n                                                <SettingsIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary='Guild Settings' />\n                                        </ListItem>\n                                    </>\n                                ) : (\n                                    undefined\n                                )}\n                                <ListItem button className={classes.nested} onClick={leaveGuild}>\n                                    <ListItemIcon>\n                                        <LeaveIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary='Leave Guild' />\n                                </ListItem>\n                            </List>\n                        </Collapse>\n                    </>\n                ) : (\n                    undefined\n                )}\n                {channels\n                    ? Object.keys(channels).map((key) => {\n                          return (\n                              <Channel\n                                  key={key}\n                                  channelid={key}\n                                  channelname={channels[key]}\n                                  setSelectedChannel={setSelectedChannel}\n                              />\n                          );\n                      })\n                    : undefined}\n                <div className={classes.newChannelInput}>\n                    {addingChannel ? (\n                        <Input\n                            fullWidth\n                            autoFocus\n                            onKeyPress={handleChannelNameFinish}\n                            onBlur={() => setAddingChannel(false)}\n                            placeholder={'Channel Name'}\n                            inputRef={addChannelInput}\n                        />\n                    ) : (\n                        undefined\n                    )}\n                </div>\n                {selectedGuild && guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                    <Tooltip title='Create Channel'>\n                        <ListItem button onClick={addChannelButtonClicked}>\n                            <ListItemText style={{ textAlign: 'center' }} primary='+' />\n                        </ListItem>\n                    </Tooltip>\n                ) : (\n                    undefined\n                )}\n            </List>\n        </div>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useChatAreaStyles } from './ChatAreaStyle';\nimport { Messages } from './Messages/Messages';\nimport { Input } from './Input/Input';\nimport { GuildList } from './GuildList/GuildList';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../types/redux';\nimport { ChannelList } from './ChannelList/ChannelList';\nimport { FocusChatInput } from '../../../redux/Dispatches';\n\nexport const ChatArea = () => {\n    const classes = useChatAreaStyles();\n    const [messages] = useSelector((state: IState) => [state.messages]);\n    const messagesRef = useRef<HTMLDivElement | null>(null);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (messagesRef.current) {\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const onKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n        if (ev.key !== 'Tab') {\n            dispatch(FocusChatInput());\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.guildlist}>\n                <GuildList />\n            </div>\n            <div className={classes.channellist}>\n                <ChannelList />\n            </div>\n            <div className={classes.chatArea}>\n                <div className={classes.messages} ref={messagesRef} onKeyDown={onKeyDown} tabIndex={-1}>\n                    <Messages />\n                </div>\n                <div className={classes.input}>\n                    <Input />\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { Dialog, TextField, Typography, DialogContent, Button, Grid } from '@material-ui/core';\nimport { harmonySocket } from '../../../Root';\n\nexport const JoinGuild = () => {\n    const [open, inputStyle] = useSelector((state: IState) => [state.joinGuildDialog, state.theme.inputStyle]);\n    const [joinErr] = useState<string>('');\n    const [createErr] = useState<string>('');\n    const joinCodeRef = useRef<HTMLInputElement | null>(null);\n    const guildNameRef = useRef<HTMLInputElement | null>(null);\n    const dispatch = useDispatch();\n\n    const createGuild = () => {\n        if (guildNameRef.current && guildNameRef.current.value) {\n            harmonySocket.createGuild(guildNameRef.current.value);\n        }\n    };\n\n    const joinGuild = () => {\n        if (joinCodeRef.current && joinCodeRef.current.value) {\n            harmonySocket.joinGuild(joinCodeRef.current.value);\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG })}>\n            <DialogContent>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <div>\n                            <Typography variant='h5'>Join Guild</Typography>\n                            <TextField label='Join Code' variant={inputStyle as any} fullWidth inputRef={joinCodeRef} />\n                            <Typography color='error' variant='body2'>\n                                {joinErr || <br />}\n                            </Typography>\n                            <Button onClick={joinGuild}>Join Guild</Button>\n                        </div>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div>\n                            <Typography variant='h5'>Create Guild</Typography>\n                            <TextField\n                                label='Guild Name'\n                                variant={inputStyle as any}\n                                fullWidth\n                                inputRef={guildNameRef}\n                            />\n                            <Typography color='error' variant='body2'>\n                                {createErr || <br />}\n                            </Typography>\n                            <Button onClick={createGuild}>Create Guild</Button>\n                        </div>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useGuildSettingsStyle = makeStyles((theme: Theme) => ({\n    guildIcon: {\n        width: '100px',\n        height: '100px'\n    },\n    menuEntry: {\n        marginTop: theme.spacing(2)\n    },\n    clipboardbtn: {\n        marginLeft: theme.spacing(3)\n    }\n}));\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { IState, Actions } from '../../../../types/redux';\nimport {\n    Dialog,\n    DialogContent,\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Button,\n    TextField,\n    Avatar,\n    ButtonBase,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Tooltip\n} from '@material-ui/core';\nimport copy from 'copy-to-clipboard';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useGuildSettingsStyle } from './GuildSettingsStyle';\nimport { toast } from 'react-toastify';\nimport { harmonySocket } from '../../../Root';\n\nexport const GuildSettings = () => {\n    const [open, selectedGuild, inputStyle, guilds, invites] = useSelector((state: IState) => [\n        state.guildSettingsDialog,\n        state.selectedGuild,\n        state.theme.inputStyle,\n        state.guildList,\n        state.invites\n    ]);\n    const dispatch = useDispatch();\n    const guildIconUpload = useRef<HTMLInputElement | null>(null);\n    const [guildName, setGuildName] = useState<string | undefined>(\n        guilds[selectedGuild] ? guilds[selectedGuild].guildname : undefined\n    );\n    const [guildIconFile, setGuildIconFile] = useState<File | null>(null);\n    const [guildIcon, setGuildIcon] = useState<string | undefined>(\n        guilds[selectedGuild] ? guilds[selectedGuild].picture : undefined\n    );\n    const classes = useGuildSettingsStyle();\n\n    const deleteInviteLink = (invite: string) => {\n        harmonySocket.sendDeleteInvite(invite, selectedGuild);\n    };\n\n    const createInviteLink = () => {\n        harmonySocket.sendCreateInvite(selectedGuild);\n    };\n\n    const onSaveChanges = () => {\n        if (guilds[selectedGuild]) {\n            if (guildIcon !== guilds[selectedGuild].picture && guildIconFile) {\n                const guildIconUpload = new FormData();\n                guildIconUpload.append('file', guildIconFile);\n                axios\n                    .post(`http://${window.location.hostname}:2288/api/rest/fileupload`, guildIconUpload, {})\n                    .then((res) => {\n                        if (res.data) {\n                            const uploadID = res.data;\n                            harmonySocket.sendGuildPictureUpdate(\n                                selectedGuild,\n                                `http://${window.location.hostname}:2288/filestore/${uploadID}`\n                            );\n                        }\n                    })\n                    .catch(() => {\n                        toast.error('Failed to update guild icon');\n                    });\n            }\n            if (guilds[selectedGuild].guildname !== guildName && guildName) {\n                harmonySocket.sendGuildNameUpdate(selectedGuild, guildName);\n            }\n        }\n    };\n\n    const onGuildIconSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.currentTarget.files && event.currentTarget.files.length > 0) {\n            const file = event.currentTarget.files[0];\n            setGuildIconFile(file);\n            if (file.type.startsWith('image/') && file.size < 33554432) {\n                const fileReader = new FileReader();\n                fileReader.readAsDataURL(file);\n                fileReader.addEventListener('load', () => {\n                    if (typeof fileReader.result === 'string') {\n                        setGuildIcon(fileReader.result);\n                    }\n                });\n            }\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG })} fullScreen>\n            <AppBar style={{ position: 'relative' }}>\n                <Toolbar>\n                    <IconButton\n                        edge='start'\n                        color='inherit'\n                        onClick={() =>\n                            dispatch({\n                                type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG\n                            })\n                        }\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant='h6'>Guild Settings</Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <div style={{ width: '33%' }}>\n                    <input\n                        type='file'\n                        id='file'\n                        multiple\n                        ref={guildIconUpload}\n                        style={{ display: 'none' }}\n                        onChange={onGuildIconSelected}\n                    />\n                    <ButtonBase\n                        style={{ borderRadius: '50%' }}\n                        onClick={() => {\n                            if (guildIconUpload.current) {\n                                guildIconUpload.current.click();\n                            }\n                        }}\n                    >\n                        <Avatar className={classes.guildIcon} src={guildIcon}></Avatar>\n                    </ButtonBase>\n                    <TextField\n                        label='Guild Name'\n                        fullWidth\n                        variant={inputStyle as any}\n                        className={classes.menuEntry}\n                        value={guildName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setGuildName(e.currentTarget.value)}\n                    />\n                    <Button variant='contained' color='secondary' className={classes.menuEntry} onClick={onSaveChanges}>\n                        Save Changes\n                    </Button>\n                    <Typography variant='h4' className={classes.menuEntry}>\n                        Join Codes\n                    </Typography>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Join Code</TableCell>\n                                <TableCell>Amount Used</TableCell>\n                                <TableCell>Actions</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {Object.keys(invites).map((key) => {\n                                return (\n                                    <TableRow key={key}>\n                                        <TableCell component='th' scope='row'>\n                                            {key}\n                                        </TableCell>\n                                        <TableCell component='th' scope='row'>\n                                            {invites[key]}\n                                        </TableCell>\n                                        <TableCell component='td' scope='row'>\n                                            <Tooltip title='Copy Invite Link'>\n                                                <IconButton\n                                                    onClick={() => {\n                                                        copy(\n                                                            `http://${window.location.hostname}${\n                                                                window.location.port ? ':' + window.location.port : ''\n                                                            }/invite/${key}`\n                                                        );\n                                                        toast.info('Successfully copied to clipboard!');\n                                                    }}\n                                                >\n                                                    <ShareIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                            <Tooltip title='Delete Invite Link'>\n                                                <IconButton onClick={() => deleteInviteLink(key)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                    <Button fullWidth onClick={createInviteLink}>\n                        <AddIcon />\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useUserSettingsStyle = makeStyles((theme: Theme) => ({\n    guildIcon: {\n        width: '100px',\n        height: '100px'\n    },\n    menuEntry: {\n        marginTop: theme.spacing(2)\n    },\n    clipboardbtn: {\n        marginLeft: theme.spacing(3)\n    }\n}));\n","import React, { useState, useRef } from 'react';\nimport { Dialog, AppBar, Toolbar, IconButton, Typography, DialogContent, TextField, ButtonBase, Avatar, Button } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { useUserSettingsStyle } from './UserSettingsStyle';\n\nexport const UserSettingsDialog = () => {\n    const [open, inputStyle] = useSelector((state: IState) => [state.userSettingsDialog, state.userSettingsDialog]);\n    const userAvatarUpload = useRef<HTMLInputElement | null>(null);\n    const [username, setUsername] = useState<string>('');\n    const dispatch = useDispatch();\n    const classes = useUserSettingsStyle();\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })} fullScreen>\n            <AppBar style={{ position: 'relative' }}>\n                <Toolbar>\n                    <IconButton edge='start' onClick={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })}>\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant='h6'>User Settings</Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <div style={{ width: '33%' }}>\n                    <input type='file' id='file' multiple ref={userAvatarUpload} style={{ display: 'none' }} />\n                    <ButtonBase\n                        style={{ borderRadius: '50%' }}\n                        onClick={() => {\n                            if (userAvatarUpload.current) {\n                                userAvatarUpload.current.click();\n                            }\n                        }}\n                    >\n                        <Avatar className={classes.guildIcon}></Avatar>\n                    </ButtonBase>\n                    <TextField\n                        label='Username'\n                        fullWidth\n                        variant={inputStyle as any}\n                        className={classes.menuEntry}\n                        value={username}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.currentTarget.value)}\n                    />\n                    <Button variant='contained' color='secondary' className={classes.menuEntry}>\n                        Save Changes\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { HarmonyBar } from './HarmonyBar/HarmonyBar';\nimport { ThemeDialog } from './Dialog/ThemeDialog';\nimport { useAppStyles } from './AppStyle';\nimport { ChatArea } from './ChatArea/ChatArea';\nimport { harmonySocket } from '../Root';\nimport { useHistory, useParams } from 'react-router';\nimport { IGuildData } from '../../types/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Actions, IState, IMessage } from '../../types/redux';\nimport { toast } from 'react-toastify';\nimport { JoinGuild } from './Dialog/JoinGuildDialog/JoinGuild';\nimport { GuildSettings } from './Dialog/GuildSettingsDialog/GuildSettings';\nimport {\n    SetMessages,\n    SetSelectedChannel,\n    SetSelectedGuild,\n    SetChannels,\n    SetGuilds,\n    AddMessage,\n    ToggleGuildSettingsDialog,\n    SetGuildPicture,\n    SetInvites,\n    SetGuildName,\n    SetUser\n} from '../../redux/Dispatches';\nimport { UserSettingsDialog } from './Dialog/UserSettingsDialog/UserSettingsDialog';\n\nexport const App = () => {\n    const classes = useAppStyles();\n    const dispatch = useDispatch();\n    const { selectedguildparam: selectedGuildParam, selectedchannelparam: selectedChannelParam } = useParams();\n    const [\n        connected,\n        channels,\n        invites,\n        selectedGuild,\n        themeDialogOpen,\n        joinDialogOpen,\n        guildSettingsDialogOpen,\n        userSettingsDialogOpen\n    ] = useSelector((state: IState) => [\n        state.connected,\n        state.channels,\n        state.invites,\n        state.selectedGuild,\n        state.themeDialog,\n        state.joinGuildDialog,\n        state.guildSettingsDialog,\n        state.userSettingsDialog\n    ]);\n    const history = useHistory();\n    let eventsBound = false;\n\n    useEffect(() => {\n        if (selectedGuildParam) {\n            dispatch(SetSelectedGuild(selectedGuildParam));\n            harmonySocket.events.addListener('open', function() {\n                harmonySocket.getChannels(selectedGuildParam);\n                harmonySocket.getMessages(selectedGuildParam);\n                harmonySocket.events.removeCurrentListener();\n            });\n        }\n        if (selectedChannelParam) {\n            dispatch(SetSelectedChannel(selectedChannelParam));\n        }\n    }, [selectedGuildParam, selectedChannelParam, dispatch]);\n\n    // event when the client has connected\n    useEffect(() => {\n        if (connected) {\n            harmonySocket.getGuilds();\n        }\n    }, [connected]);\n\n    useEffect(() => {\n        if (connected) {\n            dispatch(SetMessages([]));\n            dispatch(SetSelectedChannel(undefined));\n            harmonySocket.getMessages(selectedGuild);\n            harmonySocket.getChannels(selectedGuild);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedGuild]);\n\n    useEffect(() => {\n        if (!eventsBound) {\n            if (\n                (harmonySocket.conn.readyState !== WebSocket.OPEN &&\n                    harmonySocket.conn.readyState !== WebSocket.CONNECTING) ||\n                typeof localStorage.getItem('token') !== 'string'\n            ) {\n                // bounce the user to the login screen if the socket is disconnected or there's no token\n                history.push('/');\n                return;\n            }\n\n            harmonySocket.events.addListener('getguilds', (raw: any) => {\n                let guildsList = raw['guilds'] as IGuildData[];\n                if (Object.keys(guildsList).length === 0) {\n                    dispatch(SetMessages([]));\n                    dispatch(SetSelectedChannel(undefined));\n                    dispatch(SetSelectedGuild(undefined));\n                    dispatch(SetChannels({}));\n                }\n                dispatch(SetGuilds(guildsList));\n            });\n            harmonySocket.events.addListener('getmessages', (raw: any) => {\n                if (raw['messages']) {\n                    dispatch(SetMessages((raw['messages'] as IMessage[]).reverse()));\n                }\n            });\n            harmonySocket.events.addListener('message', (raw: any) => {\n                // prevent stupid API responses\n                if (\n                    typeof raw['userid'] === 'string' &&\n                    typeof raw['createdat'] === 'number' &&\n                    typeof raw['guild'] === 'string' &&\n                    typeof raw['message'] === 'string'\n                ) {\n                    dispatch(AddMessage(raw as IMessage));\n                }\n            });\n            harmonySocket.events.addListener('getchannels', (raw: any) => {\n                console.log(raw);\n                if (typeof raw === 'object') {\n                    dispatch(SetChannels(raw['channels']));\n                }\n            });\n            harmonySocket.events.addListener('deauth', () => {\n                toast.warn('Your session has expired. Please login again');\n                history.push('/');\n                return;\n            });\n            harmonySocket.events.addListener('leaveguild', (raw: any) => {\n                if (typeof raw['message'] === 'string') {\n                    toast.error(raw['message']);\n                    return;\n                }\n                harmonySocket.getGuilds();\n            });\n            harmonySocket.events.addListener('joinguild', (raw: any) => {\n                if (!raw['message']) {\n                    harmonySocket.getGuilds();\n                    dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG });\n                }\n            });\n            harmonySocket.events.addListener('createguild', (raw: any) => {\n                if (!raw['message']) {\n                    harmonySocket.getGuilds();\n                    dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG });\n                }\n            });\n            harmonySocket.events.addListener('updateguildpicture', (raw: any) => {\n                if (raw['success'] === true && raw['picture'] && raw['guild']) {\n                    dispatch(SetGuildPicture(raw['guild'], raw['picture']));\n                    if (guildSettingsDialogOpen) {\n                        dispatch(ToggleGuildSettingsDialog());\n                    }\n                } else {\n                    toast.error('Error saving guild');\n                }\n            });\n            harmonySocket.events.addListener('updateguildname', (raw: any) => {\n                if (raw['success'] === true && raw['name'] && raw['guild']) {\n                    dispatch(SetGuildName(raw['guild'], raw['name']));\n                    if (guildSettingsDialogOpen) {\n                        dispatch(ToggleGuildSettingsDialog());\n                    }\n                } else {\n                    toast.error('Error saving guild');\n                }\n            });\n            harmonySocket.events.addListener('getinvites', (raw: any) => {\n                if (raw['invites'] && raw['guild']) {\n                    dispatch(SetInvites(raw['invites']));\n                }\n            });\n            harmonySocket.events.addListener('addguildchannel', (raw: any) => {\n                if (raw['success'] === true && raw['guild'] && raw['channelname'] && raw['channelid']) {\n                    dispatch(SetChannels({ ...channels, [raw['channelid']]: raw['channelname'] }));\n                }\n            });\n            harmonySocket.events.addListener('deleteguildchannel', (raw: any) => {\n                if (raw['success'] === true && raw['guild'] && raw['channelid']) {\n                    const channelDeleted = {\n                        ...channels\n                    };\n                    delete channelDeleted[raw['channelid']];\n                    dispatch(SetChannels({ ...channelDeleted }));\n                }\n            });\n            harmonySocket.events.addListener('deleteinvite', (raw: any) => {\n                if (raw['success'] === true && raw['invite']) {\n                    const invitesDeleted = {\n                        ...invites\n                    };\n                    delete invitesDeleted[raw['invite']];\n                    dispatch(SetInvites(invitesDeleted));\n                }\n            });\n            harmonySocket.events.addListener('createinvite', (raw: any) => {\n                if (raw['success'] === true && raw['invite']) {\n                    const invitesDeleted = {\n                        ...invites,\n                        [raw['invite']]: 0\n                    };\n                    dispatch(SetInvites(invitesDeleted));\n                }\n            });\n            harmonySocket.events.addListener('getuser', (raw: any) => {\n                if (\n                    typeof raw['userid'] === 'string' &&\n                    typeof raw['username'] === 'string' &&\n                    typeof raw['avatar'] === 'string'\n                ) {\n                    dispatch(SetUser(raw['userid'], raw['username'], raw['avatar']));\n                }\n            });\n            return () => {\n                harmonySocket.events.removeAllListeners('getguilds');\n                harmonySocket.events.removeAllListeners('getmessages');\n                harmonySocket.events.removeAllListeners('message');\n                harmonySocket.events.removeAllListeners('getchannels');\n                harmonySocket.events.removeAllListeners('deauth');\n                harmonySocket.events.removeAllListeners('leaveguild');\n                harmonySocket.events.removeAllListeners('joinguild');\n                harmonySocket.events.removeAllListeners('createguild');\n                harmonySocket.events.removeAllListeners('updateguildpicture');\n                harmonySocket.events.removeAllListeners('updateguildname');\n                harmonySocket.events.removeAllListeners('getinvites');\n                harmonySocket.events.removeAllListeners('addguildchannel');\n                harmonySocket.events.removeAllListeners('deleteguildchannel');\n                harmonySocket.events.removeAllListeners('deleteinvite');\n                harmonySocket.events.removeAllListeners('createinvite');\n                harmonySocket.events.removeAllListeners('getusername');\n            };\n        }\n    }, [history, dispatch, guildSettingsDialogOpen, eventsBound, channels, invites]);\n\n    return (\n        <div className={classes.root}>\n            {themeDialogOpen ? <ThemeDialog /> : undefined}\n            {joinDialogOpen ? <JoinGuild /> : undefined}\n            {guildSettingsDialogOpen ? <GuildSettings /> : undefined}\n            {userSettingsDialogOpen ? <UserSettingsDialog /> : undefined}\n            <HarmonyBar />\n            <div className={classes.navFill} /> {/* this fills the area where the navbar is*/}\n            <ChatArea />\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useEntryStyles = makeStyles((theme: Theme) => ({\n    form: {\n        width: '60%',\n        height: '60%',\n        position: 'relative'\n    },\n    root: {\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useLoginStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1)\n    },\n    submitBtn: {\n        position: 'absolute',\n        bottom: theme.spacing(1),\n        left: theme.spacing(1)\n    }\n}));\n","import React, { useRef, useEffect } from 'react';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport { useLoginStyles } from './LoginStyle';\nimport { harmonySocket } from '../../Root';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\n\nexport const Login: React.FC = () => {\n    const history = useHistory(); // history for better routing\n    const classes = useLoginStyles();\n\n    const [err, setErr] = React.useState<string | undefined>(undefined);\n    const emailRef = useRef<HTMLInputElement | undefined>(undefined);\n    const pwdRef = useRef<HTMLInputElement | undefined>(undefined);\n\n    const login = () => {\n        if (harmonySocket.conn.readyState === WebSocket.CLOSED) {\n            toast.error(\"Can't login, trouble connecting to server\");\n        } else if (emailRef.current && pwdRef.current && emailRef.current.value.length && pwdRef.current.value) {\n            harmonySocket.login(emailRef.current.value, pwdRef.current.value);\n        } else {\n            toast.error(\"Can't login, missing email or password\");\n        }\n    };\n\n    useEffect(() => {\n        harmonySocket.events.addListener('loginerror', (raw: any) => {\n            if (typeof raw['message'] === 'string') {\n                setErr(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('token', (raw: any) => {\n            if (typeof raw['token'] === 'string' && typeof raw['userid'] === 'string') {\n                localStorage.setItem('token', raw['token']);\n                localStorage.setItem('userid', raw['userid']);\n                history.push('/app');\n            }\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('loginerror');\n            harmonySocket.events.removeAllListeners('token');\n        };\n    }, [history]);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => e.preventDefault()}>\n                <TextField label='Email' type='email' name='email' autoComplete='email' margin='normal' fullWidth inputRef={emailRef} />\n                <TextField label='Password' type='password' name='password' margin='normal' fullWidth inputRef={pwdRef} />\n                {err ? (\n                    <Typography variant='subtitle1' color={'error'}>\n                        {err}\n                    </Typography>\n                ) : (\n                    undefined\n                )}\n                <Button variant='contained' color='primary' className={classes.submitBtn} onClick={login} type='submit'>\n                    Log In\n                </Button>\n            </form>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useRegisterStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1)\n    },\n    submitBtn: {\n        position: 'absolute',\n        bottom: theme.spacing(1),\n        left: theme.spacing(1)\n    }\n}));\n","import React, { useRef, useEffect } from 'react';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport { useRegisterStyles } from './RegisterStyle';\nimport { harmonySocket } from '../../Root';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\n\nexport const Register = () => {\n    const classes = useRegisterStyles();\n    const history = useHistory();\n    const [err, setErr] = React.useState<string | undefined>(undefined);\n    const emailRef = useRef<HTMLInputElement | undefined>(undefined);\n    const usernameRef = useRef<HTMLInputElement | undefined>(undefined);\n    const pwdRef = useRef<HTMLInputElement | undefined>(undefined);\n\n    const register = () => {\n        if (harmonySocket.conn.readyState === WebSocket.CLOSED) {\n            toast.error(\"Can't register, trouble connecting to server\");\n        } else if (emailRef.current && usernameRef.current && pwdRef.current && emailRef.current.value && pwdRef.current.value && usernameRef.current.value) {\n            harmonySocket.register(emailRef.current.value, usernameRef.current.value, pwdRef.current.value);\n        } else {\n            toast.error(\"Can't register, missing email, username, or password\");\n        }\n    };\n\n    useEffect(() => {\n        harmonySocket.events.addListener('registererror', (raw: any) => {\n            if (typeof raw['message'] === 'string') {\n                setErr(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('token', (raw: any) => {\n            if (typeof raw['token'] === 'string' && typeof raw['userid'] === 'string') {\n                localStorage.setItem('token', raw['token']);\n                localStorage.setItem('userid', raw['userid']);\n                history.push('/app');\n            }\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('registererror');\n            harmonySocket.events.removeAllListeners('token');\n        };\n    }, [history]);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => e.preventDefault()}>\n                <TextField label='Email' type='email' name='email' autoComplete='email' margin='normal' fullWidth inputRef={emailRef} />\n                <TextField label='Username' type='text' name='usernamee' autoComplete='username' margin='normal' fullWidth inputRef={usernameRef} />\n                <TextField label='Password' type='password' name='password' autoComplete='new-password' margin='normal' fullWidth inputRef={pwdRef} />\n                <TextField label='Confirm Password' type='password' name='confirmpassword' autoComplete='none' margin='normal' fullWidth />\n                {err ? (\n                    <Typography variant='subtitle1' color={'error'}>\n                        {err}\n                    </Typography>\n                ) : (\n                    undefined\n                )}\n                <Button variant='contained' color='primary' className={classes.submitBtn} onClick={register} type='submit'>\n                    Log In\n                </Button>\n            </form>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Paper, Tabs, Tab } from '@material-ui/core';\nimport { useEntryStyles } from './EntryStyle';\nimport { Login } from './Login/Login';\nimport { Register } from './Register/Register';\n\nexport const Entry = () => {\n    const classes = useEntryStyles();\n    const [tabIDX, setTabIDX] = React.useState(0);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.form}>\n                <Tabs value={tabIDX} onChange={(event: any, newValue: number): void => setTabIDX(newValue)} variant='fullWidth' indicatorColor={'primary'}>\n                    <Tab label='Login' id='form-tab-0' />\n                    <Tab label='Register' id='form-tab-1' />\n                </Tabs>\n                {tabIDX === 0 ? <Login /> : <Register />}\n            </Paper>\n        </div>\n    );\n};\n","import { EventEmitter } from 'fbemitter';\nimport { IPacket } from '../types/socket';\n\nexport default class HarmonySocket {\n    conn: WebSocket;\n    events: EventEmitter;\n\n    constructor() {\n        this.conn = new WebSocket(`ws://${window.location.hostname}:2288/api/socket`);\n        this.events = new EventEmitter();\n        this.conn.addEventListener('open', () => this.events.emit('open'));\n        this.conn.addEventListener('close', () => this.events.emit('close'));\n        this.conn.addEventListener('error', () => this.events.emit('error'));\n        this.conn.onmessage = (e: MessageEvent) => {\n            const unprocessed = JSON.parse(e.data);\n            if (typeof unprocessed['type'] === 'string' && typeof unprocessed['data'] === 'object') {\n                const packet: IPacket = unprocessed;\n                this.events.emit(packet.type, packet.data);\n            } else {\n                console.warn(`Unsupported packet received`);\n                console.log(unprocessed);\n            }\n        };\n    }\n\n    connect = () => {\n        this.conn = new WebSocket(`ws://${window.location.hostname}:2288/api/socket`);\n        this.conn.addEventListener('open', () => this.events.emit('open'));\n        this.conn.addEventListener('close', () => this.events.emit('close'));\n        this.conn.addEventListener('error', () => this.events.emit('error'));\n        this.conn.onmessage = (e: MessageEvent) => {\n            const unprocessed = JSON.parse(e.data);\n            if (typeof unprocessed['type'] === 'string' && typeof unprocessed['data'] === 'object') {\n                const packet: IPacket = unprocessed;\n                this.events.emit(packet.type, packet.data);\n            } else {\n                console.warn(`Unsupported packet received`);\n                console.log(unprocessed);\n            }\n        };\n    };\n\n    emitEvent(type: string, data: unknown) {\n        // choke all packets if connection is not working\n        if (this.conn.readyState === WebSocket.OPEN) {\n            this.conn.send(JSON.stringify({ type, data }));\n        }\n    }\n\n    login(email: string, password: string) {\n        this.emitEvent('login', {\n            email,\n            password\n        });\n    }\n\n    register(email: string, username: string, password: string) {\n        this.emitEvent('register', {\n            email,\n            username,\n            password\n        });\n    }\n\n    getGuilds() {\n        this.emitEvent('getguilds', {\n            token: localStorage.getItem('token')\n        });\n    }\n\n    getMessages(guildID: string) {\n        this.emitEvent('getmessages', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendMessage(guildID: string, channelID: string, text: string) {\n        this.emitEvent('message', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelID,\n            message: text\n        });\n    }\n\n    getChannels(guildID: string) {\n        this.emitEvent('getchannels', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    joinGuild(inviteCode: string) {\n        this.emitEvent('joinguild', {\n            token: localStorage.getItem('token'),\n            invite: inviteCode\n        });\n    }\n\n    createGuild(guildName: string) {\n        this.emitEvent('createguild', {\n            token: localStorage.getItem('token'),\n            guildname: guildName\n        });\n    }\n\n    leaveGuild(guildID: string) {\n        this.emitEvent('leaveguild', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendGuildNameUpdate(guildID: string, newname: string) {\n        this.emitEvent('updateguildname', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            name: newname\n        });\n    }\n\n    sendGuildPictureUpdate(guildID: string, newpicture: string) {\n        this.emitEvent('updateguildpicture', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            picture: newpicture\n        });\n    }\n\n    sendGetInvites(guildID: string) {\n        this.emitEvent('getinvites', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendAddChannel(guildID: string, channelname: string) {\n        this.emitEvent('addchannel', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelname\n        });\n    }\n\n    sendDeleteChannel(guildID: string, channelID: string) {\n        this.emitEvent('deletechannel', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelID\n        });\n    }\n\n    sendDeleteInvite(invite: string, guild: string) {\n        this.emitEvent('deleteinvite', {\n            token: localStorage.getItem('token'),\n            invite,\n            guild\n        });\n    }\n\n    sendCreateInvite(guild: string) {\n        this.emitEvent('createinvite', {\n            token: localStorage.getItem('token'),\n            guild\n        });\n    }\n\n    sendGetUser(userid: string) {\n        this.emitEvent('getuser', {\n            token: localStorage.getItem('token'),\n            userid\n        });\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useRootStyles = makeStyles((theme: Theme) => ({\n    '@global': {\n        '::-webkit-scrollbar': {\n            width: '10px'\n        },\n        '::-webkit-scrollbar-thumb:hover': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(150, 150, 150)' : 'rgb(100, 100, 100)'\n        },\n        '::-webkit-scrollbar-track': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(245, 245, 245)' : 'rgb(46, 46, 46)'\n        },\n        '::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'\n        },\n        '::-webkit-scrollbar-corner': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'\n        },\n        '*': {\n            scrollbarColor: `${theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'} ${theme.palette.type === 'light' ? 'rgb(245, 245, 245)' : 'rgb(46, 46, 46)'}`\n        }\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useInviteHandlerStyle = makeStyles((theme: Theme) => ({\n    errorRoot: {\n        textAlign: 'center'\n    },\n    errorMsg: {\n        paddingTop: theme.spacing(10)\n    },\n    errorBtn: {\n        marginTop: theme.spacing(2)\n    }\n}));\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { harmonySocket } from '../Root';\nimport { Typography, Button } from '@material-ui/core';\nimport { useInviteHandlerStyle } from './InviteHandlerStyle';\n\nexport const InviteHandler = () => {\n    const { invitecode } = useParams();\n    const history = useHistory();\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const classes = useInviteHandlerStyle();\n\n    useEffect(() => {\n        harmonySocket.events.addListener('joinguild', (raw: any) => {\n            console.log(raw);\n            if (!raw['message']) {\n                setErrorMessage(null);\n                history.push('/app');\n            } else {\n                setErrorMessage(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('open', () => {\n            if (invitecode) {\n                harmonySocket.joinGuild(invitecode);\n            }\n        });\n    }, [history, invitecode]);\n\n    return (\n        <div>\n            {errorMessage ? (\n                <div className={classes.errorRoot}>\n                    <Typography variant='h1' align='center' className={classes.errorMsg}>\n                        404\n                        <br />\n                        {errorMessage}\n                    </Typography>\n                    <Button variant='contained' color='secondary' className={classes.errorBtn} onClick={() => history.push('/')}>\n                        Return To Login\n                    </Button>\n                </div>\n            ) : (\n                undefined\n            )}\n        </div>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { Switch, Route } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { CssBaseline, createMuiTheme, Button } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../types/redux';\nimport { App } from './App/App';\nimport { Entry } from './Entry/Entry';\nimport HarmonySocket from '../socket/socket';\nimport { useRootStyles } from './RootStyle';\nimport './Root.css';\nimport { SetConnected } from '../redux/Dispatches';\nimport { InviteHandler } from './InviteHandler/HandleInvite';\n\nexport const harmonySocket = new HarmonySocket();\nexport let previouslyDisconnected = false;\n\nconst Root = () => {\n    const dispatch = useDispatch();\n    useRootStyles();\n\n    useEffect(() => {\n        harmonySocket.events.addListener('close', () => {\n            // lol plz no spahm\n            if (!previouslyDisconnected) {\n                toast.error('You have lost connection to the server');\n                dispatch(SetConnected(false));\n                previouslyDisconnected = true;\n            }\n            setTimeout(harmonySocket.connect, 3000);\n        });\n        harmonySocket.events.addListener('open', () => {\n            if (previouslyDisconnected) toast.success('You have reconnected to the server');\n            dispatch(SetConnected(true));\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('close'); // cleanup all socket events registered here\n            harmonySocket.events.removeAllListeners('open');\n        };\n    }, [dispatch]);\n\n    return (\n        <>\n            <CssBaseline />\n            <ToastContainer />\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path='/'>\n                        <Entry />\n                    </Route>\n                    <Route exact path='/app/:selectedguildparam?/:selectedchannelparam?'>\n                        <App />\n                    </Route>\n                    <Route exact path='/invite/:invitecode'>\n                        <InviteHandler />\n                    </Route>\n                    <Route exact path='/bruh'>\n                        <Button\n                            onClick={() => {\n                                toast.info('GET BRUHED ON KID');\n                            }}\n                        >\n                            Bruh Button\n                        </Button>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </>\n    );\n};\n\nconst ThemedRoot = () => {\n    const themeState = useSelector((state: IState) => state.theme);\n    const theme = createMuiTheme({\n        palette: {\n            primary: themeState.primary,\n            secondary: themeState.secondary,\n            type: themeState.type\n        }\n    });\n\n    return (\n        <div className='root'>\n            <ThemeProvider theme={theme}>\n                <Root />\n            </ThemeProvider>\n        </div>\n    );\n};\n\nexport default ThemedRoot;\n","import { IState, Action, Actions } from '../types/redux';\nimport { red, orange } from '@material-ui/core/colors';\n\nconst appState: IState = {\n    theme: {\n        type: 'dark',\n        primary: red,\n        secondary: orange,\n        inputStyle: 'filled'\n    },\n    guildList: {},\n    themeDialog: false,\n    connected: false,\n    selectedGuild: '',\n    messages: [],\n    invites: {},\n    channels: {},\n    selectedChannel: undefined,\n    joinGuildDialog: false,\n    guildSettingsDialog: false,\n    users: {},\n    userSettingsDialog: false,\n    chatInputFocus: false\n};\n\nexport default function AppReducer(state = appState, action: Action): IState {\n    switch (action.type) {\n        case Actions.INVERT_THEME: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    type: state.theme.type === 'dark' ? 'light' : 'dark'\n                }\n            };\n        }\n        case Actions.TOGGLE_THEME_DIALOG: {\n            return {\n                ...state,\n                themeDialog: !state.themeDialog\n            };\n        }\n        case Actions.CHANGE_PRIMARY: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    primary: action.payload\n                }\n            };\n        }\n        case Actions.CHANGE_SECONDARY: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    secondary: action.payload\n                }\n            };\n        }\n        case Actions.SET_CONNECTED: {\n            return {\n                ...state,\n                connected: action.payload\n            };\n        }\n        case Actions.SET_GUILDS: {\n            return {\n                ...state,\n                guildList: action.payload\n            };\n        }\n        case Actions.SET_SELECTED_GUILD: {\n            return {\n                ...state,\n                selectedGuild: action.payload\n            };\n        }\n        case Actions.ADD_MESSAGE: {\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            };\n        }\n        case Actions.SET_MESSAGES: {\n            return {\n                ...state,\n                messages: action.payload\n            };\n        }\n        case Actions.SET_INPUT_STYLE: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    inputStyle: action.payload\n                }\n            };\n        }\n        case Actions.SET_CHANNELS: {\n            return {\n                ...state,\n                channels: action.payload\n            };\n        }\n        case Actions.SET_SELECTED_CHANNEL: {\n            return {\n                ...state,\n                selectedChannel: action.payload\n            };\n        }\n        case Actions.TOGGLE_JOIN_GUILD_DIALOG: {\n            return {\n                ...state,\n                joinGuildDialog: !state.joinGuildDialog\n            };\n        }\n        case Actions.TOGGLE_GUILD_SETTINGS_DIALOG: {\n            return {\n                ...state,\n                guildSettingsDialog: !state.guildSettingsDialog\n            };\n        }\n        case Actions.SET_GUILD_PICTURE: {\n            return {\n                ...state,\n                guildList: {\n                    ...state.guildList,\n                    [action.payload.guild]: {\n                        ...state.guildList[action.payload.guild],\n                        picture: action.payload.picture\n                    }\n                }\n            };\n        }\n        case Actions.SET_GUILD_NAME: {\n            return {\n                ...state,\n                guildList: {\n                    ...state.guildList,\n                    [action.payload.guild]: {\n                        ...state.guildList[action.payload.guild],\n                        guildname: action.payload.name\n                    }\n                }\n            };\n        }\n        case Actions.SET_INVITES: {\n            return {\n                ...state,\n                invites: action.payload\n            };\n        }\n        case Actions.SET_USER: {\n            return {\n                ...state,\n                users: {\n                    ...state.users,\n                    [action.payload.userid]: action.payload\n                }\n            };\n        }\n        case Actions.TOGGLE_USER_SETTINGS_DIALOG: {\n            return {\n                ...state,\n                userSettingsDialog: !state.userSettingsDialog\n            };\n        }\n        case Actions.FOCUS_CHAT_INPUT: {\n            return {\n                ...state,\n                chatInputFocus: !state.chatInputFocus\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n","import { createStore } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport AppReducer from './AppReducer';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['theme']\n};\n\nconst persistedReducer = persistReducer(persistConfig, AppReducer);\n\nexport default () => {\n    const store = createStore(persistedReducer);\n    const persistor = persistStore(store);\n    return { store, persistor };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport './Root/ContextMenu.css';\nimport Root from './Root/Root';\nimport setupRedux from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst { store, persistor } = setupRedux();\n\nconst ReduxRoot: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <Root />\n            </PersistGate>\n        </Provider>\n    );\n};\n\nReactDOM.render(<ReduxRoot />, document.getElementById('root'));\n"],"sourceRoot":""}