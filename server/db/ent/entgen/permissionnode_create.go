// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/permissionnode"
	"github.com/harmony-development/legato/server/db/ent/entgen/role"
)

// PermissionNodeCreate is the builder for creating a PermissionNode entity.
type PermissionNodeCreate struct {
	config
	mutation *PermissionNodeMutation
	hooks    []Hook
}

// SetNode sets the "node" field.
func (pnc *PermissionNodeCreate) SetNode(s string) *PermissionNodeCreate {
	pnc.mutation.SetNode(s)
	return pnc
}

// SetAllow sets the "allow" field.
func (pnc *PermissionNodeCreate) SetAllow(b bool) *PermissionNodeCreate {
	pnc.mutation.SetAllow(b)
	return pnc
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (pnc *PermissionNodeCreate) SetRoleID(id uint64) *PermissionNodeCreate {
	pnc.mutation.SetRoleID(id)
	return pnc
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (pnc *PermissionNodeCreate) SetNillableRoleID(id *uint64) *PermissionNodeCreate {
	if id != nil {
		pnc = pnc.SetRoleID(*id)
	}
	return pnc
}

// SetRole sets the "role" edge to the Role entity.
func (pnc *PermissionNodeCreate) SetRole(r *Role) *PermissionNodeCreate {
	return pnc.SetRoleID(r.ID)
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (pnc *PermissionNodeCreate) SetGuildID(id uint64) *PermissionNodeCreate {
	pnc.mutation.SetGuildID(id)
	return pnc
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (pnc *PermissionNodeCreate) SetNillableGuildID(id *uint64) *PermissionNodeCreate {
	if id != nil {
		pnc = pnc.SetGuildID(*id)
	}
	return pnc
}

// SetGuild sets the "guild" edge to the Guild entity.
func (pnc *PermissionNodeCreate) SetGuild(g *Guild) *PermissionNodeCreate {
	return pnc.SetGuildID(g.ID)
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (pnc *PermissionNodeCreate) SetChannelID(id uint64) *PermissionNodeCreate {
	pnc.mutation.SetChannelID(id)
	return pnc
}

// SetNillableChannelID sets the "channel" edge to the Channel entity by ID if the given value is not nil.
func (pnc *PermissionNodeCreate) SetNillableChannelID(id *uint64) *PermissionNodeCreate {
	if id != nil {
		pnc = pnc.SetChannelID(*id)
	}
	return pnc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (pnc *PermissionNodeCreate) SetChannel(c *Channel) *PermissionNodeCreate {
	return pnc.SetChannelID(c.ID)
}

// Mutation returns the PermissionNodeMutation object of the builder.
func (pnc *PermissionNodeCreate) Mutation() *PermissionNodeMutation {
	return pnc.mutation
}

// Save creates the PermissionNode in the database.
func (pnc *PermissionNodeCreate) Save(ctx context.Context) (*PermissionNode, error) {
	var (
		err  error
		node *PermissionNode
	)
	if len(pnc.hooks) == 0 {
		if err = pnc.check(); err != nil {
			return nil, err
		}
		node, err = pnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionNodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pnc.check(); err != nil {
				return nil, err
			}
			pnc.mutation = mutation
			node, err = pnc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pnc.hooks) - 1; i >= 0; i-- {
			mut = pnc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pnc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pnc *PermissionNodeCreate) SaveX(ctx context.Context) *PermissionNode {
	v, err := pnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pnc *PermissionNodeCreate) check() error {
	if _, ok := pnc.mutation.Node(); !ok {
		return &ValidationError{Name: "node", err: errors.New("entgen: missing required field \"node\"")}
	}
	if _, ok := pnc.mutation.Allow(); !ok {
		return &ValidationError{Name: "allow", err: errors.New("entgen: missing required field \"allow\"")}
	}
	return nil
}

func (pnc *PermissionNodeCreate) sqlSave(ctx context.Context) (*PermissionNode, error) {
	_node, _spec := pnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pnc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pnc *PermissionNodeCreate) createSpec() (*PermissionNode, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionNode{config: pnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: permissionnode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permissionnode.FieldID,
			},
		}
	)
	if value, ok := pnc.mutation.Node(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permissionnode.FieldNode,
		})
		_node.Node = value
	}
	if value, ok := pnc.mutation.Allow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permissionnode.FieldAllow,
		})
		_node.Allow = value
	}
	if nodes := pnc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.RoleTable,
			Columns: []string{permissionnode.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.role_permission_node = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.GuildTable,
			Columns: []string{permissionnode.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guild_permission_node = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pnc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionnode.ChannelTable,
			Columns: []string{permissionnode.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_permission_node = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionNodeCreateBulk is the builder for creating many PermissionNode entities in bulk.
type PermissionNodeCreateBulk struct {
	config
	builders []*PermissionNodeCreate
}

// Save creates the PermissionNode entities in the database.
func (pncb *PermissionNodeCreateBulk) Save(ctx context.Context) ([]*PermissionNode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pncb.builders))
	nodes := make([]*PermissionNode, len(pncb.builders))
	mutators := make([]Mutator, len(pncb.builders))
	for i := range pncb.builders {
		func(i int, root context.Context) {
			builder := pncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionNodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pncb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pncb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pncb *PermissionNodeCreateBulk) SaveX(ctx context.Context) []*PermissionNode {
	v, err := pncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
