{"version":3,"sources":["types/redux.ts","Root/App/HarmonyBar/HarmonyBarStyle.ts","Root/App/HarmonyBar/HarmonyBar.tsx","Root/App/Dialog/ColorPicker.tsx","Root/App/Dialog/ThemeDialog.tsx","Root/App/AppStyle.ts","Root/App/ChatArea/ChatAreaStyle.ts","Root/App/ChatArea/Messages/Message.tsx","Root/App/ChatArea/Messages/Messages.tsx","redux/Dispatches.ts","Root/App/ChatArea/Input/Input.tsx","Root/App/ChatArea/GuildList/GuildListStyle.ts","Root/App/ChatArea/GuildList/GuildIcon.tsx","Root/App/ChatArea/GuildList/GuildList.tsx","Root/App/ChatArea/ChannelList/ChannelListStyle.ts","Root/App/ChatArea/ChannelList/ChannelList.tsx","Root/App/ChatArea/ChatArea.tsx","Root/App/Dialog/JoinGuildDialog/JoinGuild.tsx","Root/App/Dialog/GuildSettingsDialog/GuildSettingsStyle.ts","Root/App/Dialog/GuildSettingsDialog/GuildSettings.tsx","Root/App/Dialog/UserSettingsDialog/UserSettingsStyle.ts","Root/App/Dialog/UserSettingsDialog/UserSettingsDialog.tsx","Root/App/App.tsx","Root/Entry/EntryStyle.ts","Root/Entry/Login/LoginStyle.ts","Root/Entry/Login/Login.tsx","Root/Entry/Register/RegisterStyle.ts","Root/Entry/Register/Register.tsx","Root/Entry/Entry.tsx","socket/socket.ts","Root/RootStyle.ts","Root/InviteHandler/InviteHandlerStyle.tsx","Root/InviteHandler/HandleInvite.tsx","Root/Root.tsx","redux/AppReducer.ts","redux/store.ts","index.tsx"],"names":["Actions","useHarmonyBarStyles","makeStyles","theme","leftMenuBtn","marginRight","spacing","title","flexGrow","HarmonyBar","classes","dispatch","useDispatch","AppBar","position","Toolbar","IconButton","edge","color","className","Typography","variant","onClick","type","TOGGLE_THEME_DIALOG","TOGGLE_USER_SETTINGS_DIALOG","ColorPicker","state","label","style","display","ButtonBase","backgroundColor","red","width","height","setColor","undefined","orange","yellow","green","blue","indigo","ThemeDialog","open","useSelector","themeDialog","themeType","useState","primary","setPrimary","secondary","setSecondary","inputStyle","useEffect","CHANGE_PRIMARY","payload","CHANGE_SECONDARY","Dialog","onClose","DialogTitle","DialogContent","FormControl","component","FormLabel","RadioGroup","value","row","onChange","e","INVERT_THEME","FormControlLabel","control","Radio","labelPlacement","Select","ev","target","SET_INPUT_STYLE","fullWidth","MenuItem","DialogActions","Button","useAppStyles","root","flexDirection","navFill","mixins","toolbar","useChatAreaStyles","flex","guildlist","palette","grey","padding","borderRight","channellist","overflowY","guildiconroot","borderRadius","guildicon","chatArea","flexFlow","messages","overflow","input","UtcEpochToLocalDate","time","returnDate","Date","setUTCSeconds","toDateString","toLocaleTimeString","Message","props","username","harmonySocket","sendGetUser","userid","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","avatar","ListItemText","createdat","message","Messages","selectedChannel","users","messageList","useRef","current","scrollTop","scrollHeight","scrollLeft","List","innerRef","map","val","channel","key","messageid","guild","SetConnected","SET_CONNECTED","SetMessages","SET_MESSAGES","SetSelectedChannel","SET_SELECTED_CHANNEL","SetChannels","SET_CHANNELS","ToggleGuildSettingsDialog","TOGGLE_GUILD_SETTINGS_DIALOG","SetInvites","invites","SET_INVITES","Input","inputField","connected","guildID","selectedGuild","channelID","SET_CHAT_INPUT","TextField","multiline","rowsMax","rows","onKeyPress","shiftKey","preventDefault","test","sendMessage","inputRef","useGuildListStyle","boxSizing","marginTop","border","selectedguildicon","light","objectFit","joinGuild","dark","GuildIcon","guildsList","guildList","id","guildid","selected","SET_SELECTED_GUILD","Tooltip","guildname","placement","picture","draggable","button","leaveGuild","owner","GuildList","Object","keys","TOGGLE_JOIN_GUILD_DIALOG","useChannelListStyle","nested","paddingLeft","newChannelInput","marginLeft","Channel","channelid","setSelectedChannel","channelname","sendDeleteChannel","ChannelList","channels","actionsExpanded","setActionsExpanded","addingChannel","setAddingChannel","addChannelInput","Collapse","in","timeout","unmountOnExit","disablePadding","sendGetInvites","ListItemIcon","autoFocus","sendAddChannel","onBlur","placeholder","textAlign","ChatArea","messagesRef","chatInput","ref","onKeyDown","console","log","focus","tabIndex","JoinGuild","joinGuildDialog","joinErr","createErr","joinCodeRef","guildNameRef","Grid","container","item","xs","createGuild","useGuildSettingsStyle","guildIcon","menuEntry","clipboardbtn","GuildSettings","guildSettingsDialog","guilds","guildIconUpload","guildName","setGuildName","guildIconFile","setGuildIconFile","setGuildIcon","fullScreen","multiple","event","currentTarget","files","length","file","startsWith","size","fileReader","FileReader","readAsDataURL","addEventListener","result","click","FormData","append","axios","post","window","location","hostname","then","res","data","uploadID","sendGuildPictureUpdate","catch","toast","error","sendGuildNameUpdate","Table","TableHead","TableRow","TableCell","TableBody","scope","copy","port","info","invite","sendDeleteInvite","sendCreateInvite","useUserSettingsStyle","UserSettingsDialog","userSettingsDialog","userAvatarUpload","setUsername","App","themeDialogOpen","joinDialogOpen","guildSettingsDialogOpen","userSettingsDialogOpen","history","useHistory","getGuilds","getMessages","getChannels","conn","readyState","WebSocket","OPEN","CONNECTING","localStorage","getItem","push","events","addListener","raw","SET_GUILDS","SetGuilds","reverse","ADD_MESSAGE","warn","SET_GUILD_PICTURE","name","SET_GUILD_NAME","channelDeleted","invitesDeleted","SET_USER","removeAllListeners","useEntryStyles","form","justifyContent","useLoginStyles","paddingRight","paddingTop","paddingBottom","submitBtn","bottom","left","Login","React","err","setErr","emailRef","pwdRef","setItem","onSubmit","autoComplete","margin","CLOSED","login","useRegisterStyles","Register","usernameRef","register","Entry","tabIDX","setTabIDX","Paper","Tabs","newValue","indicatorColor","Tab","HarmonySocket","connect","emit","onmessage","unprocessed","JSON","parse","packet","this","EventEmitter","send","stringify","email","password","emitEvent","token","text","inviteCode","newname","newpicture","useRootStyles","scrollbarColor","useInviteHandlerStyle","errorRoot","errorMsg","errorBtn","InviteHandler","invitecode","useParams","errorMessage","setErrorMessage","align","previouslyDisconnected","Root","setTimeout","success","CssBaseline","exact","path","ThemedRoot","themeState","createMuiTheme","ThemeProvider","appState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d89c5ff9.chunk.js","sourcesContent":["import { ITheme } from './theming';\nimport { Color } from '@material-ui/core';\n\nexport enum Actions {\n    INVERT_THEME,\n    TOGGLE_THEME_DIALOG,\n    CHANGE_PRIMARY,\n    CHANGE_SECONDARY,\n    SET_CONNECTED,\n    SET_GUILDS,\n    SET_SELECTED_GUILD,\n    ADD_MESSAGE,\n    SET_MESSAGES,\n    SET_INPUT_STYLE,\n    SET_CHANNELS,\n    SET_SELECTED_CHANNEL,\n    TOGGLE_JOIN_GUILD_DIALOG,\n    TOGGLE_GUILD_SETTINGS_DIALOG,\n    SET_GUILD_PICTURE,\n    SET_GUILD_NAME,\n    SET_INVITES,\n    SET_USER,\n    TOGGLE_USER_SETTINGS_DIALOG,\n    SET_CHAT_INPUT\n}\n\ninterface IGuild {\n    guildid: string;\n    picture: string;\n    guildname: string;\n    owner: boolean;\n}\n\ninterface ISetGuildPicturePayload {\n    guild: string;\n    picture: string;\n}\n\ninterface ISetGuildNamePayload {\n    guild: string;\n    name: string;\n}\n\nexport interface IChannels {\n    [key: string]: string;\n}\n\nexport interface IMessage {\n    userid: string;\n    createdat: number;\n    guild: string;\n    channel: string;\n    message: string;\n    messageid: string;\n}\n\nexport interface IState {\n    theme: ITheme;\n    themeDialog: boolean;\n    connected: boolean;\n    guildList: {\n        [key: string]: IGuild;\n    };\n    selectedGuild: string;\n    messages: IMessage[];\n    inputStyle: 'standard' | 'filled' | 'outlined';\n    channels: {\n        [key: string]: string;\n    };\n    selectedChannel: string | undefined;\n    joinGuildDialog: boolean;\n    guildSettingsDialog: boolean;\n    invites: {\n        [key: string]: number;\n    };\n    users: {\n        [key: string]: {\n            username: string;\n            avatar: string;\n        };\n    };\n    userSettingsDialog: boolean;\n    chatInput: HTMLInputElement | undefined;\n}\n\nexport interface IInvertTheme {\n    type: Actions.INVERT_THEME;\n}\n\nexport interface IToggleThemeDialog {\n    type: Actions.TOGGLE_THEME_DIALOG;\n}\n\nexport interface IChangePrimary {\n    type: Actions.CHANGE_PRIMARY;\n    payload: Color;\n}\n\nexport interface IChangeSecondary {\n    type: Actions.CHANGE_SECONDARY;\n    payload: Color;\n}\n\nexport interface ISetConnected {\n    type: Actions.SET_CONNECTED;\n    payload: boolean;\n}\n\nexport interface ISetGuilds {\n    type: Actions.SET_GUILDS;\n    payload: {\n        [key: string]: IGuild;\n    };\n}\n\nexport interface ISetSelectedGuild {\n    type: Actions.SET_SELECTED_GUILD;\n    payload: string;\n}\n\nexport interface IAddMessage {\n    type: Actions.ADD_MESSAGE;\n    payload: IMessage;\n}\n\nexport interface ISetMessages {\n    type: Actions.SET_MESSAGES;\n    payload: IMessage[];\n}\n\nexport interface ISetInputStyle {\n    type: Actions.SET_INPUT_STYLE;\n    payload: 'standard' | 'filled' | 'outlined';\n}\n\nexport interface ISetChannels {\n    type: Actions.SET_CHANNELS;\n    payload: {\n        [key: string]: string;\n    };\n}\n\nexport interface ISetSelectedChannel {\n    type: Actions.SET_SELECTED_CHANNEL;\n    payload: string;\n}\n\nexport interface IToggleJoinGuildDialog {\n    type: Actions.TOGGLE_JOIN_GUILD_DIALOG;\n}\n\nexport interface IToggleGuildSettingsDialog {\n    type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG;\n}\n\nexport interface ISetGuildPicture {\n    type: Actions.SET_GUILD_PICTURE;\n    payload: ISetGuildPicturePayload;\n}\n\nexport interface ISetGuildName {\n    type: Actions.SET_GUILD_NAME;\n    payload: ISetGuildNamePayload;\n}\n\nexport interface ISetInvites {\n    type: Actions.SET_INVITES;\n    payload: {\n        [key: string]: number;\n    };\n}\n\nexport interface ISetUser {\n    type: Actions.SET_USER;\n    payload: {\n        userid: string;\n        username: string;\n        avatar: string;\n    };\n}\n\nexport interface IToggleUserSettingsDialog {\n    type: Actions.TOGGLE_USER_SETTINGS_DIALOG;\n}\n\nexport interface ISetChatInput {\n    type: Actions.SET_CHAT_INPUT;\n    payload: HTMLInputElement;\n}\n\nexport type Action =\n    | IInvertTheme\n    | IToggleThemeDialog\n    | IChangePrimary\n    | IChangeSecondary\n    | ISetConnected\n    | ISetGuilds\n    | ISetSelectedGuild\n    | IAddMessage\n    | ISetMessages\n    | ISetInputStyle\n    | ISetChannels\n    | ISetSelectedChannel\n    | IToggleJoinGuildDialog\n    | IToggleGuildSettingsDialog\n    | ISetGuildPicture\n    | ISetGuildName\n    | ISetInvites\n    | ISetUser\n    | IToggleUserSettingsDialog\n    | ISetChatInput;\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useHarmonyBarStyles = makeStyles((theme: Theme) => ({\n    leftMenuBtn: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    }\n}));\n","import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport PaletteIcon from '@material-ui/icons/Palette';\nimport UserIcon from '@material-ui/icons/AccountCircle';\nimport { useHarmonyBarStyles } from './HarmonyBarStyle';\nimport { useDispatch } from 'react-redux';\nimport { Actions } from '../../../types/redux';\n\nexport const HarmonyBar = () => {\n    const classes = useHarmonyBarStyles();\n    const dispatch = useDispatch();\n\n    return (\n        <AppBar position='absolute'>\n            <Toolbar>\n                <IconButton edge='start' color='inherit' className={classes.leftMenuBtn}>\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant='h6' className={classes.title}>\n                    Harmony\n                </Typography>\n                <IconButton edge='end' color='inherit' onClick={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n                    <PaletteIcon />\n                </IconButton>\n                <IconButton edge='end' color='inherit' onClick={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })}>\n                    <UserIcon />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n};\n","import React from 'react';\nimport { ButtonBase, Color, Typography } from '@material-ui/core';\nimport { red, yellow, orange, blue, green, indigo } from '@material-ui/core/colors';\nimport CheckCircle from '@material-ui/icons/CheckCircle';\n\ninterface IPickerState {\n    color: Color;\n    setColor: React.Dispatch<React.SetStateAction<Color>>;\n    label: string;\n}\n\nexport const ColorPicker = (state: IPickerState) => {\n    return (\n        <div>\n            <Typography>{state.label}</Typography>\n            <div style={{ display: 'flex' }}>\n                <ButtonBase style={{ backgroundColor: red[500], width: '40px', height: '40px' }} onClick={() => state.setColor(red)}>\n                    {state.color === red ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: orange[500], width: '40px', height: '40px' }} onClick={() => state.setColor(orange)}>\n                    {state.color === orange ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: yellow[500], width: '40px', height: '40px' }} onClick={() => state.setColor(yellow)}>\n                    {state.color === yellow ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: green[500], width: '40px', height: '40px' }} onClick={() => state.setColor(green)}>\n                    {state.color === green ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: blue[500], width: '40px', height: '40px' }} onClick={() => state.setColor(blue)}>\n                    {state.color === blue ? <CheckCircle /> : undefined}\n                </ButtonBase>\n                <ButtonBase style={{ backgroundColor: indigo[500], width: '40px', height: '40px' }} onClick={() => state.setColor(indigo)}>\n                    {state.color === indigo ? <CheckCircle /> : undefined}\n                </ButtonBase>\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, Color, FormControlLabel, FormControl, FormLabel, RadioGroup, Radio, Typography, Select, MenuItem } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../types/redux';\nimport { ColorPicker } from './ColorPicker';\nimport { orange, red } from '@material-ui/core/colors';\n\nexport const ThemeDialog = () => {\n    const open = useSelector((state: IState) => state.themeDialog);\n    const themeType = useSelector((state: IState) => state.theme.type);\n    const [primary, setPrimary] = useState<Color>(red);\n    const [secondary, setSecondary] = useState<Color>(orange);\n    const inputStyle = useSelector((state: IState) => state.inputStyle);\n    const dispatch = useDispatch();\n\n    const changeInputStyle = (ev: React.ChangeEvent<{ value: unknown }>) => {\n        if (typeof ev.target.value === 'string') {\n            dispatch({ type: Actions.SET_INPUT_STYLE, payload: ev.target.value });\n        }\n    };\n\n    useEffect(() => {\n        dispatch({ type: Actions.CHANGE_PRIMARY, payload: primary });\n    }, [primary, dispatch]);\n    useEffect(() => {\n        dispatch({ type: Actions.CHANGE_SECONDARY, payload: secondary });\n    }, [secondary, dispatch]);\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n            <DialogTitle>Customize Theme</DialogTitle>\n            <DialogContent>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>Theme Type</FormLabel>\n                    <RadioGroup value={themeType} row onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch({ type: Actions.INVERT_THEME })}>\n                        <FormControlLabel value='light' control={<Radio color='secondary' />} label='Light' labelPlacement='end' />\n                        <FormControlLabel value='dark' control={<Radio color='secondary' />} label='Dark' labelPlacement='end' />\n                    </RadioGroup>\n                </FormControl>\n                <ColorPicker color={primary} setColor={setPrimary} label={'Primary Color'} />\n                <ColorPicker color={secondary} setColor={setSecondary} label={'Secondary Color'} />\n                <Typography>Text Input Style</Typography>\n                <Select value={inputStyle || 'standard'} onChange={changeInputStyle} variant={inputStyle as any} fullWidth>\n                    <MenuItem value={'standard'}>Standard</MenuItem>\n                    <MenuItem value={'filled'}>Filled</MenuItem>\n                    <MenuItem value={'outlined'}>Outlined</MenuItem>\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button color='primary' onClick={() => dispatch({ type: Actions.TOGGLE_THEME_DIALOG })}>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useAppStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n        height: '100%',\n        flexDirection: 'column'\n    },\n    leftMenuBtn: {\n        marginRight: theme.spacing(1)\n    },\n    title: {\n        flexGrow: 1\n    },\n    navFill: {\n        ...theme.mixins.toolbar\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useChatAreaStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'row',\n        flexGrow: 1,\n        width: '100%',\n        height: '100%'\n    },\n    guildlist: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[200],\n        padding: theme.spacing(1),\n        borderRight: '1px solid grey'\n    },\n    channellist: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[300],\n        padding: 0,\n        width: '300px',\n        overflowY: 'auto'\n    },\n    guildiconroot: {\n        borderRadius: '64px'\n    },\n    guildicon: {\n        width: '64px',\n        height: '64px'\n    },\n    chatArea: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexFlow: 'column',\n        width: '100%',\n        height: '100%'\n    },\n    messages: {\n        width: '100%',\n        flex: '1 1 auto',\n        overflow: 'auto'\n    },\n    input: {\n        width: '100%'\n    }\n}));\n","import React, { useEffect } from 'react';\nimport { ListItem, ListItemAvatar, Avatar, ListItemText, Typography } from '@material-ui/core';\nimport { harmonySocket } from '../../../Root';\n\ninterface IProps {\n    guild: string;\n    userid: string;\n    username: string;\n    createdat: number;\n    message: string;\n    avatar?: string;\n}\n\nconst UtcEpochToLocalDate = (time: number) => {\n    const returnDate = new Date(0);\n    returnDate.setUTCSeconds(time);\n    return ` - ${returnDate.toDateString()} at ${returnDate.toLocaleTimeString()}`;\n};\n\nexport const Message = (props: IProps) => {\n    useEffect(() => {\n        if (!props.username) {\n            harmonySocket.sendGetUser(props.userid);\n        }\n    }, [props]);\n\n    return (\n        <ListItem alignItems='flex-start'>\n            <ListItemAvatar>\n                <Avatar alt={props.userid} src={props.avatar ? `http://localhost:2288/filestore/${props.avatar}` : undefined} />\n            </ListItemAvatar>\n            <ListItemText\n                primary={\n                    <>\n                        {props.username || props.userid}\n                        <Typography component='span' variant='body1' color='textSecondary'>\n                            {UtcEpochToLocalDate(props.createdat)}\n                        </Typography>\n                    </>\n                }\n                secondary={props.message}\n            />\n        </ListItem>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { List } from '@material-ui/core';\nimport { Message } from './Message';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../../types/redux';\n\nexport const Messages = () => {\n    const messages = useSelector((state: IState) => state.messages);\n    const selectedChannel = useSelector((state: IState) => state.selectedChannel);\n    const users = useSelector((state: IState) => state.users);\n    const messageList = useRef<HTMLUListElement | undefined>(undefined);\n\n    useEffect(() => {\n        if (messageList.current) {\n            messageList.current.scrollTop = messageList.current.scrollHeight;\n            messageList.current.scrollLeft = 0;\n        }\n    }, [messages]);\n\n    return (\n        <List innerRef={messageList}>\n            {messages\n                ? messages.map((val) => {\n                      if (val.channel === selectedChannel) {\n                          return (\n                              <Message\n                                  key={val.messageid}\n                                  guild={val.guild}\n                                  userid={val.userid}\n                                  username={users[val.userid] ? users[val.userid].username : ''}\n                                  createdat={val.createdat}\n                                  avatar={users[val.userid] ? users[val.userid].avatar : undefined}\n                                  message={val.message}\n                              />\n                          );\n                      } else {\n                          return undefined;\n                      }\n                  })\n                : undefined}\n        </List>\n    );\n};\n","import { Actions, IMessage, IChannels } from '../types/redux';\nimport { IGuildData } from '../types/socket';\n\n/**\n * A function that sets the connected state to a value\n * @param payload The connection state to set it to\n */\nexport function SetConnected(payload: boolean) {\n    return {\n        type: Actions.SET_CONNECTED,\n        payload\n    };\n}\n\n/**\n * A function that sets the messages (displayed in the chat area)\n * @param payload The messages to assign\n */\nexport function SetMessages(payload: IMessage[]) {\n    return {\n        type: Actions.SET_MESSAGES,\n        payload\n    };\n}\n\nexport function AddMessage(payload: IMessage) {\n    return {\n        type: Actions.ADD_MESSAGE,\n        payload\n    };\n}\n\n/**\n * A function that sets the selected channel. Used for the channel list\n * @param payload What to set the selected channel to\n */\nexport function SetSelectedChannel(payload: string | undefined) {\n    return {\n        type: Actions.SET_SELECTED_CHANNEL,\n        payload\n    };\n}\n\n/**\n * A function that sets the selected guild. Used for the guild list\n * @param payload The guild ID to set the selection to\n */\nexport function SetSelectedGuild(payload: string | undefined) {\n    return {\n        type: Actions.SET_SELECTED_GUILD,\n        payload\n    };\n}\n\nexport function SetChannels(payload: IChannels) {\n    return {\n        type: Actions.SET_CHANNELS,\n        payload\n    };\n}\n\nexport function SetGuilds(payload: IGuildData[]) {\n    return {\n        type: Actions.SET_GUILDS,\n        payload\n    };\n}\n\nexport function ToggleThemeDialog() {\n    return {\n        type: Actions.TOGGLE_THEME_DIALOG\n    };\n}\n\nexport function ToggleGuildDialog() {\n    return {\n        type: Actions.TOGGLE_JOIN_GUILD_DIALOG\n    };\n}\n\nexport function ToggleGuildSettingsDialog() {\n    return {\n        type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG\n    };\n}\n\nexport function SetGuildPicture(guild: string, picture: string) {\n    return {\n        type: Actions.SET_GUILD_PICTURE,\n        payload: {\n            guild,\n            picture\n        }\n    };\n}\n\nexport function SetGuildName(guild: string, name: string) {\n    return {\n        type: Actions.SET_GUILD_NAME,\n        payload: {\n            guild,\n            name\n        }\n    };\n}\n\ninterface IInvites {\n    [key: string]: number;\n}\n\nexport function SetInvites(invites: IInvites) {\n    return {\n        type: Actions.SET_INVITES,\n        payload: invites\n    };\n}\n\nexport function SetUser(userid: string, username: string, avatar: string) {\n    return {\n        type: Actions.SET_USER,\n        payload: {\n            userid,\n            username,\n            avatar\n        }\n    };\n}\n\nexport function SetChatInput(input: HTMLInputElement) {\n    return {\n        type: Actions.SET_CHAT_INPUT,\n        payload: input\n    };\n}\n","import React, { useRef, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { harmonySocket } from '../../../Root';\nimport { SetChatInput } from '../../../../redux/Dispatches';\n\nexport const Input = () => {\n    const inputField = useRef<HTMLInputElement | undefined>(undefined);\n    const connected = useSelector((state: IState) => state.connected);\n    const inputStyle = useSelector((state: IState) => state.inputStyle);\n    const guildID = useSelector((state: IState) => state.selectedGuild);\n    const channelID = useSelector((state: IState) => state.selectedChannel);\n    const dispatch = useDispatch();\n\n    const onKeyPress = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            // does the input field exist and is it not blank\n            if (inputField.current && !/^\\s*$/.test(inputField.current.value) && channelID) {\n                harmonySocket.sendMessage(guildID, channelID, inputField.current.value);\n                inputField.current.value = '';\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (inputField.current) {\n            dispatch(SetChatInput(inputField.current));\n        }\n    }, [inputField, dispatch]);\n\n    return (\n        <div>\n            <TextField\n                label={connected ? 'Message' : 'Currently Offline'}\n                variant={inputStyle as any}\n                fullWidth\n                multiline\n                rowsMax={3}\n                rows={3}\n                onKeyPress={onKeyPress}\n                inputRef={inputField}\n                color='secondary'\n            />\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useGuildListStyle = makeStyles((theme: Theme) => ({\n    guildlist: {\n        width: '68px'\n    },\n    guildiconroot: {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        marginTop: theme.spacing(1),\n        border: `2px solid transparent`\n    },\n    selectedguildicon: {\n        border: `2px solid ${theme.palette.primary.light}`\n    },\n    guildicon: {\n        width: '64px',\n        height: '64px',\n        borderRadius: '64px',\n        objectFit: 'cover',\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[400]\n    },\n    joinGuild: {\n        marginTop: theme.spacing(1),\n        width: '64px',\n        height: '64px',\n        borderRadius: '64px',\n        backgroundColor: theme.palette.secondary.dark\n    }\n}));\n","import React from 'react';\nimport { ButtonBase, Tooltip, List, ListItem, ListItemText } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Actions, IState } from '../../../../types/redux';\nimport { useGuildListStyle } from './GuildListStyle';\nimport { ContextMenuTrigger, ContextMenu, MenuItem } from 'react-contextmenu';\nimport { harmonySocket } from '../../../Root';\nimport { ToggleGuildSettingsDialog } from '../../../../redux/Dispatches';\n\ninterface IProps {\n    guildid: string;\n    guildname: string;\n    picture: string;\n    selected: boolean;\n}\n\nexport const GuildIcon = (props: IProps) => {\n    const guildsList = useSelector((state: IState) => state.guildList);\n    const classes = useGuildListStyle();\n    const dispatch = useDispatch();\n\n    const onClick = () => {\n        dispatch({\n            type: Actions.SET_SELECTED_GUILD,\n            payload: props.guildid\n        });\n    };\n\n    const handleLeave = () => {\n        harmonySocket.leaveGuild(props.guildid);\n    };\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.guildid}>\n                <ButtonBase className={`${classes.guildiconroot} ${props.selected ? classes.selectedguildicon : undefined}`} key={props.guildid} onClick={onClick}>\n                    <Tooltip title={props.guildname} placement='right'>\n                        <img className={classes.guildicon} alt='' src={props.picture} draggable={false} />\n                    </Tooltip>\n                </ButtonBase>\n            </ContextMenuTrigger>\n            <ContextMenu id={props.guildid}>\n                <List>\n                    <MenuItem>\n                        <ListItem button onClick={handleLeave}>\n                            <ListItemText primary='Leave Guild' />\n                        </ListItem>\n                    </MenuItem>\n                    {guildsList && guildsList[props.guildid].owner ? (\n                        <>\n                            <MenuItem>\n                                <ListItem button onClick={() => dispatch(ToggleGuildSettingsDialog())}>\n                                    <ListItemText primary='Guild Settings' />\n                                </ListItem>\n                            </MenuItem>\n                        </>\n                    ) : (\n                        undefined\n                    )}\n                </List>\n            </ContextMenu>\n        </>\n    );\n};\n","import React from 'react';\nimport GroupAdd from '@material-ui/icons/GroupAdd';\nimport { useGuildListStyle } from './GuildListStyle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { GuildIcon } from './GuildIcon';\nimport { ButtonBase, Tooltip } from '@material-ui/core';\n\nexport const GuildList = () => {\n    const classes = useGuildListStyle();\n    const guildList = useSelector((state: IState) => state.guildList);\n    const selectedGuild = useSelector((state: IState) => state.selectedGuild);\n    const dispatch = useDispatch();\n\n    return (\n        <div className={classes.guildlist}>\n            {Object.keys(guildList).map((key) => {\n                return <GuildIcon guildid={key} key={key} selected={selectedGuild === key} guildname={guildList[key].guildname} picture={guildList[key].picture} />;\n            })}\n            <ButtonBase className={classes.joinGuild} onClick={() => dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG })}>\n                <Tooltip title={'Join Or Create Guild'} placement='right'>\n                    <GroupAdd />\n                </Tooltip>\n            </ButtonBase>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useChannelListStyle = makeStyles((theme: Theme) => ({\n    selectedChannel: {\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[400]\n    },\n    nested: {\n        paddingLeft: theme.spacing(4)\n    },\n    newChannelInput: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2)\n    }\n}));\n","import React, { useState, useRef } from 'react';\nimport { List, ListItem, ListItemText, ListItemIcon, Collapse, Tooltip, Input } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport LeaveIcon from '@material-ui/icons/ExitToApp';\nimport { ContextMenu, ContextMenuTrigger } from 'react-contextmenu';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../../../../types/redux';\nimport { useChannelListStyle } from './ChannelListStyle';\nimport { harmonySocket } from '../../../Root';\nimport { ToggleGuildSettingsDialog, SetSelectedChannel } from '../../../../redux/Dispatches';\n\ninterface IChannelProps {\n    channelid: string;\n    channelname: string;\n    setSelectedChannel: (value: string) => void;\n}\n\nconst Channel = (props: IChannelProps) => {\n    //const guildList = useSelector((state: IState) => state.guildList);\n    const selectedGuild = useSelector((state: IState) => state.selectedGuild);\n    const selectedChannel = useSelector((state: IState) => state.selectedChannel);\n    const guildsList = useSelector((state: IState) => state.guildList);\n    const classes = useChannelListStyle();\n\n    const handleDelete = () => {\n        harmonySocket.sendDeleteChannel(selectedGuild, props.channelid);\n    };\n\n    return (\n        <>\n            <ContextMenuTrigger id={props.channelid}>\n                <ListItem button key={props.channelid} className={props.channelid === selectedChannel ? classes.selectedChannel : undefined} onClick={() => props.setSelectedChannel(props.channelid)}>\n                    <ListItemText secondary={`#${props.channelname}`} />\n                </ListItem>\n            </ContextMenuTrigger>\n            {guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                <ContextMenu id={props.channelid}>\n                    <List>\n                        <ListItem button onClick={handleDelete}>\n                            <ListItemText primary='Delete Channel' />\n                        </ListItem>\n                    </List>\n                </ContextMenu>\n            ) : (\n                undefined\n            )}\n        </>\n    );\n};\n\nexport const ChannelList = () => {\n    const channels = useSelector((state: IState) => state.channels);\n    const selectedGuild = useSelector((state: IState) => state.selectedGuild);\n    const guildsList = useSelector((state: IState) => state.guildList);\n    const [actionsExpanded, setActionsExpanded] = useState<boolean>(false);\n    const [addingChannel, setAddingChannel] = useState<boolean>(false);\n    const addChannelInput = useRef<HTMLInputElement | null>(null);\n    const dispatch = useDispatch();\n    const classes = useChannelListStyle();\n\n    const leaveGuild = () => {\n        harmonySocket.leaveGuild(selectedGuild);\n    };\n\n    const setSelectedChannel = (value: string) => {\n        dispatch(SetSelectedChannel(value));\n    };\n\n    const toggleGuildSettings = () => {\n        harmonySocket.sendGetInvites(selectedGuild);\n        dispatch(ToggleGuildSettingsDialog());\n    };\n\n    const addChannelButtonClicked = () => {\n        setAddingChannel(true);\n    };\n\n    const handleChannelNameFinish = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n        if (ev.key === 'Enter' && addChannelInput.current) {\n            harmonySocket.sendAddChannel(selectedGuild, addChannelInput.current.value);\n            setAddingChannel(false);\n        }\n    };\n\n    return (\n        <div>\n            <List style={{ padding: 0 }}>\n                {selectedGuild ? (\n                    <>\n                        <ListItem button onClick={() => setActionsExpanded(!actionsExpanded)}>\n                            <ListItemText primary='Guild Options' />\n                            {actionsExpanded ? <ExpandLess /> : <ExpandMore />}\n                        </ListItem>\n                        <Collapse in={actionsExpanded} timeout='auto' unmountOnExit>\n                            <List component='div' disablePadding>\n                                {guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                                    <>\n                                        <ListItem button className={classes.nested} onClick={toggleGuildSettings}>\n                                            <ListItemIcon>\n                                                <SettingsIcon />\n                                            </ListItemIcon>\n                                            <ListItemText primary='Guild Settings' />\n                                        </ListItem>\n                                    </>\n                                ) : (\n                                    undefined\n                                )}\n                                <ListItem button className={classes.nested} onClick={leaveGuild}>\n                                    <ListItemIcon>\n                                        <LeaveIcon />\n                                    </ListItemIcon>\n                                    <ListItemText primary='Leave Guild' />\n                                </ListItem>\n                            </List>\n                        </Collapse>\n                    </>\n                ) : (\n                    undefined\n                )}\n                {channels\n                    ? Object.keys(channels).map((key) => {\n                          return <Channel key={key} channelid={key} channelname={channels[key]} setSelectedChannel={setSelectedChannel} />;\n                      })\n                    : undefined}\n                <div className={classes.newChannelInput}>\n                    {addingChannel ? (\n                        <Input fullWidth autoFocus onKeyPress={handleChannelNameFinish} onBlur={() => setAddingChannel(false)} placeholder={'Channel Name'} inputRef={addChannelInput} />\n                    ) : (\n                        undefined\n                    )}\n                </div>\n                {selectedGuild && guildsList[selectedGuild] && guildsList[selectedGuild].owner ? (\n                    <Tooltip title='Create Channel'>\n                        <ListItem button onClick={addChannelButtonClicked}>\n                            <ListItemText style={{ textAlign: 'center' }} primary='+' />\n                        </ListItem>\n                    </Tooltip>\n                ) : (\n                    undefined\n                )}\n            </List>\n        </div>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\nimport { useChatAreaStyles } from './ChatAreaStyle';\nimport { Messages } from './Messages/Messages';\nimport { Input } from './Input/Input';\nimport { GuildList } from './GuildList/GuildList';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../../types/redux';\nimport { ChannelList } from './ChannelList/ChannelList';\n\nexport const ChatArea = () => {\n    const classes = useChatAreaStyles();\n    const messages = useSelector((state: IState) => state.messages);\n    const messagesRef = useRef<HTMLDivElement | null>(null);\n    const chatInput = useSelector((state: IState) => state.chatInput);\n\n    useEffect(() => {\n        if (messagesRef.current) {\n            messagesRef.current.scrollTop = messagesRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const onKeyDown = (ev: React.KeyboardEvent<HTMLDivElement>) => {\n        console.log('bruh');\n        if (ev.key !== 'Tab' && chatInput) {\n            chatInput.focus();\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.guildlist}>\n                <GuildList />\n            </div>\n            <div className={classes.channellist}>\n                <ChannelList />\n            </div>\n            <div className={classes.chatArea}>\n                <div className={classes.messages} ref={messagesRef} onKeyDown={onKeyDown} tabIndex={-1}>\n                    <Messages />\n                </div>\n                <div className={classes.input}>\n                    <Input />\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { Dialog, TextField, Typography, DialogContent, Button, Grid } from '@material-ui/core';\nimport { harmonySocket } from '../../../Root';\n\nexport const JoinGuild = () => {\n    const open = useSelector((state: IState) => state.joinGuildDialog);\n    const inputStyle = useSelector((state: IState) => state.inputStyle);\n    const [joinErr] = useState<string>('');\n    const [createErr] = useState<string>('');\n    const joinCodeRef = useRef<HTMLInputElement | null>(null);\n    const guildNameRef = useRef<HTMLInputElement | null>(null);\n    const dispatch = useDispatch();\n\n    const createGuild = () => {\n        if (guildNameRef.current && guildNameRef.current.value) {\n            harmonySocket.createGuild(guildNameRef.current.value);\n        }\n    };\n\n    const joinGuild = () => {\n        if (joinCodeRef.current && joinCodeRef.current.value) {\n            harmonySocket.joinGuild(joinCodeRef.current.value);\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG })}>\n            <DialogContent>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <div>\n                            <Typography variant='h5'>Join Guild</Typography>\n                            <TextField label='Join Code' variant={inputStyle as any} fullWidth inputRef={joinCodeRef} />\n                            <Typography color='error' variant='body2'>\n                                {joinErr || <br />}\n                            </Typography>\n                            <Button onClick={joinGuild}>Join Guild</Button>\n                        </div>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <div>\n                            <Typography variant='h5'>Create Guild</Typography>\n                            <TextField label='Guild Name' variant={inputStyle as any} fullWidth inputRef={guildNameRef} />\n                            <Typography color='error' variant='body2'>\n                                {createErr || <br />}\n                            </Typography>\n                            <Button onClick={createGuild}>Create Guild</Button>\n                        </div>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useGuildSettingsStyle = makeStyles((theme: Theme) => ({\n    guildIcon: {\n        width: '100px',\n        height: '100px'\n    },\n    menuEntry: {\n        marginTop: theme.spacing(2)\n    },\n    clipboardbtn: {\n        marginLeft: theme.spacing(3)\n    }\n}));\n","import React, { useRef, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { IState, Actions } from '../../../../types/redux';\nimport { Dialog, DialogContent, AppBar, Toolbar, IconButton, Typography, Button, TextField, Avatar, ButtonBase, Table, TableHead, TableRow, TableCell, TableBody, Tooltip } from '@material-ui/core';\nimport copy from 'copy-to-clipboard';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { useGuildSettingsStyle } from './GuildSettingsStyle';\nimport { toast } from 'react-toastify';\nimport { harmonySocket } from '../../../Root';\n\nexport const GuildSettings = () => {\n    const open = useSelector((state: IState) => state.guildSettingsDialog);\n    const selectedGuild = useSelector((state: IState) => state.selectedGuild);\n    const inputStyle = useSelector((state: IState) => state.inputStyle);\n    const guilds = useSelector((state: IState) => state.guildList);\n    const invites = useSelector((state: IState) => state.invites);\n    const dispatch = useDispatch();\n    const guildIconUpload = useRef<HTMLInputElement | null>(null);\n    const [guildName, setGuildName] = useState<string | undefined>(guilds[selectedGuild] ? guilds[selectedGuild].guildname : undefined);\n    const [guildIconFile, setGuildIconFile] = useState<File | null>(null);\n    const [guildIcon, setGuildIcon] = useState<string | undefined>(guilds[selectedGuild] ? guilds[selectedGuild].picture : undefined);\n    const classes = useGuildSettingsStyle();\n\n    const deleteInviteLink = (invite: string) => {\n        harmonySocket.sendDeleteInvite(invite, selectedGuild);\n    };\n\n    const createInviteLink = () => {\n        harmonySocket.sendCreateInvite(selectedGuild);\n    };\n\n    const onSaveChanges = () => {\n        if (guilds[selectedGuild]) {\n            if (guildIcon !== guilds[selectedGuild].picture && guildIconFile) {\n                const guildIconUpload = new FormData();\n                guildIconUpload.append('file', guildIconFile);\n                axios\n                    .post(`http://${window.location.hostname}:2288/api/rest/fileupload`, guildIconUpload, {})\n                    .then((res) => {\n                        if (res.data) {\n                            const uploadID = res.data;\n                            harmonySocket.sendGuildPictureUpdate(selectedGuild, `http://${window.location.hostname}:2288/filestore/${uploadID}`);\n                        }\n                    })\n                    .catch(() => {\n                        toast.error('Failed to update guild icon');\n                    });\n            }\n            if (guilds[selectedGuild].guildname !== guildName && guildName) {\n                harmonySocket.sendGuildNameUpdate(selectedGuild, guildName);\n            }\n        }\n    };\n\n    const onGuildIconSelected = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.currentTarget.files && event.currentTarget.files.length > 0) {\n            const file = event.currentTarget.files[0];\n            setGuildIconFile(file);\n            if (file.type.startsWith('image/') && file.size < 33554432) {\n                const fileReader = new FileReader();\n                fileReader.readAsDataURL(file);\n                fileReader.addEventListener('load', () => {\n                    if (typeof fileReader.result === 'string') {\n                        setGuildIcon(fileReader.result);\n                    }\n                });\n            }\n        }\n    };\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG })} fullScreen>\n            <AppBar style={{ position: 'relative' }}>\n                <Toolbar>\n                    <IconButton\n                        edge='start'\n                        color='inherit'\n                        onClick={() =>\n                            dispatch({\n                                type: Actions.TOGGLE_GUILD_SETTINGS_DIALOG\n                            })\n                        }\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant='h6'>Guild Settings</Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <div style={{ width: '33%' }}>\n                    <input type='file' id='file' multiple ref={guildIconUpload} style={{ display: 'none' }} onChange={onGuildIconSelected} />\n                    <ButtonBase\n                        style={{ borderRadius: '50%' }}\n                        onClick={() => {\n                            if (guildIconUpload.current) {\n                                guildIconUpload.current.click();\n                            }\n                        }}\n                    >\n                        <Avatar className={classes.guildIcon} src={guildIcon}></Avatar>\n                    </ButtonBase>\n                    <TextField\n                        label='Guild Name'\n                        fullWidth\n                        variant={inputStyle as any}\n                        className={classes.menuEntry}\n                        value={guildName}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setGuildName(e.currentTarget.value)}\n                    />\n                    <Button variant='contained' color='secondary' className={classes.menuEntry} onClick={onSaveChanges}>\n                        Save Changes\n                    </Button>\n                    <Typography variant='h4' className={classes.menuEntry}>\n                        Join Codes\n                    </Typography>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Join Code</TableCell>\n                                <TableCell>Amount Used</TableCell>\n                                <TableCell>Actions</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {Object.keys(invites).map((key) => {\n                                return (\n                                    <TableRow key={key}>\n                                        <TableCell component='th' scope='row'>\n                                            {key}\n                                        </TableCell>\n                                        <TableCell component='th' scope='row'>\n                                            {invites[key]}\n                                        </TableCell>\n                                        <TableCell component='td' scope='row'>\n                                            <Tooltip title='Copy Invite Link'>\n                                                <IconButton\n                                                    onClick={() => {\n                                                        copy(`http://${window.location.hostname}${window.location.port ? ':' + window.location.port : ''}/invite/${key}`);\n                                                        toast.info('Successfully copied to clipboard!');\n                                                    }}\n                                                >\n                                                    <ShareIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                            <Tooltip title='Delete Invite Link'>\n                                                <IconButton onClick={() => deleteInviteLink(key)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                    <Button fullWidth onClick={createInviteLink}>\n                        <AddIcon />\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useUserSettingsStyle = makeStyles((theme: Theme) => ({\n    guildIcon: {\n        width: '100px',\n        height: '100px'\n    },\n    menuEntry: {\n        marginTop: theme.spacing(2)\n    },\n    clipboardbtn: {\n        marginLeft: theme.spacing(3)\n    }\n}));\n","import React, { useState, useRef } from 'react';\nimport { Dialog, AppBar, Toolbar, IconButton, Typography, DialogContent, TextField, ButtonBase, Avatar, Button } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState, Actions } from '../../../../types/redux';\nimport { useUserSettingsStyle } from './UserSettingsStyle';\n\nexport const UserSettingsDialog = () => {\n    const open = useSelector((state: IState) => state.userSettingsDialog);\n    const userAvatarUpload = useRef<HTMLInputElement | null>(null);\n    const inputStyle = useSelector((state: IState) => state.inputStyle);\n    const [username, setUsername] = useState<string>('');\n    const dispatch = useDispatch();\n    const classes = useUserSettingsStyle();\n\n    return (\n        <Dialog open={open} onClose={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })} fullScreen>\n            <AppBar style={{ position: 'relative' }}>\n                <Toolbar>\n                    <IconButton edge='start' onClick={() => dispatch({ type: Actions.TOGGLE_USER_SETTINGS_DIALOG })}>\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant='h6'>User Settings</Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <div style={{ width: '33%' }}>\n                    <input type='file' id='file' multiple ref={userAvatarUpload} style={{ display: 'none' }} />\n                    <ButtonBase\n                        style={{ borderRadius: '50%' }}\n                        onClick={() => {\n                            if (userAvatarUpload.current) {\n                                userAvatarUpload.current.click();\n                            }\n                        }}\n                    >\n                        <Avatar className={classes.guildIcon}></Avatar>\n                    </ButtonBase>\n                    <TextField\n                        label='Username'\n                        fullWidth\n                        variant={inputStyle as any}\n                        className={classes.menuEntry}\n                        value={username}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.currentTarget.value)}\n                    />\n                    <Button variant='contained' color='secondary' className={classes.menuEntry}>\n                        Save Changes\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { HarmonyBar } from './HarmonyBar/HarmonyBar';\nimport { ThemeDialog } from './Dialog/ThemeDialog';\nimport { useAppStyles } from './AppStyle';\nimport { ChatArea } from './ChatArea/ChatArea';\nimport { harmonySocket } from '../Root';\nimport { useHistory } from 'react-router';\nimport { IGuildData } from '../../types/socket';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Actions, IState, IMessage } from '../../types/redux';\nimport { toast } from 'react-toastify';\nimport { JoinGuild } from './Dialog/JoinGuildDialog/JoinGuild';\nimport { GuildSettings } from './Dialog/GuildSettingsDialog/GuildSettings';\nimport {\n    SetMessages,\n    SetSelectedChannel,\n    SetSelectedGuild,\n    SetChannels,\n    SetGuilds,\n    AddMessage,\n    ToggleGuildSettingsDialog,\n    SetGuildPicture,\n    SetInvites,\n    SetGuildName,\n    SetUser\n} from '../../redux/Dispatches';\nimport { UserSettingsDialog } from './Dialog/UserSettingsDialog/UserSettingsDialog';\n\nexport const App = () => {\n    const classes = useAppStyles();\n    const dispatch = useDispatch();\n    const connected = useSelector((state: IState) => state.connected);\n    const channels = useSelector((state: IState) => state.channels);\n    const invites = useSelector((state: IState) => state.invites);\n    const selectedGuild = useSelector((state: IState) => state.selectedGuild);\n    const themeDialogOpen = useSelector((state: IState) => state.themeDialog);\n    const joinDialogOpen = useSelector((state: IState) => state.joinGuildDialog);\n    const guildSettingsDialogOpen = useSelector((state: IState) => state.guildSettingsDialog);\n    const userSettingsDialogOpen = useSelector((state: IState) => state.userSettingsDialog);\n    const history = useHistory();\n    let eventsBound = false;\n\n    // event when the client has connected\n    useEffect(() => {\n        if (connected) {\n            harmonySocket.getGuilds();\n        }\n    }, [connected]);\n\n    useEffect(() => {\n        if (connected) {\n            dispatch(SetMessages([]));\n            dispatch(SetSelectedChannel(undefined));\n            harmonySocket.getMessages(selectedGuild);\n            harmonySocket.getChannels(selectedGuild);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedGuild]);\n\n    useEffect(() => {\n        if (!eventsBound) {\n            if ((harmonySocket.conn.readyState !== WebSocket.OPEN && harmonySocket.conn.readyState !== WebSocket.CONNECTING) || typeof localStorage.getItem('token') !== 'string') {\n                // bounce the user to the login screen if the socket is disconnected or there's no token\n                history.push('/');\n                return;\n            }\n\n            harmonySocket.events.addListener('getguilds', (raw: any) => {\n                let guildsList = raw['guilds'] as IGuildData[];\n                if (Object.keys(guildsList).length === 0) {\n                    dispatch(SetMessages([]));\n                    dispatch(SetSelectedChannel(undefined));\n                    dispatch(SetSelectedGuild(undefined));\n                    dispatch(SetChannels({}));\n                }\n                dispatch(SetGuilds(guildsList));\n            });\n            harmonySocket.events.addListener('getmessages', (raw: any) => {\n                if (raw['messages']) {\n                    dispatch(SetMessages((raw['messages'] as IMessage[]).reverse()));\n                }\n            });\n            harmonySocket.events.addListener('message', (raw: any) => {\n                // prevent stupid API responses\n                if (typeof raw['userid'] === 'string' && typeof raw['createdat'] === 'number' && typeof raw['guild'] === 'string' && typeof raw['message'] === 'string') {\n                    dispatch(AddMessage(raw as IMessage));\n                }\n            });\n            harmonySocket.events.addListener('getchannels', (raw: any) => {\n                if (typeof raw === 'object') {\n                    dispatch(SetChannels(raw['channels']));\n                }\n            });\n            harmonySocket.events.addListener('deauth', () => {\n                toast.warn('Your session has expired. Please login again');\n                history.push('/');\n                return;\n            });\n            harmonySocket.events.addListener('leaveguild', (raw: any) => {\n                if (typeof raw['message'] === 'string') {\n                    toast.error(raw['message']);\n                    return;\n                }\n                harmonySocket.getGuilds();\n            });\n            harmonySocket.events.addListener('joinguild', (raw: any) => {\n                if (!raw['message']) {\n                    harmonySocket.getGuilds();\n                    dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG });\n                }\n            });\n            harmonySocket.events.addListener('createguild', (raw: any) => {\n                if (!raw['message']) {\n                    harmonySocket.getGuilds();\n                    dispatch({ type: Actions.TOGGLE_JOIN_GUILD_DIALOG });\n                }\n            });\n            harmonySocket.events.addListener('updateguildpicture', (raw: any) => {\n                if (raw['success'] === true && raw['picture'] && raw['guild']) {\n                    dispatch(SetGuildPicture(raw['guild'], raw['picture']));\n                    if (guildSettingsDialogOpen) {\n                        dispatch(ToggleGuildSettingsDialog());\n                    }\n                } else {\n                    toast.error('Error saving guild');\n                }\n            });\n            harmonySocket.events.addListener('updateguildname', (raw: any) => {\n                if (raw['success'] === true && raw['name'] && raw['guild']) {\n                    dispatch(SetGuildName(raw['guild'], raw['name']));\n                    if (guildSettingsDialogOpen) {\n                        dispatch(ToggleGuildSettingsDialog());\n                    }\n                } else {\n                    toast.error('Error saving guild');\n                }\n            });\n            harmonySocket.events.addListener('getinvites', (raw: any) => {\n                if (raw['invites'] && raw['guild']) {\n                    dispatch(SetInvites(raw['invites']));\n                }\n            });\n            harmonySocket.events.addListener('addguildchannel', (raw: any) => {\n                if (raw['success'] === true && raw['guild'] && raw['channelname'] && raw['channelid']) {\n                    dispatch(SetChannels({ ...channels, [raw['channelid']]: raw['channelname'] }));\n                }\n            });\n            harmonySocket.events.addListener('deleteguildchannel', (raw: any) => {\n                if (raw['success'] === true && raw['guild'] && raw['channelid']) {\n                    const channelDeleted = {\n                        ...channels\n                    };\n                    delete channelDeleted[raw['channelid']];\n                    dispatch(SetChannels({ ...channelDeleted }));\n                }\n            });\n            harmonySocket.events.addListener('deleteinvite', (raw: any) => {\n                if (raw['success'] === true && raw['invite']) {\n                    const invitesDeleted = {\n                        ...invites\n                    };\n                    delete invitesDeleted[raw['invite']];\n                    dispatch(SetInvites(invitesDeleted));\n                }\n            });\n            harmonySocket.events.addListener('createinvite', (raw: any) => {\n                if (raw['success'] === true && raw['invite']) {\n                    const invitesDeleted = {\n                        ...invites,\n                        [raw['invite']]: 0\n                    };\n                    dispatch(SetInvites(invitesDeleted));\n                }\n            });\n            harmonySocket.events.addListener('getuser', (raw: any) => {\n                console.log(raw);\n                if (typeof raw['userid'] === 'string' && typeof raw['username'] === 'string' && typeof raw['avatar'] === 'string') {\n                    dispatch(SetUser(raw['userid'], raw['username'], raw['avatar']));\n                }\n            });\n            return () => {\n                harmonySocket.events.removeAllListeners('getguilds');\n                harmonySocket.events.removeAllListeners('getmessages');\n                harmonySocket.events.removeAllListeners('message');\n                harmonySocket.events.removeAllListeners('getchannels');\n                harmonySocket.events.removeAllListeners('deauth');\n                harmonySocket.events.removeAllListeners('leaveguild');\n                harmonySocket.events.removeAllListeners('joinguild');\n                harmonySocket.events.removeAllListeners('createguild');\n                harmonySocket.events.removeAllListeners('updateguildpicture');\n                harmonySocket.events.removeAllListeners('updateguildname');\n                harmonySocket.events.removeAllListeners('getinvites');\n                harmonySocket.events.removeAllListeners('addguildchannel');\n                harmonySocket.events.removeAllListeners('deleteguildchannel');\n                harmonySocket.events.removeAllListeners('deleteinvite');\n                harmonySocket.events.removeAllListeners('createinvite');\n                harmonySocket.events.removeAllListeners('getusername');\n            };\n        }\n    }, [history, dispatch, guildSettingsDialogOpen, eventsBound, channels, invites]);\n\n    return (\n        <div className={classes.root}>\n            {themeDialogOpen ? <ThemeDialog /> : undefined}\n            {joinDialogOpen ? <JoinGuild /> : undefined}\n            {guildSettingsDialogOpen ? <GuildSettings /> : undefined}\n            {userSettingsDialogOpen ? <UserSettingsDialog /> : undefined}\n            <HarmonyBar />\n            <div className={classes.navFill} /> {/* this fills the area where the navbar is*/}\n            <ChatArea />\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useEntryStyles = makeStyles((theme: Theme) => ({\n    form: {\n        width: '60%',\n        height: '60%',\n        position: 'relative'\n    },\n    root: {\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useLoginStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1)\n    },\n    submitBtn: {\n        position: 'absolute',\n        bottom: theme.spacing(1),\n        left: theme.spacing(1)\n    }\n}));\n","import React, { useRef, useEffect } from 'react';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport { useLoginStyles } from './LoginStyle';\nimport { harmonySocket } from '../../Root';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\n\nexport const Login: React.FC = () => {\n    const history = useHistory(); // history for better routing\n    const classes = useLoginStyles();\n\n    const [err, setErr] = React.useState<string | undefined>(undefined);\n    const emailRef = useRef<HTMLInputElement | undefined>(undefined);\n    const pwdRef = useRef<HTMLInputElement | undefined>(undefined);\n\n    const login = () => {\n        if (harmonySocket.conn.readyState === WebSocket.CLOSED) {\n            toast.error(\"Can't login, trouble connecting to server\");\n        } else if (emailRef.current && pwdRef.current && emailRef.current.value.length && pwdRef.current.value) {\n            harmonySocket.login(emailRef.current.value, pwdRef.current.value);\n        } else {\n            toast.error(\"Can't login, missing email or password\");\n        }\n    };\n\n    useEffect(() => {\n        harmonySocket.events.addListener('loginerror', (raw: any) => {\n            if (typeof raw['message'] === 'string') {\n                setErr(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('token', (raw: any) => {\n            if (typeof raw['token'] === 'string' && typeof raw['userid'] === 'string') {\n                localStorage.setItem('token', raw['token']);\n                localStorage.setItem('userid', raw['userid']);\n                history.push('/app');\n            }\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('loginerror');\n            harmonySocket.events.removeAllListeners('token');\n        };\n    }, [history]);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => e.preventDefault()}>\n                <TextField label='Email' type='email' name='email' autoComplete='email' margin='normal' fullWidth inputRef={emailRef} />\n                <TextField label='Password' type='password' name='password' margin='normal' fullWidth inputRef={pwdRef} />\n                {err ? (\n                    <Typography variant='subtitle1' color={'error'}>\n                        {err}\n                    </Typography>\n                ) : (\n                    undefined\n                )}\n                <Button variant='contained' color='primary' className={classes.submitBtn} onClick={login} type='submit'>\n                    Log In\n                </Button>\n            </form>\n        </div>\n    );\n};\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useRegisterStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1)\n    },\n    submitBtn: {\n        position: 'absolute',\n        bottom: theme.spacing(1),\n        left: theme.spacing(1)\n    }\n}));\n","import React, { useRef, useEffect } from 'react';\nimport { TextField, Typography, Button } from '@material-ui/core';\nimport { useRegisterStyles } from './RegisterStyle';\nimport { harmonySocket } from '../../Root';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\n\nexport const Register = () => {\n    const classes = useRegisterStyles();\n    const history = useHistory();\n    const [err, setErr] = React.useState<string | undefined>(undefined);\n    const emailRef = useRef<HTMLInputElement | undefined>(undefined);\n    const usernameRef = useRef<HTMLInputElement | undefined>(undefined);\n    const pwdRef = useRef<HTMLInputElement | undefined>(undefined);\n\n    const register = () => {\n        if (harmonySocket.conn.readyState === WebSocket.CLOSED) {\n            toast.error(\"Can't register, trouble connecting to server\");\n        } else if (emailRef.current && usernameRef.current && pwdRef.current && emailRef.current.value && pwdRef.current.value && usernameRef.current.value) {\n            harmonySocket.register(emailRef.current.value, usernameRef.current.value, pwdRef.current.value);\n        } else {\n            toast.error(\"Can't register, missing email, username, or password\");\n        }\n    };\n\n    useEffect(() => {\n        harmonySocket.events.addListener('registererror', (raw: any) => {\n            if (typeof raw['message'] === 'string') {\n                setErr(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('token', (raw: any) => {\n            if (typeof raw['token'] === 'string' && typeof raw['userid'] === 'string') {\n                localStorage.setItem('token', raw['token']);\n                localStorage.setItem('userid', raw['userid']);\n                history.push('/app');\n            }\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('registererror');\n            harmonySocket.events.removeAllListeners('token');\n        };\n    }, [history]);\n\n    return (\n        <div className={classes.root}>\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => e.preventDefault()}>\n                <TextField label='Email' type='email' name='email' autoComplete='email' margin='normal' fullWidth inputRef={emailRef} />\n                <TextField label='Username' type='text' name='usernamee' autoComplete='username' margin='normal' fullWidth inputRef={usernameRef} />\n                <TextField label='Password' type='password' name='password' autoComplete='new-password' margin='normal' fullWidth inputRef={pwdRef} />\n                <TextField label='Confirm Password' type='password' name='confirmpassword' autoComplete='none' margin='normal' fullWidth />\n                {err ? (\n                    <Typography variant='subtitle1' color={'error'}>\n                        {err}\n                    </Typography>\n                ) : (\n                    undefined\n                )}\n                <Button variant='contained' color='primary' className={classes.submitBtn} onClick={register} type='submit'>\n                    Log In\n                </Button>\n            </form>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Paper, Tabs, Tab } from '@material-ui/core';\nimport { useEntryStyles } from './EntryStyle';\nimport { Login } from './Login/Login';\nimport { Register } from './Register/Register';\n\nexport const Entry = () => {\n    const classes = useEntryStyles();\n    const [tabIDX, setTabIDX] = React.useState(0);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.form}>\n                <Tabs value={tabIDX} onChange={(event: any, newValue: number): void => setTabIDX(newValue)} variant='fullWidth' indicatorColor={'primary'}>\n                    <Tab label='Login' id='form-tab-0' />\n                    <Tab label='Register' id='form-tab-1' />\n                </Tabs>\n                {tabIDX === 0 ? <Login /> : <Register />}\n            </Paper>\n        </div>\n    );\n};\n","import { EventEmitter } from 'fbemitter';\nimport { IPacket } from '../types/socket';\n\nexport default class HarmonySocket {\n    conn: WebSocket;\n    events: EventEmitter;\n\n    constructor() {\n        this.conn = new WebSocket(`ws://${window.location.hostname}:2288/api/socket`);\n        this.events = new EventEmitter();\n        this.conn.addEventListener('open', () => this.events.emit('open'));\n        this.conn.addEventListener('close', () => this.events.emit('close'));\n        this.conn.addEventListener('error', () => this.events.emit('error'));\n        this.conn.onmessage = (e: MessageEvent) => {\n            const unprocessed = JSON.parse(e.data);\n            if (typeof unprocessed['type'] === 'string' && typeof unprocessed['data'] === 'object') {\n                const packet: IPacket = unprocessed;\n                this.events.emit(packet.type, packet.data);\n            } else {\n                console.warn(`Unsupported packet received`);\n                console.log(unprocessed);\n            }\n        };\n    }\n\n    connect = () => {\n        this.conn = new WebSocket(`ws://${window.location.hostname}:2288/api/socket`);\n        this.conn.addEventListener('open', () => this.events.emit('open'));\n        this.conn.addEventListener('close', () => this.events.emit('close'));\n        this.conn.addEventListener('error', () => this.events.emit('error'));\n        this.conn.onmessage = (e: MessageEvent) => {\n            const unprocessed = JSON.parse(e.data);\n            if (typeof unprocessed['type'] === 'string' && typeof unprocessed['data'] === 'object') {\n                const packet: IPacket = unprocessed;\n                this.events.emit(packet.type, packet.data);\n            } else {\n                console.warn(`Unsupported packet received`);\n                console.log(unprocessed);\n            }\n        };\n    };\n\n    emitEvent(type: string, data: unknown) {\n        // choke all packets if connection is not working\n        if (this.conn.readyState === WebSocket.OPEN) {\n            this.conn.send(JSON.stringify({ type, data }));\n        }\n    }\n\n    login(email: string, password: string) {\n        this.emitEvent('login', {\n            email,\n            password\n        });\n    }\n\n    register(email: string, username: string, password: string) {\n        this.emitEvent('register', {\n            email,\n            username,\n            password\n        });\n    }\n\n    getGuilds() {\n        this.emitEvent('getguilds', {\n            token: localStorage.getItem('token')\n        });\n    }\n\n    getMessages(guildID: string) {\n        this.emitEvent('getmessages', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendMessage(guildID: string, channelID: string, text: string) {\n        this.emitEvent('message', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelID,\n            message: text\n        });\n    }\n\n    getChannels(guildID: string) {\n        this.emitEvent('getchannels', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    joinGuild(inviteCode: string) {\n        this.emitEvent('joinguild', {\n            token: localStorage.getItem('token'),\n            invite: inviteCode\n        });\n    }\n\n    createGuild(guildName: string) {\n        this.emitEvent('createguild', {\n            token: localStorage.getItem('token'),\n            guildname: guildName\n        });\n    }\n\n    leaveGuild(guildID: string) {\n        this.emitEvent('leaveguild', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendGuildNameUpdate(guildID: string, newname: string) {\n        this.emitEvent('updateguildname', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            name: newname\n        });\n    }\n\n    sendGuildPictureUpdate(guildID: string, newpicture: string) {\n        this.emitEvent('updateguildpicture', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            picture: newpicture\n        });\n    }\n\n    sendGetInvites(guildID: string) {\n        this.emitEvent('getinvites', {\n            token: localStorage.getItem('token'),\n            guild: guildID\n        });\n    }\n\n    sendAddChannel(guildID: string, channelname: string) {\n        this.emitEvent('addchannel', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelname\n        });\n    }\n\n    sendDeleteChannel(guildID: string, channelID: string) {\n        this.emitEvent('deletechannel', {\n            token: localStorage.getItem('token'),\n            guild: guildID,\n            channel: channelID\n        });\n    }\n\n    sendDeleteInvite(invite: string, guild: string) {\n        this.emitEvent('deleteinvite', {\n            token: localStorage.getItem('token'),\n            invite,\n            guild\n        });\n    }\n\n    sendCreateInvite(guild: string) {\n        this.emitEvent('createinvite', {\n            token: localStorage.getItem('token'),\n            guild\n        });\n    }\n\n    sendGetUser(userid: string) {\n        this.emitEvent('getuser', {\n            token: localStorage.getItem('token'),\n            userid\n        });\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nexport const useRootStyles = makeStyles((theme: Theme) => ({\n    '@global': {\n        '::-webkit-scrollbar': {\n            width: '10px'\n        },\n        '::-webkit-scrollbar-thumb:hover': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(150, 150, 150)' : 'rgb(100, 100, 100)'\n        },\n        '::-webkit-scrollbar-track': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(245, 245, 245)' : 'rgb(46, 46, 46)'\n        },\n        '::-webkit-scrollbar-thumb': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'\n        },\n        '::-webkit-scrollbar-corner': {\n            backgroundColor: theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'\n        },\n        '*': {\n            scrollbarColor: `${theme.palette.type === 'light' ? 'rgb(200, 200, 200)' : 'rgb(64, 64, 64)'} ${theme.palette.type === 'light' ? 'rgb(245, 245, 245)' : 'rgb(46, 46, 46)'}`\n        }\n    }\n}));\n","import { makeStyles } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\n\nexport const useInviteHandlerStyle = makeStyles((theme: Theme) => ({\n    errorRoot: {\n        textAlign: 'center'\n    },\n    errorMsg: {\n        paddingTop: theme.spacing(10)\n    },\n    errorBtn: {\n        marginTop: theme.spacing(2)\n    }\n}));\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router';\nimport { harmonySocket } from '../Root';\nimport { Typography, Button } from '@material-ui/core';\nimport { useInviteHandlerStyle } from './InviteHandlerStyle';\n\nexport const InviteHandler = () => {\n    const { invitecode } = useParams();\n    const history = useHistory();\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const classes = useInviteHandlerStyle();\n\n    useEffect(() => {\n        harmonySocket.events.addListener('joinguild', (raw: any) => {\n            console.log(raw);\n            if (!raw['message']) {\n                setErrorMessage(null);\n                history.push('/app');\n            } else {\n                setErrorMessage(raw['message']);\n            }\n        });\n        harmonySocket.events.addListener('open', () => {\n            if (invitecode) {\n                harmonySocket.joinGuild(invitecode);\n            }\n        });\n    }, [history, invitecode]);\n\n    return (\n        <div>\n            {errorMessage ? (\n                <div className={classes.errorRoot}>\n                    <Typography variant='h1' align='center' className={classes.errorMsg}>\n                        404\n                        <br />\n                        {errorMessage}\n                    </Typography>\n                    <Button variant='contained' color='secondary' className={classes.errorBtn} onClick={() => history.push('/')}>\n                        Return To Login\n                    </Button>\n                </div>\n            ) : (\n                undefined\n            )}\n        </div>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { Switch, Route } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { CssBaseline, createMuiTheme, Button } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IState } from '../types/redux';\nimport { App } from './App/App';\nimport { Entry } from './Entry/Entry';\nimport HarmonySocket from '../socket/socket';\nimport { useRootStyles } from './RootStyle';\nimport './Root.css';\nimport { SetConnected } from '../redux/Dispatches';\nimport { InviteHandler } from './InviteHandler/HandleInvite';\n\nexport const harmonySocket = new HarmonySocket();\nexport let previouslyDisconnected = false;\n\nconst Root: React.FC = () => {\n    const dispatch = useDispatch();\n    useRootStyles();\n\n    useEffect(() => {\n        harmonySocket.events.addListener('close', () => {\n            // lol plz no spahm\n            if (!previouslyDisconnected) {\n                toast.error('You have lost connection to the server');\n                dispatch(SetConnected(false));\n                previouslyDisconnected = true;\n            }\n            setTimeout(harmonySocket.connect, 3000);\n        });\n        harmonySocket.events.addListener('open', () => {\n            if (previouslyDisconnected) toast.success('You have reconnected to the server');\n            dispatch(SetConnected(true));\n        });\n        return () => {\n            harmonySocket.events.removeAllListeners('close'); // cleanup all socket events registered here\n            harmonySocket.events.removeAllListeners('open');\n        };\n    }, [dispatch]);\n\n    return (\n        <>\n            <CssBaseline />\n            <ToastContainer />\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path='/'>\n                        <Entry />\n                    </Route>\n                    <Route exact path='/app'>\n                        <App />\n                    </Route>\n                    <Route exact path='/invite/:invitecode'>\n                        <InviteHandler />\n                    </Route>\n                    <Route exact path='/bruh'>\n                        <Button\n                            onClick={() => {\n                                toast.info('GET BRUHED ON KID');\n                            }}\n                        >\n                            Bruh Button\n                        </Button>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </>\n    );\n};\n\nconst ThemedRoot = () => {\n    const themeState = useSelector((state: IState) => state.theme);\n    const theme = createMuiTheme({\n        palette: {\n            primary: themeState.primary,\n            secondary: themeState.secondary,\n            type: themeState.type\n        }\n    });\n\n    return (\n        <div className='root'>\n            <ThemeProvider theme={theme}>\n                <Root />\n            </ThemeProvider>\n        </div>\n    );\n};\n\nexport default ThemedRoot;\n","import { IState, Action, Actions } from '../types/redux';\nimport { red, orange } from '@material-ui/core/colors';\n\nconst appState: IState = {\n    theme: {\n        type: 'dark',\n        primary: red,\n        secondary: orange\n    },\n    guildList: {},\n    themeDialog: false,\n    connected: false,\n    selectedGuild: '',\n    messages: [],\n    invites: {},\n    inputStyle: 'filled',\n    channels: {},\n    selectedChannel: undefined,\n    joinGuildDialog: false,\n    guildSettingsDialog: false,\n    users: {},\n    userSettingsDialog: false,\n    chatInput: undefined\n};\n\nexport default function AppReducer(state = appState, action: Action): IState {\n    switch (action.type) {\n        case Actions.INVERT_THEME: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    type: state.theme.type === 'dark' ? 'light' : 'dark'\n                }\n            };\n        }\n        case Actions.TOGGLE_THEME_DIALOG: {\n            return {\n                ...state,\n                themeDialog: !state.themeDialog\n            };\n        }\n        case Actions.CHANGE_PRIMARY: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    primary: action.payload\n                }\n            };\n        }\n        case Actions.CHANGE_SECONDARY: {\n            return {\n                ...state,\n                theme: {\n                    ...state.theme,\n                    secondary: action.payload\n                }\n            };\n        }\n        case Actions.SET_CONNECTED: {\n            return {\n                ...state,\n                connected: action.payload\n            };\n        }\n        case Actions.SET_GUILDS: {\n            return {\n                ...state,\n                guildList: action.payload\n            };\n        }\n        case Actions.SET_SELECTED_GUILD: {\n            return {\n                ...state,\n                selectedGuild: action.payload\n            };\n        }\n        case Actions.ADD_MESSAGE: {\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            };\n        }\n        case Actions.SET_MESSAGES: {\n            return {\n                ...state,\n                messages: action.payload\n            };\n        }\n        case Actions.SET_INPUT_STYLE: {\n            return {\n                ...state,\n                inputStyle: action.payload\n            };\n        }\n        case Actions.SET_CHANNELS: {\n            return {\n                ...state,\n                channels: action.payload\n            };\n        }\n        case Actions.SET_SELECTED_CHANNEL: {\n            return {\n                ...state,\n                selectedChannel: action.payload\n            };\n        }\n        case Actions.TOGGLE_JOIN_GUILD_DIALOG: {\n            return {\n                ...state,\n                joinGuildDialog: !state.joinGuildDialog\n            };\n        }\n        case Actions.TOGGLE_GUILD_SETTINGS_DIALOG: {\n            return {\n                ...state,\n                guildSettingsDialog: !state.guildSettingsDialog\n            };\n        }\n        case Actions.SET_GUILD_PICTURE: {\n            return {\n                ...state,\n                guildList: {\n                    ...state.guildList,\n                    [action.payload.guild]: {\n                        ...state.guildList[action.payload.guild],\n                        picture: action.payload.picture\n                    }\n                }\n            };\n        }\n        case Actions.SET_GUILD_NAME: {\n            return {\n                ...state,\n                guildList: {\n                    ...state.guildList,\n                    [action.payload.guild]: {\n                        ...state.guildList[action.payload.guild],\n                        guildname: action.payload.name\n                    }\n                }\n            };\n        }\n        case Actions.SET_INVITES: {\n            return {\n                ...state,\n                invites: action.payload\n            };\n        }\n        case Actions.SET_USER: {\n            return {\n                ...state,\n                users: {\n                    ...state.users,\n                    [action.payload.userid]: action.payload\n                }\n            };\n        }\n        case Actions.TOGGLE_USER_SETTINGS_DIALOG: {\n            return {\n                ...state,\n                userSettingsDialog: !state.userSettingsDialog\n            };\n        }\n        case Actions.SET_CHAT_INPUT: {\n            return {\n                ...state,\n                chatInput: action.payload\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n","import { createStore } from 'redux';\nimport AppReducer from './AppReducer';\n\nexport const store = createStore(AppReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport './Root/ContextMenu.css';\nimport Root from './Root/Root';\nimport { store } from './redux/store';\n\nconst ReduxRoot: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <Root />\n        </Provider>\n    );\n};\n\nReactDOM.render(<ReduxRoot />, document.getElementById('root'));\n"],"sourceRoot":""}