// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	v1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/filemessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/textmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Createdat holds the value of the "createdat" field.
	Createdat time.Time `json:"createdat,omitempty"`
	// Editedat holds the value of the "editedat" field.
	Editedat time.Time `json:"editedat,omitempty"`
	// Actions holds the value of the "actions" field.
	Actions []*v1.Action `json:"actions,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata *v1.Metadata `json:"metadata,omitempty"`
	// Overrides holds the value of the "overrides" field.
	Overrides []byte `json:"overrides,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges                MessageEdges `json:"edges"`
	channel_message      *uint64
	message_replies      *uint64
	message_file_message *int
	user_message         *uint64
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Message `json:"parent,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*Message `json:"replies,omitempty"`
	// TextMessage holds the value of the text_message edge.
	TextMessage *TextMessage `json:"text_message,omitempty"`
	// FileMessage holds the value of the file_message edge.
	FileMessage *FileMessage `json:"file_message,omitempty"`
	// EmbedMessage holds the value of the embed_message edge.
	EmbedMessage *EmbedMessage `json:"embed_message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[1] {
		if e.Channel == nil {
			// The edge channel was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ParentOrErr() (*Message, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: message.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) RepliesOrErr() ([]*Message, error) {
	if e.loadedTypes[3] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// TextMessageOrErr returns the TextMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) TextMessageOrErr() (*TextMessage, error) {
	if e.loadedTypes[4] {
		if e.TextMessage == nil {
			// The edge text_message was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: textmessage.Label}
		}
		return e.TextMessage, nil
	}
	return nil, &NotLoadedError{edge: "text_message"}
}

// FileMessageOrErr returns the FileMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) FileMessageOrErr() (*FileMessage, error) {
	if e.loadedTypes[5] {
		if e.FileMessage == nil {
			// The edge file_message was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: filemessage.Label}
		}
		return e.FileMessage, nil
	}
	return nil, &NotLoadedError{edge: "file_message"}
}

// EmbedMessageOrErr returns the EmbedMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) EmbedMessageOrErr() (*EmbedMessage, error) {
	if e.loadedTypes[6] {
		if e.EmbedMessage == nil {
			// The edge embed_message was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: embedmessage.Label}
		}
		return e.EmbedMessage, nil
	}
	return nil, &NotLoadedError{edge: "embed_message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldActions, message.FieldMetadata, message.FieldOverrides:
			values[i] = &[]byte{}
		case message.FieldID:
			values[i] = &sql.NullInt64{}
		case message.FieldCreatedat, message.FieldEditedat:
			values[i] = &sql.NullTime{}
		case message.ForeignKeys[0]: // channel_message
			values[i] = &sql.NullInt64{}
		case message.ForeignKeys[1]: // message_replies
			values[i] = &sql.NullInt64{}
		case message.ForeignKeys[2]: // message_file_message
			values[i] = &sql.NullInt64{}
		case message.ForeignKeys[3]: // user_message
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = uint64(value.Int64)
		case message.FieldCreatedat:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdat", values[i])
			} else if value.Valid {
				m.Createdat = value.Time
			}
		case message.FieldEditedat:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field editedat", values[i])
			} else if value.Valid {
				m.Editedat = value.Time
			}
		case message.FieldActions:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field actions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Actions); err != nil {
					return fmt.Errorf("unmarshal field actions: %w", err)
				}
			}
		case message.FieldMetadata:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case message.FieldOverrides:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field overrides", values[i])
			} else if value != nil {
				m.Overrides = *value
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field channel_message", value)
			} else if value.Valid {
				m.channel_message = new(uint64)
				*m.channel_message = uint64(value.Int64)
			}
		case message.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_replies", value)
			} else if value.Valid {
				m.message_replies = new(uint64)
				*m.message_replies = uint64(value.Int64)
			}
		case message.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_file_message", value)
			} else if value.Valid {
				m.message_file_message = new(int)
				*m.message_file_message = int(value.Int64)
			}
		case message.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_message", value)
			} else if value.Valid {
				m.user_message = new(uint64)
				*m.user_message = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Message entity.
func (m *Message) QueryUser() *UserQuery {
	return (&MessageClient{config: m.config}).QueryUser(m)
}

// QueryChannel queries the "channel" edge of the Message entity.
func (m *Message) QueryChannel() *ChannelQuery {
	return (&MessageClient{config: m.config}).QueryChannel(m)
}

// QueryParent queries the "parent" edge of the Message entity.
func (m *Message) QueryParent() *MessageQuery {
	return (&MessageClient{config: m.config}).QueryParent(m)
}

// QueryReplies queries the "replies" edge of the Message entity.
func (m *Message) QueryReplies() *MessageQuery {
	return (&MessageClient{config: m.config}).QueryReplies(m)
}

// QueryTextMessage queries the "text_message" edge of the Message entity.
func (m *Message) QueryTextMessage() *TextMessageQuery {
	return (&MessageClient{config: m.config}).QueryTextMessage(m)
}

// QueryFileMessage queries the "file_message" edge of the Message entity.
func (m *Message) QueryFileMessage() *FileMessageQuery {
	return (&MessageClient{config: m.config}).QueryFileMessage(m)
}

// QueryEmbedMessage queries the "embed_message" edge of the Message entity.
func (m *Message) QueryEmbedMessage() *EmbedMessageQuery {
	return (&MessageClient{config: m.config}).QueryEmbedMessage(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Message is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", createdat=")
	builder.WriteString(m.Createdat.Format(time.ANSIC))
	builder.WriteString(", editedat=")
	builder.WriteString(m.Editedat.Format(time.ANSIC))
	builder.WriteString(", actions=")
	builder.WriteString(fmt.Sprintf("%v", m.Actions))
	builder.WriteString(", metadata=")
	builder.WriteString(fmt.Sprintf("%v", m.Metadata))
	builder.WriteString(", overrides=")
	builder.WriteString(fmt.Sprintf("%v", m.Overrides))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
