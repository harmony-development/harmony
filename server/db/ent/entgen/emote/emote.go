// Code generated by entc, DO NOT EDIT.

package emote

const (
	// Label holds the string label denoting the emote type in the database.
	Label = "emote"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeEmotepack holds the string denoting the emotepack edge name in mutations.
	EdgeEmotepack = "emotepack"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// Table holds the table name of the emote in the database.
	Table = "emotes"
	// EmotepackTable is the table the holds the emotepack relation/edge.
	EmotepackTable = "emotes"
	// EmotepackInverseTable is the table name for the EmotePack entity.
	// It exists in this package in order to avoid circular dependency with the "emotepack" package.
	EmotepackInverseTable = "emote_packs"
	// EmotepackColumn is the table column denoting the emotepack relation/edge.
	EmotepackColumn = "emote_pack_emote"
	// FileTable is the table the holds the file relation/edge.
	FileTable = "files"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "emote_file"
)

// Columns holds all SQL columns for emote fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "emotes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"emote_pack_emote",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
