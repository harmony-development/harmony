// Code generated by sqlc. DO NOT EDIT.
// source: guilds.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const addAttachment = `-- name: AddAttachment :exec
INSERT INTO Attachments(Message_ID, Attachment_URL)
VALUES ($1, $2)
`

type AddAttachmentParams struct {
	MessageID     int64  `json:"message_id"`
	AttachmentUrl string `json:"attachment_url"`
}

func (q *Queries) AddAttachment(ctx context.Context, arg AddAttachmentParams) error {
	_, err := q.exec(ctx, q.addAttachmentStmt, addAttachment, arg.MessageID, arg.AttachmentUrl)
	return err
}

const addMessage = `-- name: AddMessage :one
INSERT INTO Messages(Message_ID, Guild_ID, Channel_ID, User_ID, Created_At, Edited_At, Content)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING message_id, guild_id, channel_id, user_id, created_at, edited_at, content
`

type AddMessageParams struct {
	MessageID int64        `json:"message_id"`
	GuildID   int64        `json:"guild_id"`
	ChannelID int64        `json:"channel_id"`
	UserID    int64        `json:"user_id"`
	CreatedAt time.Time    `json:"created_at"`
	EditedAt  sql.NullTime `json:"edited_at"`
	Content   string       `json:"content"`
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.addMessageStmt, addMessage,
		arg.MessageID,
		arg.GuildID,
		arg.ChannelID,
		arg.UserID,
		arg.CreatedAt,
		arg.EditedAt,
		arg.Content,
	)
	var i Message
	err := row.Scan(
		&i.MessageID,
		&i.GuildID,
		&i.ChannelID,
		&i.UserID,
		&i.CreatedAt,
		&i.EditedAt,
		&i.Content,
	)
	return i, err
}

const addUserToGuild = `-- name: AddUserToGuild :exec
INSERT INTO Guild_Members (User_ID, Guild_ID)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddUserToGuildParams struct {
	UserID  int64 `json:"user_id"`
	GuildID int64 `json:"guild_id"`
}

func (q *Queries) AddUserToGuild(ctx context.Context, arg AddUserToGuildParams) error {
	_, err := q.exec(ctx, q.addUserToGuildStmt, addUserToGuild, arg.UserID, arg.GuildID)
	return err
}

const createChannel = `-- name: CreateChannel :one
INSERT INTO Channels (Guild_ID, Channel_Name)
VALUES ($1, $2)
RETURNING channel_id, guild_id, channel_name
`

type CreateChannelParams struct {
	GuildID     sql.NullInt64 `json:"guild_id"`
	ChannelName string        `json:"channel_name"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.queryRow(ctx, q.createChannelStmt, createChannel, arg.GuildID, arg.ChannelName)
	var i Channel
	err := row.Scan(&i.ChannelID, &i.GuildID, &i.ChannelName)
	return i, err
}

const createGuild = `-- name: CreateGuild :one
INSERT INTO Guilds (Owner_ID, Guild_Name, Picture_URL)
VALUES ($1, $2, $3)
RETURNING guild_id, owner_id, guild_name, picture_url
`

type CreateGuildParams struct {
	OwnerID    int64  `json:"owner_id"`
	GuildName  string `json:"guild_name"`
	PictureUrl string `json:"picture_url"`
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (Guild, error) {
	row := q.queryRow(ctx, q.createGuildStmt, createGuild, arg.OwnerID, arg.GuildName, arg.PictureUrl)
	var i Guild
	err := row.Scan(
		&i.GuildID,
		&i.OwnerID,
		&i.GuildName,
		&i.PictureUrl,
	)
	return i, err
}

const createGuildInvite = `-- name: CreateGuildInvite :one
INSERT INTO Invites (Name, Possible_Uses, Guild_ID)
VALUES ($1, $2, $3)
RETURNING invite_id, name, uses, possible_uses, guild_id
`

type CreateGuildInviteParams struct {
	Name         string        `json:"name"`
	PossibleUses sql.NullInt32 `json:"possible_uses"`
	GuildID      int64         `json:"guild_id"`
}

func (q *Queries) CreateGuildInvite(ctx context.Context, arg CreateGuildInviteParams) (Invite, error) {
	row := q.queryRow(ctx, q.createGuildInviteStmt, createGuildInvite, arg.Name, arg.PossibleUses, arg.GuildID)
	var i Invite
	err := row.Scan(
		&i.InviteID,
		&i.Name,
		&i.Uses,
		&i.PossibleUses,
		&i.GuildID,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE
FROM Channels
WHERE Guild_ID = $1
  AND Channel_ID = $2
`

type DeleteChannelParams struct {
	GuildID   sql.NullInt64 `json:"guild_id"`
	ChannelID int64         `json:"channel_id"`
}

func (q *Queries) DeleteChannel(ctx context.Context, arg DeleteChannelParams) error {
	_, err := q.exec(ctx, q.deleteChannelStmt, deleteChannel, arg.GuildID, arg.ChannelID)
	return err
}

const deleteGuild = `-- name: DeleteGuild :exec
DELETE
FROM Guilds
WHERE Guild_ID = $1
`

func (q *Queries) DeleteGuild(ctx context.Context, guildID int64) error {
	_, err := q.exec(ctx, q.deleteGuildStmt, deleteGuild, guildID)
	return err
}

const deleteInvite = `-- name: DeleteInvite :execrows
DELETE
FROM Invites
WHERE Invite_ID = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, inviteID int64) (int64, error) {
	result, err := q.exec(ctx, q.deleteInviteStmt, deleteInvite, inviteID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteMessage = `-- name: DeleteMessage :execrows
DELETE
FROM Messages
WHERE Message_ID = $1
  AND Channel_ID = $2
  AND Guild_ID = $3
`

type DeleteMessageParams struct {
	MessageID int64 `json:"message_id"`
	ChannelID int64 `json:"channel_id"`
	GuildID   int64 `json:"guild_id"`
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteMessageStmt, deleteMessage, arg.MessageID, arg.ChannelID, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAttachments = `-- name: GetAttachments :many
SELECT Attachment_URL
FROM Attachments
WHERE Message_ID = $1
`

func (q *Queries) GetAttachments(ctx context.Context, messageID int64) ([]string, error) {
	rows, err := q.query(ctx, q.getAttachmentsStmt, getAttachments, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var attachment_url string
		if err := rows.Scan(&attachment_url); err != nil {
			return nil, err
		}
		items = append(items, attachment_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildOwner = `-- name: GetGuildOwner :one
SELECT Owner_ID
from GUILDS
WHERE Guild_ID = $1
`

func (q *Queries) GetGuildOwner(ctx context.Context, guildID int64) (int64, error) {
	row := q.queryRow(ctx, q.getGuildOwnerStmt, getGuildOwner, guildID)
	var owner_id int64
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getMessageAuthor = `-- name: GetMessageAuthor :one
SELECT User_ID
FROM Messages
WHERE Message_ID = $1
`

func (q *Queries) GetMessageAuthor(ctx context.Context, messageID int64) (int64, error) {
	row := q.queryRow(ctx, q.getMessageAuthorStmt, getMessageAuthor, messageID)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getMessageDate = `-- name: GetMessageDate :one
SELECT Created_At
FROM Messages
WHERE Message_ID = $1
`

func (q *Queries) GetMessageDate(ctx context.Context, messageID int64) (time.Time, error) {
	row := q.queryRow(ctx, q.getMessageDateStmt, getMessageDate, messageID)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const getMessages = `-- name: GetMessages :many
SELECT Message_ID, User_ID, Content, Created_At
FROM Messages
WHERE Guild_ID = $1
  AND Channel_ID = $2
  AND Created_At < $3
ORDER BY Created_At DESC
LIMIT $4
`

type GetMessagesParams struct {
	Guildid   int64     `json:"guildid"`
	Channelid int64     `json:"channelid"`
	Before    time.Time `json:"before"`
	Max       int32     `json:"max"`
}

type GetMessagesRow struct {
	MessageID int64     `json:"message_id"`
	UserID    int64     `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]GetMessagesRow, error) {
	rows, err := q.query(ctx, q.getMessagesStmt, getMessages,
		arg.Guildid,
		arg.Channelid,
		arg.Before,
		arg.Max,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesRow
	for rows.Next() {
		var i GetMessagesRow
		if err := rows.Scan(
			&i.MessageID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementInvite = `-- name: IncrementInvite :exec
UPDATE Invites
SET Uses=Uses + 1
WHERe Invite_ID = $1
`

func (q *Queries) IncrementInvite(ctx context.Context, inviteID int64) error {
	_, err := q.exec(ctx, q.incrementInviteStmt, incrementInvite, inviteID)
	return err
}

const resolveGuildID = `-- name: ResolveGuildID :one
SELECT Guild_ID
FROM Invites
WHERE Invite_ID = $1
`

func (q *Queries) ResolveGuildID(ctx context.Context, inviteID int64) (int64, error) {
	row := q.queryRow(ctx, q.resolveGuildIDStmt, resolveGuildID, inviteID)
	var guild_id int64
	err := row.Scan(&guild_id)
	return guild_id, err
}

const sessionToUserID = `-- name: SessionToUserID :one
SELECT User_ID
FROM Sessions
WHERE Session = $1
`

func (q *Queries) SessionToUserID(ctx context.Context, session string) (int64, error) {
	row := q.queryRow(ctx, q.sessionToUserIDStmt, sessionToUserID, session)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const userInGuild = `-- name: UserInGuild :one
SELECT User_ID
FROM Guild_Members
WHERE User_ID = $1
  AND Guild_ID = $2
`

type UserInGuildParams struct {
	UserID  int64 `json:"user_id"`
	GuildID int64 `json:"guild_id"`
}

func (q *Queries) UserInGuild(ctx context.Context, arg UserInGuildParams) (int64, error) {
	row := q.queryRow(ctx, q.userInGuildStmt, userInGuild, arg.UserID, arg.GuildID)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}
