// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"
	"sync"
	"time"

	v1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	"github.com/harmony-development/legato/server/db/ent/entgen/channel"
	"github.com/harmony-development/legato/server/db/ent/entgen/emote"
	"github.com/harmony-development/legato/server/db/ent/entgen/emotepack"
	"github.com/harmony-development/legato/server/db/ent/entgen/file"
	"github.com/harmony-development/legato/server/db/ent/entgen/filehash"
	"github.com/harmony-development/legato/server/db/ent/entgen/foreignuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/guild"
	"github.com/harmony-development/legato/server/db/ent/entgen/invite"
	"github.com/harmony-development/legato/server/db/ent/entgen/localuser"
	"github.com/harmony-development/legato/server/db/ent/entgen/message"
	"github.com/harmony-development/legato/server/db/ent/entgen/permission"
	"github.com/harmony-development/legato/server/db/ent/entgen/predicate"
	"github.com/harmony-development/legato/server/db/ent/entgen/profile"
	"github.com/harmony-development/legato/server/db/ent/entgen/role"
	"github.com/harmony-development/legato/server/db/ent/entgen/session"
	"github.com/harmony-development/legato/server/db/ent/entgen/textmessage"
	"github.com/harmony-development/legato/server/db/ent/entgen/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChannel      = "Channel"
	TypeEmbedMessage = "EmbedMessage"
	TypeEmote        = "Emote"
	TypeEmotePack    = "EmotePack"
	TypeFile         = "File"
	TypeFileHash     = "FileHash"
	TypeFileMessage  = "FileMessage"
	TypeForeignUser  = "ForeignUser"
	TypeGuild        = "Guild"
	TypeInvite       = "Invite"
	TypeLocalUser    = "LocalUser"
	TypeMessage      = "Message"
	TypePermission   = "Permission"
	TypeProfile      = "Profile"
	TypeRole         = "Role"
	TypeSession      = "Session"
	TypeTextMessage  = "TextMessage"
	TypeUser         = "User"
)

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	name           *string
	kind           *uint64
	addkind        *uint64
	position       *string
	metadata       *[]byte
	clearedFields  map[string]struct{}
	guild          *uint64
	clearedguild   bool
	message        map[uint64]struct{}
	removedmessage map[uint64]struct{}
	clearedmessage bool
	done           bool
	oldValue       func(context.Context) (*Channel, error)
	predicates     []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id uint64) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChannelMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChannelMutation) ResetName() {
	m.name = nil
}

// SetKind sets the "kind" field.
func (m *ChannelMutation) SetKind(u uint64) {
	m.kind = &u
	m.addkind = nil
}

// Kind returns the value of the "kind" field in the mutation.
func (m *ChannelMutation) Kind() (r uint64, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldKind(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// AddKind adds u to the "kind" field.
func (m *ChannelMutation) AddKind(u uint64) {
	if m.addkind != nil {
		*m.addkind += u
	} else {
		m.addkind = &u
	}
}

// AddedKind returns the value that was added to the "kind" field in this mutation.
func (m *ChannelMutation) AddedKind() (r uint64, exists bool) {
	v := m.addkind
	if v == nil {
		return
	}
	return *v, true
}

// ResetKind resets all changes to the "kind" field.
func (m *ChannelMutation) ResetKind() {
	m.kind = nil
	m.addkind = nil
}

// SetPosition sets the "position" field.
func (m *ChannelMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *ChannelMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *ChannelMutation) ResetPosition() {
	m.position = nil
}

// SetMetadata sets the "metadata" field.
func (m *ChannelMutation) SetMetadata(b []byte) {
	m.metadata = &b
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *ChannelMutation) Metadata() (r []byte, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldMetadata(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *ChannelMutation) ResetMetadata() {
	m.metadata = nil
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *ChannelMutation) SetGuildID(id uint64) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *ChannelMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *ChannelMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *ChannelMutation) GuildID() (id uint64, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *ChannelMutation) GuildIDs() (ids []uint64) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *ChannelMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// AddMessageIDs adds the "message" edge to the Message entity by ids.
func (m *ChannelMutation) AddMessageIDs(ids ...uint64) {
	if m.message == nil {
		m.message = make(map[uint64]struct{})
	}
	for i := range ids {
		m.message[ids[i]] = struct{}{}
	}
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *ChannelMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *ChannelMutation) MessageCleared() bool {
	return m.clearedmessage
}

// RemoveMessageIDs removes the "message" edge to the Message entity by IDs.
func (m *ChannelMutation) RemoveMessageIDs(ids ...uint64) {
	if m.removedmessage == nil {
		m.removedmessage = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedmessage[ids[i]] = struct{}{}
	}
}

// RemovedMessage returns the removed IDs of the "message" edge to the Message entity.
func (m *ChannelMutation) RemovedMessageIDs() (ids []uint64) {
	for id := range m.removedmessage {
		ids = append(ids, id)
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
func (m *ChannelMutation) MessageIDs() (ids []uint64) {
	for id := range m.message {
		ids = append(ids, id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *ChannelMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
	m.removedmessage = nil
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, channel.FieldName)
	}
	if m.kind != nil {
		fields = append(fields, channel.FieldKind)
	}
	if m.position != nil {
		fields = append(fields, channel.FieldPosition)
	}
	if m.metadata != nil {
		fields = append(fields, channel.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldName:
		return m.Name()
	case channel.FieldKind:
		return m.Kind()
	case channel.FieldPosition:
		return m.Position()
	case channel.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldName:
		return m.OldName(ctx)
	case channel.FieldKind:
		return m.OldKind(ctx)
	case channel.FieldPosition:
		return m.OldPosition(ctx)
	case channel.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case channel.FieldKind:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case channel.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case channel.FieldMetadata:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	var fields []string
	if m.addkind != nil {
		fields = append(fields, channel.FieldKind)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldKind:
		return m.AddedKind()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case channel.FieldKind:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKind(v)
		return nil
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldName:
		m.ResetName()
		return nil
	case channel.FieldKind:
		m.ResetKind()
		return nil
	case channel.FieldPosition:
		m.ResetPosition()
		return nil
	case channel.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.guild != nil {
		edges = append(edges, channel.EdgeGuild)
	}
	if m.message != nil {
		edges = append(edges, channel.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	case channel.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.message))
		for id := range m.message {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmessage != nil {
		edges = append(edges, channel.EdgeMessage)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.removedmessage))
		for id := range m.removedmessage {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedguild {
		edges = append(edges, channel.EdgeGuild)
	}
	if m.clearedmessage {
		edges = append(edges, channel.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeGuild:
		return m.clearedguild
	case channel.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	case channel.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeGuild:
		m.ResetGuild()
		return nil
	case channel.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// EmbedMessageMutation represents an operation that mutates the EmbedMessage nodes in the graph.
type EmbedMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EmbedMessage, error)
	predicates    []predicate.EmbedMessage
}

var _ ent.Mutation = (*EmbedMessageMutation)(nil)

// embedmessageOption allows management of the mutation configuration using functional options.
type embedmessageOption func(*EmbedMessageMutation)

// newEmbedMessageMutation creates new mutation for the EmbedMessage entity.
func newEmbedMessageMutation(c config, op Op, opts ...embedmessageOption) *EmbedMessageMutation {
	m := &EmbedMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeEmbedMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmbedMessageID sets the ID field of the mutation.
func withEmbedMessageID(id int) embedmessageOption {
	return func(m *EmbedMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *EmbedMessage
		)
		m.oldValue = func(ctx context.Context) (*EmbedMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmbedMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmbedMessage sets the old EmbedMessage of the mutation.
func withEmbedMessage(node *EmbedMessage) embedmessageOption {
	return func(m *EmbedMessageMutation) {
		m.oldValue = func(context.Context) (*EmbedMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmbedMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmbedMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmbedMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Op returns the operation name.
func (m *EmbedMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmbedMessage).
func (m *EmbedMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmbedMessageMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmbedMessageMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmbedMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown EmbedMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmbedMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmbedMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmbedMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbedMessageMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown EmbedMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmbedMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmbedMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmbedMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmbedMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmbedMessageMutation) ResetField(name string) error {
	return fmt.Errorf("unknown EmbedMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmbedMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmbedMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmbedMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmbedMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmbedMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmbedMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmbedMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmbedMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmbedMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmbedMessage edge %s", name)
}

// EmoteMutation represents an operation that mutates the Emote nodes in the graph.
type EmoteMutation struct {
	config
	op               Op
	typ              string
	id               *string
	name             *string
	clearedFields    map[string]struct{}
	emotepack        *uint64
	clearedemotepack bool
	done             bool
	oldValue         func(context.Context) (*Emote, error)
	predicates       []predicate.Emote
}

var _ ent.Mutation = (*EmoteMutation)(nil)

// emoteOption allows management of the mutation configuration using functional options.
type emoteOption func(*EmoteMutation)

// newEmoteMutation creates new mutation for the Emote entity.
func newEmoteMutation(c config, op Op, opts ...emoteOption) *EmoteMutation {
	m := &EmoteMutation{
		config:        c,
		op:            op,
		typ:           TypeEmote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmoteID sets the ID field of the mutation.
func withEmoteID(id string) emoteOption {
	return func(m *EmoteMutation) {
		var (
			err   error
			once  sync.Once
			value *Emote
		)
		m.oldValue = func(ctx context.Context) (*Emote, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Emote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmote sets the old Emote of the mutation.
func withEmote(node *Emote) emoteOption {
	return func(m *EmoteMutation) {
		m.oldValue = func(context.Context) (*Emote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Emote entities.
func (m *EmoteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmoteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *EmoteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmoteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Emote entity.
// If the Emote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmoteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmoteMutation) ResetName() {
	m.name = nil
}

// SetEmotepackID sets the "emotepack" edge to the EmotePack entity by id.
func (m *EmoteMutation) SetEmotepackID(id uint64) {
	m.emotepack = &id
}

// ClearEmotepack clears the "emotepack" edge to the EmotePack entity.
func (m *EmoteMutation) ClearEmotepack() {
	m.clearedemotepack = true
}

// EmotepackCleared returns if the "emotepack" edge to the EmotePack entity was cleared.
func (m *EmoteMutation) EmotepackCleared() bool {
	return m.clearedemotepack
}

// EmotepackID returns the "emotepack" edge ID in the mutation.
func (m *EmoteMutation) EmotepackID() (id uint64, exists bool) {
	if m.emotepack != nil {
		return *m.emotepack, true
	}
	return
}

// EmotepackIDs returns the "emotepack" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmotepackID instead. It exists only for internal usage by the builders.
func (m *EmoteMutation) EmotepackIDs() (ids []uint64) {
	if id := m.emotepack; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmotepack resets all changes to the "emotepack" edge.
func (m *EmoteMutation) ResetEmotepack() {
	m.emotepack = nil
	m.clearedemotepack = false
}

// Op returns the operation name.
func (m *EmoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Emote).
func (m *EmoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmoteMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, emote.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emote.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emote.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Emote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emote.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Emote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Emote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Emote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmoteMutation) ResetField(name string) error {
	switch name {
	case emote.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Emote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.emotepack != nil {
		edges = append(edges, emote.EdgeEmotepack)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emote.EdgeEmotepack:
		if id := m.emotepack; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmoteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedemotepack {
		edges = append(edges, emote.EdgeEmotepack)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmoteMutation) EdgeCleared(name string) bool {
	switch name {
	case emote.EdgeEmotepack:
		return m.clearedemotepack
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmoteMutation) ClearEdge(name string) error {
	switch name {
	case emote.EdgeEmotepack:
		m.ClearEmotepack()
		return nil
	}
	return fmt.Errorf("unknown Emote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmoteMutation) ResetEdge(name string) error {
	switch name {
	case emote.EdgeEmotepack:
		m.ResetEmotepack()
		return nil
	}
	return fmt.Errorf("unknown Emote edge %s", name)
}

// EmotePackMutation represents an operation that mutates the EmotePack nodes in the graph.
type EmotePackMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	name          *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	owner         *uint64
	clearedowner  bool
	emote         map[string]struct{}
	removedemote  map[string]struct{}
	clearedemote  bool
	done          bool
	oldValue      func(context.Context) (*EmotePack, error)
	predicates    []predicate.EmotePack
}

var _ ent.Mutation = (*EmotePackMutation)(nil)

// emotepackOption allows management of the mutation configuration using functional options.
type emotepackOption func(*EmotePackMutation)

// newEmotePackMutation creates new mutation for the EmotePack entity.
func newEmotePackMutation(c config, op Op, opts ...emotepackOption) *EmotePackMutation {
	m := &EmotePackMutation{
		config:        c,
		op:            op,
		typ:           TypeEmotePack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmotePackID sets the ID field of the mutation.
func withEmotePackID(id uint64) emotepackOption {
	return func(m *EmotePackMutation) {
		var (
			err   error
			once  sync.Once
			value *EmotePack
		)
		m.oldValue = func(ctx context.Context) (*EmotePack, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmotePack.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmotePack sets the old EmotePack of the mutation.
func withEmotePack(node *EmotePack) emotepackOption {
	return func(m *EmotePackMutation) {
		m.oldValue = func(context.Context) (*EmotePack, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmotePackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmotePackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmotePack entities.
func (m *EmotePackMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *EmotePackMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *EmotePackMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmotePackMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the EmotePack entity.
// If the EmotePack object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmotePackMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmotePackMutation) ResetName() {
	m.name = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *EmotePackMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *EmotePackMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *EmotePackMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *EmotePackMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EmotePackMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EmotePackMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *EmotePackMutation) SetOwnerID(id uint64) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *EmotePackMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the "owner" edge to the User entity was cleared.
func (m *EmotePackMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *EmotePackMutation) OwnerID() (id uint64, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EmotePackMutation) OwnerIDs() (ids []uint64) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EmotePackMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddEmoteIDs adds the "emote" edge to the Emote entity by ids.
func (m *EmotePackMutation) AddEmoteIDs(ids ...string) {
	if m.emote == nil {
		m.emote = make(map[string]struct{})
	}
	for i := range ids {
		m.emote[ids[i]] = struct{}{}
	}
}

// ClearEmote clears the "emote" edge to the Emote entity.
func (m *EmotePackMutation) ClearEmote() {
	m.clearedemote = true
}

// EmoteCleared returns if the "emote" edge to the Emote entity was cleared.
func (m *EmotePackMutation) EmoteCleared() bool {
	return m.clearedemote
}

// RemoveEmoteIDs removes the "emote" edge to the Emote entity by IDs.
func (m *EmotePackMutation) RemoveEmoteIDs(ids ...string) {
	if m.removedemote == nil {
		m.removedemote = make(map[string]struct{})
	}
	for i := range ids {
		m.removedemote[ids[i]] = struct{}{}
	}
}

// RemovedEmote returns the removed IDs of the "emote" edge to the Emote entity.
func (m *EmotePackMutation) RemovedEmoteIDs() (ids []string) {
	for id := range m.removedemote {
		ids = append(ids, id)
	}
	return
}

// EmoteIDs returns the "emote" edge IDs in the mutation.
func (m *EmotePackMutation) EmoteIDs() (ids []string) {
	for id := range m.emote {
		ids = append(ids, id)
	}
	return
}

// ResetEmote resets all changes to the "emote" edge.
func (m *EmotePackMutation) ResetEmote() {
	m.emote = nil
	m.clearedemote = false
	m.removedemote = nil
}

// Op returns the operation name.
func (m *EmotePackMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EmotePack).
func (m *EmotePackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmotePackMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, emotepack.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmotePackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emotepack.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmotePackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emotepack.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown EmotePack field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmotePackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emotepack.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown EmotePack field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmotePackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmotePackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmotePackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmotePack numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmotePackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmotePackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmotePackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmotePack nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmotePackMutation) ResetField(name string) error {
	switch name {
	case emotepack.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown EmotePack field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmotePackMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, emotepack.EdgeUser)
	}
	if m.owner != nil {
		edges = append(edges, emotepack.EdgeOwner)
	}
	if m.emote != nil {
		edges = append(edges, emotepack.EdgeEmote)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmotePackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emotepack.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case emotepack.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case emotepack.EdgeEmote:
		ids := make([]ent.Value, 0, len(m.emote))
		for id := range m.emote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmotePackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedemote != nil {
		edges = append(edges, emotepack.EdgeEmote)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmotePackMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case emotepack.EdgeEmote:
		ids := make([]ent.Value, 0, len(m.removedemote))
		for id := range m.removedemote {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmotePackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, emotepack.EdgeUser)
	}
	if m.clearedowner {
		edges = append(edges, emotepack.EdgeOwner)
	}
	if m.clearedemote {
		edges = append(edges, emotepack.EdgeEmote)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmotePackMutation) EdgeCleared(name string) bool {
	switch name {
	case emotepack.EdgeUser:
		return m.cleareduser
	case emotepack.EdgeOwner:
		return m.clearedowner
	case emotepack.EdgeEmote:
		return m.clearedemote
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmotePackMutation) ClearEdge(name string) error {
	switch name {
	case emotepack.EdgeUser:
		m.ClearUser()
		return nil
	case emotepack.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown EmotePack unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmotePackMutation) ResetEdge(name string) error {
	switch name {
	case emotepack.EdgeUser:
		m.ResetUser()
		return nil
	case emotepack.EdgeOwner:
		m.ResetOwner()
		return nil
	case emotepack.EdgeEmote:
		m.ResetEmote()
		return nil
	}
	return fmt.Errorf("unknown EmotePack edge %s", name)
}

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op              Op
	typ             string
	id              *string
	name            *string
	contenttype     *string
	size            *int
	addsize         *int
	clearedFields   map[string]struct{}
	filehash        *int
	clearedfilehash bool
	done            bool
	oldValue        func(context.Context) (*File, error)
	predicates      []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id string) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of File entities.
func (m *FileMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FileMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetContenttype sets the "contenttype" field.
func (m *FileMutation) SetContenttype(s string) {
	m.contenttype = &s
}

// Contenttype returns the value of the "contenttype" field in the mutation.
func (m *FileMutation) Contenttype() (r string, exists bool) {
	v := m.contenttype
	if v == nil {
		return
	}
	return *v, true
}

// OldContenttype returns the old "contenttype" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldContenttype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContenttype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContenttype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContenttype: %w", err)
	}
	return oldValue.Contenttype, nil
}

// ResetContenttype resets all changes to the "contenttype" field.
func (m *FileMutation) ResetContenttype() {
	m.contenttype = nil
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *FileMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetFilehashID sets the "filehash" edge to the FileHash entity by id.
func (m *FileMutation) SetFilehashID(id int) {
	m.filehash = &id
}

// ClearFilehash clears the "filehash" edge to the FileHash entity.
func (m *FileMutation) ClearFilehash() {
	m.clearedfilehash = true
}

// FilehashCleared returns if the "filehash" edge to the FileHash entity was cleared.
func (m *FileMutation) FilehashCleared() bool {
	return m.clearedfilehash
}

// FilehashID returns the "filehash" edge ID in the mutation.
func (m *FileMutation) FilehashID() (id int, exists bool) {
	if m.filehash != nil {
		return *m.filehash, true
	}
	return
}

// FilehashIDs returns the "filehash" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FilehashID instead. It exists only for internal usage by the builders.
func (m *FileMutation) FilehashIDs() (ids []int) {
	if id := m.filehash; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFilehash resets all changes to the "filehash" edge.
func (m *FileMutation) ResetFilehash() {
	m.filehash = nil
	m.clearedfilehash = false
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.contenttype != nil {
		fields = append(fields, file.FieldContenttype)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldName:
		return m.Name()
	case file.FieldContenttype:
		return m.Contenttype()
	case file.FieldSize:
		return m.Size()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldContenttype:
		return m.OldContenttype(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldContenttype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContenttype(v)
		return nil
	case file.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldContenttype:
		m.ResetContenttype()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.filehash != nil {
		edges = append(edges, file.EdgeFilehash)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case file.EdgeFilehash:
		if id := m.filehash; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfilehash {
		edges = append(edges, file.EdgeFilehash)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	switch name {
	case file.EdgeFilehash:
		return m.clearedfilehash
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	switch name {
	case file.EdgeFilehash:
		m.ClearFilehash()
		return nil
	}
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	switch name {
	case file.EdgeFilehash:
		m.ResetFilehash()
		return nil
	}
	return fmt.Errorf("unknown File edge %s", name)
}

// FileHashMutation represents an operation that mutates the FileHash nodes in the graph.
type FileHashMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hash          *string
	clearedFields map[string]struct{}
	file          *string
	clearedfile   bool
	done          bool
	oldValue      func(context.Context) (*FileHash, error)
	predicates    []predicate.FileHash
}

var _ ent.Mutation = (*FileHashMutation)(nil)

// filehashOption allows management of the mutation configuration using functional options.
type filehashOption func(*FileHashMutation)

// newFileHashMutation creates new mutation for the FileHash entity.
func newFileHashMutation(c config, op Op, opts ...filehashOption) *FileHashMutation {
	m := &FileHashMutation{
		config:        c,
		op:            op,
		typ:           TypeFileHash,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileHashID sets the ID field of the mutation.
func withFileHashID(id int) filehashOption {
	return func(m *FileHashMutation) {
		var (
			err   error
			once  sync.Once
			value *FileHash
		)
		m.oldValue = func(ctx context.Context) (*FileHash, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileHash.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileHash sets the old FileHash of the mutation.
func withFileHash(node *FileHash) filehashOption {
	return func(m *FileHashMutation) {
		m.oldValue = func(context.Context) (*FileHash, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileHashMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileHashMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FileHashMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHash sets the "hash" field.
func (m *FileHashMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FileHashMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the FileHash entity.
// If the FileHash object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileHashMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FileHashMutation) ResetHash() {
	m.hash = nil
}

// SetFileID sets the "file" edge to the File entity by id.
func (m *FileHashMutation) SetFileID(id string) {
	m.file = &id
}

// ClearFile clears the "file" edge to the File entity.
func (m *FileHashMutation) ClearFile() {
	m.clearedfile = true
}

// FileCleared returns if the "file" edge to the File entity was cleared.
func (m *FileHashMutation) FileCleared() bool {
	return m.clearedfile
}

// FileID returns the "file" edge ID in the mutation.
func (m *FileHashMutation) FileID() (id string, exists bool) {
	if m.file != nil {
		return *m.file, true
	}
	return
}

// FileIDs returns the "file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileID instead. It exists only for internal usage by the builders.
func (m *FileHashMutation) FileIDs() (ids []string) {
	if id := m.file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFile resets all changes to the "file" edge.
func (m *FileHashMutation) ResetFile() {
	m.file = nil
	m.clearedfile = false
}

// Op returns the operation name.
func (m *FileHashMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileHash).
func (m *FileHashMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileHashMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.hash != nil {
		fields = append(fields, filehash.FieldHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileHashMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case filehash.FieldHash:
		return m.Hash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileHashMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case filehash.FieldHash:
		return m.OldHash(ctx)
	}
	return nil, fmt.Errorf("unknown FileHash field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileHashMutation) SetField(name string, value ent.Value) error {
	switch name {
	case filehash.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	}
	return fmt.Errorf("unknown FileHash field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileHashMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileHashMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileHashMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FileHash numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileHashMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileHashMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileHashMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileHash nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileHashMutation) ResetField(name string) error {
	switch name {
	case filehash.FieldHash:
		m.ResetHash()
		return nil
	}
	return fmt.Errorf("unknown FileHash field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileHashMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.file != nil {
		edges = append(edges, filehash.EdgeFile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileHashMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case filehash.EdgeFile:
		if id := m.file; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileHashMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileHashMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileHashMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfile {
		edges = append(edges, filehash.EdgeFile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileHashMutation) EdgeCleared(name string) bool {
	switch name {
	case filehash.EdgeFile:
		return m.clearedfile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileHashMutation) ClearEdge(name string) error {
	switch name {
	case filehash.EdgeFile:
		m.ClearFile()
		return nil
	}
	return fmt.Errorf("unknown FileHash unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileHashMutation) ResetEdge(name string) error {
	switch name {
	case filehash.EdgeFile:
		m.ResetFile()
		return nil
	}
	return fmt.Errorf("unknown FileHash edge %s", name)
}

// FileMessageMutation represents an operation that mutates the FileMessage nodes in the graph.
type FileMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FileMessage, error)
	predicates    []predicate.FileMessage
}

var _ ent.Mutation = (*FileMessageMutation)(nil)

// filemessageOption allows management of the mutation configuration using functional options.
type filemessageOption func(*FileMessageMutation)

// newFileMessageMutation creates new mutation for the FileMessage entity.
func newFileMessageMutation(c config, op Op, opts ...filemessageOption) *FileMessageMutation {
	m := &FileMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeFileMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileMessageID sets the ID field of the mutation.
func withFileMessageID(id int) filemessageOption {
	return func(m *FileMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *FileMessage
		)
		m.oldValue = func(ctx context.Context) (*FileMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileMessage sets the old FileMessage of the mutation.
func withFileMessage(node *FileMessage) filemessageOption {
	return func(m *FileMessageMutation) {
		m.oldValue = func(context.Context) (*FileMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FileMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Op returns the operation name.
func (m *FileMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileMessage).
func (m *FileMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMessageMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMessageMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown FileMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FileMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMessageMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown FileMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMessageMutation) ResetField(name string) error {
	return fmt.Errorf("unknown FileMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileMessage edge %s", name)
}

// ForeignUserMutation represents an operation that mutates the ForeignUser nodes in the graph.
type ForeignUserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	picture       *string
	host          *string
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*ForeignUser, error)
	predicates    []predicate.ForeignUser
}

var _ ent.Mutation = (*ForeignUserMutation)(nil)

// foreignuserOption allows management of the mutation configuration using functional options.
type foreignuserOption func(*ForeignUserMutation)

// newForeignUserMutation creates new mutation for the ForeignUser entity.
func newForeignUserMutation(c config, op Op, opts ...foreignuserOption) *ForeignUserMutation {
	m := &ForeignUserMutation{
		config:        c,
		op:            op,
		typ:           TypeForeignUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withForeignUserID sets the ID field of the mutation.
func withForeignUserID(id int) foreignuserOption {
	return func(m *ForeignUserMutation) {
		var (
			err   error
			once  sync.Once
			value *ForeignUser
		)
		m.oldValue = func(ctx context.Context) (*ForeignUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ForeignUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForeignUser sets the old ForeignUser of the mutation.
func withForeignUser(node *ForeignUser) foreignuserOption {
	return func(m *ForeignUserMutation) {
		m.oldValue = func(context.Context) (*ForeignUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ForeignUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ForeignUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ForeignUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *ForeignUserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ForeignUserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the ForeignUser entity.
// If the ForeignUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForeignUserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *ForeignUserMutation) ResetUsername() {
	m.username = nil
}

// SetPicture sets the "picture" field.
func (m *ForeignUserMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *ForeignUserMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the ForeignUser entity.
// If the ForeignUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForeignUserMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *ForeignUserMutation) ResetPicture() {
	m.picture = nil
}

// SetHost sets the "host" field.
func (m *ForeignUserMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *ForeignUserMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the ForeignUser entity.
// If the ForeignUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ForeignUserMutation) OldHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ResetHost resets all changes to the "host" field.
func (m *ForeignUserMutation) ResetHost() {
	m.host = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ForeignUserMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ForeignUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *ForeignUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ForeignUserMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ForeignUserMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ForeignUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *ForeignUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ForeignUser).
func (m *ForeignUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ForeignUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, foreignuser.FieldUsername)
	}
	if m.picture != nil {
		fields = append(fields, foreignuser.FieldPicture)
	}
	if m.host != nil {
		fields = append(fields, foreignuser.FieldHost)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ForeignUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case foreignuser.FieldUsername:
		return m.Username()
	case foreignuser.FieldPicture:
		return m.Picture()
	case foreignuser.FieldHost:
		return m.Host()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ForeignUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case foreignuser.FieldUsername:
		return m.OldUsername(ctx)
	case foreignuser.FieldPicture:
		return m.OldPicture(ctx)
	case foreignuser.FieldHost:
		return m.OldHost(ctx)
	}
	return nil, fmt.Errorf("unknown ForeignUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForeignUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case foreignuser.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case foreignuser.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case foreignuser.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	}
	return fmt.Errorf("unknown ForeignUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ForeignUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ForeignUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ForeignUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ForeignUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ForeignUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ForeignUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ForeignUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ForeignUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ForeignUserMutation) ResetField(name string) error {
	switch name {
	case foreignuser.FieldUsername:
		m.ResetUsername()
		return nil
	case foreignuser.FieldPicture:
		m.ResetPicture()
		return nil
	case foreignuser.FieldHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown ForeignUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ForeignUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, foreignuser.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ForeignUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foreignuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ForeignUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ForeignUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ForeignUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, foreignuser.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ForeignUserMutation) EdgeCleared(name string) bool {
	switch name {
	case foreignuser.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ForeignUserMutation) ClearEdge(name string) error {
	switch name {
	case foreignuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ForeignUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ForeignUserMutation) ResetEdge(name string) error {
	switch name {
	case foreignuser.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ForeignUser edge %s", name)
}

// GuildMutation represents an operation that mutates the Guild nodes in the graph.
type GuildMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	owner          *uint64
	addowner       *uint64
	name           *string
	picture        *string
	metadata       *[]byte
	clearedFields  map[string]struct{}
	invite         map[int]struct{}
	removedinvite  map[int]struct{}
	clearedinvite  bool
	bans           map[uint64]struct{}
	removedbans    map[uint64]struct{}
	clearedbans    bool
	channel        map[uint64]struct{}
	removedchannel map[uint64]struct{}
	clearedchannel bool
	user           map[uint64]struct{}
	removeduser    map[uint64]struct{}
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Guild, error)
	predicates     []predicate.Guild
}

var _ ent.Mutation = (*GuildMutation)(nil)

// guildOption allows management of the mutation configuration using functional options.
type guildOption func(*GuildMutation)

// newGuildMutation creates new mutation for the Guild entity.
func newGuildMutation(c config, op Op, opts ...guildOption) *GuildMutation {
	m := &GuildMutation{
		config:        c,
		op:            op,
		typ:           TypeGuild,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildID sets the ID field of the mutation.
func withGuildID(id uint64) guildOption {
	return func(m *GuildMutation) {
		var (
			err   error
			once  sync.Once
			value *Guild
		)
		m.oldValue = func(ctx context.Context) (*Guild, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Guild.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuild sets the old Guild of the mutation.
func withGuild(node *Guild) guildOption {
	return func(m *GuildMutation) {
		m.oldValue = func(context.Context) (*Guild, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Guild entities.
func (m *GuildMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *GuildMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOwner sets the "owner" field.
func (m *GuildMutation) SetOwner(u uint64) {
	m.owner = &u
	m.addowner = nil
}

// Owner returns the value of the "owner" field in the mutation.
func (m *GuildMutation) Owner() (r uint64, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldOwner(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// AddOwner adds u to the "owner" field.
func (m *GuildMutation) AddOwner(u uint64) {
	if m.addowner != nil {
		*m.addowner += u
	} else {
		m.addowner = &u
	}
}

// AddedOwner returns the value that was added to the "owner" field in this mutation.
func (m *GuildMutation) AddedOwner() (r uint64, exists bool) {
	v := m.addowner
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwner resets all changes to the "owner" field.
func (m *GuildMutation) ResetOwner() {
	m.owner = nil
	m.addowner = nil
}

// SetName sets the "name" field.
func (m *GuildMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GuildMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GuildMutation) ResetName() {
	m.name = nil
}

// SetPicture sets the "picture" field.
func (m *GuildMutation) SetPicture(s string) {
	m.picture = &s
}

// Picture returns the value of the "picture" field in the mutation.
func (m *GuildMutation) Picture() (r string, exists bool) {
	v := m.picture
	if v == nil {
		return
	}
	return *v, true
}

// OldPicture returns the old "picture" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldPicture(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPicture is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPicture requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPicture: %w", err)
	}
	return oldValue.Picture, nil
}

// ResetPicture resets all changes to the "picture" field.
func (m *GuildMutation) ResetPicture() {
	m.picture = nil
}

// SetMetadata sets the "metadata" field.
func (m *GuildMutation) SetMetadata(b []byte) {
	m.metadata = &b
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *GuildMutation) Metadata() (r []byte, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldMetadata(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *GuildMutation) ResetMetadata() {
	m.metadata = nil
}

// AddInviteIDs adds the "invite" edge to the Invite entity by ids.
func (m *GuildMutation) AddInviteIDs(ids ...int) {
	if m.invite == nil {
		m.invite = make(map[int]struct{})
	}
	for i := range ids {
		m.invite[ids[i]] = struct{}{}
	}
}

// ClearInvite clears the "invite" edge to the Invite entity.
func (m *GuildMutation) ClearInvite() {
	m.clearedinvite = true
}

// InviteCleared returns if the "invite" edge to the Invite entity was cleared.
func (m *GuildMutation) InviteCleared() bool {
	return m.clearedinvite
}

// RemoveInviteIDs removes the "invite" edge to the Invite entity by IDs.
func (m *GuildMutation) RemoveInviteIDs(ids ...int) {
	if m.removedinvite == nil {
		m.removedinvite = make(map[int]struct{})
	}
	for i := range ids {
		m.removedinvite[ids[i]] = struct{}{}
	}
}

// RemovedInvite returns the removed IDs of the "invite" edge to the Invite entity.
func (m *GuildMutation) RemovedInviteIDs() (ids []int) {
	for id := range m.removedinvite {
		ids = append(ids, id)
	}
	return
}

// InviteIDs returns the "invite" edge IDs in the mutation.
func (m *GuildMutation) InviteIDs() (ids []int) {
	for id := range m.invite {
		ids = append(ids, id)
	}
	return
}

// ResetInvite resets all changes to the "invite" edge.
func (m *GuildMutation) ResetInvite() {
	m.invite = nil
	m.clearedinvite = false
	m.removedinvite = nil
}

// AddBanIDs adds the "bans" edge to the User entity by ids.
func (m *GuildMutation) AddBanIDs(ids ...uint64) {
	if m.bans == nil {
		m.bans = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bans[ids[i]] = struct{}{}
	}
}

// ClearBans clears the "bans" edge to the User entity.
func (m *GuildMutation) ClearBans() {
	m.clearedbans = true
}

// BansCleared returns if the "bans" edge to the User entity was cleared.
func (m *GuildMutation) BansCleared() bool {
	return m.clearedbans
}

// RemoveBanIDs removes the "bans" edge to the User entity by IDs.
func (m *GuildMutation) RemoveBanIDs(ids ...uint64) {
	if m.removedbans == nil {
		m.removedbans = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedbans[ids[i]] = struct{}{}
	}
}

// RemovedBans returns the removed IDs of the "bans" edge to the User entity.
func (m *GuildMutation) RemovedBansIDs() (ids []uint64) {
	for id := range m.removedbans {
		ids = append(ids, id)
	}
	return
}

// BansIDs returns the "bans" edge IDs in the mutation.
func (m *GuildMutation) BansIDs() (ids []uint64) {
	for id := range m.bans {
		ids = append(ids, id)
	}
	return
}

// ResetBans resets all changes to the "bans" edge.
func (m *GuildMutation) ResetBans() {
	m.bans = nil
	m.clearedbans = false
	m.removedbans = nil
}

// AddChannelIDs adds the "channel" edge to the Channel entity by ids.
func (m *GuildMutation) AddChannelIDs(ids ...uint64) {
	if m.channel == nil {
		m.channel = make(map[uint64]struct{})
	}
	for i := range ids {
		m.channel[ids[i]] = struct{}{}
	}
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *GuildMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared returns if the "channel" edge to the Channel entity was cleared.
func (m *GuildMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// RemoveChannelIDs removes the "channel" edge to the Channel entity by IDs.
func (m *GuildMutation) RemoveChannelIDs(ids ...uint64) {
	if m.removedchannel == nil {
		m.removedchannel = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedchannel[ids[i]] = struct{}{}
	}
}

// RemovedChannel returns the removed IDs of the "channel" edge to the Channel entity.
func (m *GuildMutation) RemovedChannelIDs() (ids []uint64) {
	for id := range m.removedchannel {
		ids = append(ids, id)
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
func (m *GuildMutation) ChannelIDs() (ids []uint64) {
	for id := range m.channel {
		ids = append(ids, id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *GuildMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
	m.removedchannel = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *GuildMutation) AddUserIDs(ids ...uint64) {
	if m.user == nil {
		m.user = make(map[uint64]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *GuildMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *GuildMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *GuildMutation) RemoveUserIDs(ids ...uint64) {
	if m.removeduser == nil {
		m.removeduser = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *GuildMutation) RemovedUserIDs() (ids []uint64) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *GuildMutation) UserIDs() (ids []uint64) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GuildMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// Op returns the operation name.
func (m *GuildMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Guild).
func (m *GuildMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.owner != nil {
		fields = append(fields, guild.FieldOwner)
	}
	if m.name != nil {
		fields = append(fields, guild.FieldName)
	}
	if m.picture != nil {
		fields = append(fields, guild.FieldPicture)
	}
	if m.metadata != nil {
		fields = append(fields, guild.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldOwner:
		return m.Owner()
	case guild.FieldName:
		return m.Name()
	case guild.FieldPicture:
		return m.Picture()
	case guild.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guild.FieldOwner:
		return m.OldOwner(ctx)
	case guild.FieldName:
		return m.OldName(ctx)
	case guild.FieldPicture:
		return m.OldPicture(ctx)
	case guild.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Guild field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guild.FieldOwner:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case guild.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case guild.FieldPicture:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPicture(v)
		return nil
	case guild.FieldMetadata:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildMutation) AddedFields() []string {
	var fields []string
	if m.addowner != nil {
		fields = append(fields, guild.FieldOwner)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldOwner:
		return m.AddedOwner()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildMutation) AddField(name string, value ent.Value) error {
	switch name {
	case guild.FieldOwner:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwner(v)
		return nil
	}
	return fmt.Errorf("unknown Guild numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Guild nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildMutation) ResetField(name string) error {
	switch name {
	case guild.FieldOwner:
		m.ResetOwner()
		return nil
	case guild.FieldName:
		m.ResetName()
		return nil
	case guild.FieldPicture:
		m.ResetPicture()
		return nil
	case guild.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.invite != nil {
		edges = append(edges, guild.EdgeInvite)
	}
	if m.bans != nil {
		edges = append(edges, guild.EdgeBans)
	}
	if m.channel != nil {
		edges = append(edges, guild.EdgeChannel)
	}
	if m.user != nil {
		edges = append(edges, guild.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guild.EdgeInvite:
		ids := make([]ent.Value, 0, len(m.invite))
		for id := range m.invite {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeBans:
		ids := make([]ent.Value, 0, len(m.bans))
		for id := range m.bans {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeChannel:
		ids := make([]ent.Value, 0, len(m.channel))
		for id := range m.channel {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedinvite != nil {
		edges = append(edges, guild.EdgeInvite)
	}
	if m.removedbans != nil {
		edges = append(edges, guild.EdgeBans)
	}
	if m.removedchannel != nil {
		edges = append(edges, guild.EdgeChannel)
	}
	if m.removeduser != nil {
		edges = append(edges, guild.EdgeUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guild.EdgeInvite:
		ids := make([]ent.Value, 0, len(m.removedinvite))
		for id := range m.removedinvite {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeBans:
		ids := make([]ent.Value, 0, len(m.removedbans))
		for id := range m.removedbans {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeChannel:
		ids := make([]ent.Value, 0, len(m.removedchannel))
		for id := range m.removedchannel {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedinvite {
		edges = append(edges, guild.EdgeInvite)
	}
	if m.clearedbans {
		edges = append(edges, guild.EdgeBans)
	}
	if m.clearedchannel {
		edges = append(edges, guild.EdgeChannel)
	}
	if m.cleareduser {
		edges = append(edges, guild.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildMutation) EdgeCleared(name string) bool {
	switch name {
	case guild.EdgeInvite:
		return m.clearedinvite
	case guild.EdgeBans:
		return m.clearedbans
	case guild.EdgeChannel:
		return m.clearedchannel
	case guild.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Guild unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildMutation) ResetEdge(name string) error {
	switch name {
	case guild.EdgeInvite:
		m.ResetInvite()
		return nil
	case guild.EdgeBans:
		m.ResetBans()
		return nil
	case guild.EdgeChannel:
		m.ResetChannel()
		return nil
	case guild.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Guild edge %s", name)
}

// InviteMutation represents an operation that mutates the Invite nodes in the graph.
type InviteMutation struct {
	config
	op               Op
	typ              string
	id               *int
	code             *string
	uses             *int64
	adduses          *int64
	possible_uses    *int64
	addpossible_uses *int64
	clearedFields    map[string]struct{}
	guild            *uint64
	clearedguild     bool
	done             bool
	oldValue         func(context.Context) (*Invite, error)
	predicates       []predicate.Invite
}

var _ ent.Mutation = (*InviteMutation)(nil)

// inviteOption allows management of the mutation configuration using functional options.
type inviteOption func(*InviteMutation)

// newInviteMutation creates new mutation for the Invite entity.
func newInviteMutation(c config, op Op, opts ...inviteOption) *InviteMutation {
	m := &InviteMutation{
		config:        c,
		op:            op,
		typ:           TypeInvite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInviteID sets the ID field of the mutation.
func withInviteID(id int) inviteOption {
	return func(m *InviteMutation) {
		var (
			err   error
			once  sync.Once
			value *Invite
		)
		m.oldValue = func(ctx context.Context) (*Invite, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invite.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvite sets the old Invite of the mutation.
func withInvite(node *Invite) inviteOption {
	return func(m *InviteMutation) {
		m.oldValue = func(context.Context) (*Invite, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InviteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InviteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *InviteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCode sets the "code" field.
func (m *InviteMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *InviteMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *InviteMutation) ResetCode() {
	m.code = nil
}

// SetUses sets the "uses" field.
func (m *InviteMutation) SetUses(i int64) {
	m.uses = &i
	m.adduses = nil
}

// Uses returns the value of the "uses" field in the mutation.
func (m *InviteMutation) Uses() (r int64, exists bool) {
	v := m.uses
	if v == nil {
		return
	}
	return *v, true
}

// OldUses returns the old "uses" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldUses(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUses: %w", err)
	}
	return oldValue.Uses, nil
}

// AddUses adds i to the "uses" field.
func (m *InviteMutation) AddUses(i int64) {
	if m.adduses != nil {
		*m.adduses += i
	} else {
		m.adduses = &i
	}
}

// AddedUses returns the value that was added to the "uses" field in this mutation.
func (m *InviteMutation) AddedUses() (r int64, exists bool) {
	v := m.adduses
	if v == nil {
		return
	}
	return *v, true
}

// ResetUses resets all changes to the "uses" field.
func (m *InviteMutation) ResetUses() {
	m.uses = nil
	m.adduses = nil
}

// SetPossibleUses sets the "possible_uses" field.
func (m *InviteMutation) SetPossibleUses(i int64) {
	m.possible_uses = &i
	m.addpossible_uses = nil
}

// PossibleUses returns the value of the "possible_uses" field in the mutation.
func (m *InviteMutation) PossibleUses() (r int64, exists bool) {
	v := m.possible_uses
	if v == nil {
		return
	}
	return *v, true
}

// OldPossibleUses returns the old "possible_uses" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldPossibleUses(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPossibleUses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPossibleUses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPossibleUses: %w", err)
	}
	return oldValue.PossibleUses, nil
}

// AddPossibleUses adds i to the "possible_uses" field.
func (m *InviteMutation) AddPossibleUses(i int64) {
	if m.addpossible_uses != nil {
		*m.addpossible_uses += i
	} else {
		m.addpossible_uses = &i
	}
}

// AddedPossibleUses returns the value that was added to the "possible_uses" field in this mutation.
func (m *InviteMutation) AddedPossibleUses() (r int64, exists bool) {
	v := m.addpossible_uses
	if v == nil {
		return
	}
	return *v, true
}

// ResetPossibleUses resets all changes to the "possible_uses" field.
func (m *InviteMutation) ResetPossibleUses() {
	m.possible_uses = nil
	m.addpossible_uses = nil
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *InviteMutation) SetGuildID(id uint64) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *InviteMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *InviteMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *InviteMutation) GuildID() (id uint64, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *InviteMutation) GuildIDs() (ids []uint64) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *InviteMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// Op returns the operation name.
func (m *InviteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Invite).
func (m *InviteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InviteMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.code != nil {
		fields = append(fields, invite.FieldCode)
	}
	if m.uses != nil {
		fields = append(fields, invite.FieldUses)
	}
	if m.possible_uses != nil {
		fields = append(fields, invite.FieldPossibleUses)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InviteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invite.FieldCode:
		return m.Code()
	case invite.FieldUses:
		return m.Uses()
	case invite.FieldPossibleUses:
		return m.PossibleUses()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InviteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invite.FieldCode:
		return m.OldCode(ctx)
	case invite.FieldUses:
		return m.OldUses(ctx)
	case invite.FieldPossibleUses:
		return m.OldPossibleUses(ctx)
	}
	return nil, fmt.Errorf("unknown Invite field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invite.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case invite.FieldUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUses(v)
		return nil
	case invite.FieldPossibleUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPossibleUses(v)
		return nil
	}
	return fmt.Errorf("unknown Invite field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InviteMutation) AddedFields() []string {
	var fields []string
	if m.adduses != nil {
		fields = append(fields, invite.FieldUses)
	}
	if m.addpossible_uses != nil {
		fields = append(fields, invite.FieldPossibleUses)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InviteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invite.FieldUses:
		return m.AddedUses()
	case invite.FieldPossibleUses:
		return m.AddedPossibleUses()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invite.FieldUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUses(v)
		return nil
	case invite.FieldPossibleUses:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPossibleUses(v)
		return nil
	}
	return fmt.Errorf("unknown Invite numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InviteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InviteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InviteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Invite nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InviteMutation) ResetField(name string) error {
	switch name {
	case invite.FieldCode:
		m.ResetCode()
		return nil
	case invite.FieldUses:
		m.ResetUses()
		return nil
	case invite.FieldPossibleUses:
		m.ResetPossibleUses()
		return nil
	}
	return fmt.Errorf("unknown Invite field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InviteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.guild != nil {
		edges = append(edges, invite.EdgeGuild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InviteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invite.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InviteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InviteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InviteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedguild {
		edges = append(edges, invite.EdgeGuild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InviteMutation) EdgeCleared(name string) bool {
	switch name {
	case invite.EdgeGuild:
		return m.clearedguild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InviteMutation) ClearEdge(name string) error {
	switch name {
	case invite.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown Invite unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InviteMutation) ResetEdge(name string) error {
	switch name {
	case invite.EdgeGuild:
		m.ResetGuild()
		return nil
	}
	return fmt.Errorf("unknown Invite edge %s", name)
}

// LocalUserMutation represents an operation that mutates the LocalUser nodes in the graph.
type LocalUserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	email           *string
	password        *[]byte
	clearedFields   map[string]struct{}
	user            *uint64
	cleareduser     bool
	sessions        map[int]struct{}
	removedsessions map[int]struct{}
	clearedsessions bool
	done            bool
	oldValue        func(context.Context) (*LocalUser, error)
	predicates      []predicate.LocalUser
}

var _ ent.Mutation = (*LocalUserMutation)(nil)

// localuserOption allows management of the mutation configuration using functional options.
type localuserOption func(*LocalUserMutation)

// newLocalUserMutation creates new mutation for the LocalUser entity.
func newLocalUserMutation(c config, op Op, opts ...localuserOption) *LocalUserMutation {
	m := &LocalUserMutation{
		config:        c,
		op:            op,
		typ:           TypeLocalUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocalUserID sets the ID field of the mutation.
func withLocalUserID(id int) localuserOption {
	return func(m *LocalUserMutation) {
		var (
			err   error
			once  sync.Once
			value *LocalUser
		)
		m.oldValue = func(ctx context.Context) (*LocalUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LocalUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocalUser sets the old LocalUser of the mutation.
func withLocalUser(node *LocalUser) localuserOption {
	return func(m *LocalUserMutation) {
		m.oldValue = func(context.Context) (*LocalUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocalUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocalUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *LocalUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the "email" field.
func (m *LocalUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *LocalUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the LocalUser entity.
// If the LocalUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *LocalUserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *LocalUserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *LocalUserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the LocalUser entity.
// If the LocalUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalUserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *LocalUserMutation) ResetPassword() {
	m.password = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *LocalUserMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *LocalUserMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *LocalUserMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *LocalUserMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LocalUserMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LocalUserMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *LocalUserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *LocalUserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared returns if the "sessions" edge to the Session entity was cleared.
func (m *LocalUserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *LocalUserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *LocalUserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *LocalUserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *LocalUserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// Op returns the operation name.
func (m *LocalUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LocalUser).
func (m *LocalUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocalUserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.email != nil {
		fields = append(fields, localuser.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, localuser.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocalUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case localuser.FieldEmail:
		return m.Email()
	case localuser.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocalUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case localuser.FieldEmail:
		return m.OldEmail(ctx)
	case localuser.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown LocalUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case localuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case localuser.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown LocalUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocalUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocalUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LocalUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocalUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocalUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocalUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LocalUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocalUserMutation) ResetField(name string) error {
	switch name {
	case localuser.FieldEmail:
		m.ResetEmail()
		return nil
	case localuser.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown LocalUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocalUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, localuser.EdgeUser)
	}
	if m.sessions != nil {
		edges = append(edges, localuser.EdgeSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocalUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case localuser.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case localuser.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocalUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsessions != nil {
		edges = append(edges, localuser.EdgeSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocalUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case localuser.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocalUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, localuser.EdgeUser)
	}
	if m.clearedsessions {
		edges = append(edges, localuser.EdgeSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocalUserMutation) EdgeCleared(name string) bool {
	switch name {
	case localuser.EdgeUser:
		return m.cleareduser
	case localuser.EdgeSessions:
		return m.clearedsessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocalUserMutation) ClearEdge(name string) error {
	switch name {
	case localuser.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown LocalUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocalUserMutation) ResetEdge(name string) error {
	switch name {
	case localuser.EdgeUser:
		m.ResetUser()
		return nil
	case localuser.EdgeSessions:
		m.ResetSessions()
		return nil
	}
	return fmt.Errorf("unknown LocalUser edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	createdat           *time.Time
	editedat            *time.Time
	actions             *[]*v1.Action
	metadata            **v1.Metadata
	overrides           *[]byte
	clearedFields       map[string]struct{}
	user                *uint64
	cleareduser         bool
	channel             *uint64
	clearedchannel      bool
	parent              *uint64
	clearedparent       bool
	replies             map[uint64]struct{}
	removedreplies      map[uint64]struct{}
	clearedreplies      bool
	textmessage         *int
	clearedtextmessage  bool
	filemessage         *int
	clearedfilemessage  bool
	embedmessage        *int
	clearedembedmessage bool
	done                bool
	oldValue            func(context.Context) (*Message, error)
	predicates          []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id uint64) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MessageMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedat sets the "createdat" field.
func (m *MessageMutation) SetCreatedat(t time.Time) {
	m.createdat = &t
}

// Createdat returns the value of the "createdat" field in the mutation.
func (m *MessageMutation) Createdat() (r time.Time, exists bool) {
	v := m.createdat
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedat returns the old "createdat" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreatedat(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedat: %w", err)
	}
	return oldValue.Createdat, nil
}

// ResetCreatedat resets all changes to the "createdat" field.
func (m *MessageMutation) ResetCreatedat() {
	m.createdat = nil
}

// SetEditedat sets the "editedat" field.
func (m *MessageMutation) SetEditedat(t time.Time) {
	m.editedat = &t
}

// Editedat returns the value of the "editedat" field in the mutation.
func (m *MessageMutation) Editedat() (r time.Time, exists bool) {
	v := m.editedat
	if v == nil {
		return
	}
	return *v, true
}

// OldEditedat returns the old "editedat" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldEditedat(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEditedat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEditedat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEditedat: %w", err)
	}
	return oldValue.Editedat, nil
}

// ClearEditedat clears the value of the "editedat" field.
func (m *MessageMutation) ClearEditedat() {
	m.editedat = nil
	m.clearedFields[message.FieldEditedat] = struct{}{}
}

// EditedatCleared returns if the "editedat" field was cleared in this mutation.
func (m *MessageMutation) EditedatCleared() bool {
	_, ok := m.clearedFields[message.FieldEditedat]
	return ok
}

// ResetEditedat resets all changes to the "editedat" field.
func (m *MessageMutation) ResetEditedat() {
	m.editedat = nil
	delete(m.clearedFields, message.FieldEditedat)
}

// SetActions sets the "actions" field.
func (m *MessageMutation) SetActions(v []*v1.Action) {
	m.actions = &v
}

// Actions returns the value of the "actions" field in the mutation.
func (m *MessageMutation) Actions() (r []*v1.Action, exists bool) {
	v := m.actions
	if v == nil {
		return
	}
	return *v, true
}

// OldActions returns the old "actions" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldActions(ctx context.Context) (v []*v1.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActions: %w", err)
	}
	return oldValue.Actions, nil
}

// ClearActions clears the value of the "actions" field.
func (m *MessageMutation) ClearActions() {
	m.actions = nil
	m.clearedFields[message.FieldActions] = struct{}{}
}

// ActionsCleared returns if the "actions" field was cleared in this mutation.
func (m *MessageMutation) ActionsCleared() bool {
	_, ok := m.clearedFields[message.FieldActions]
	return ok
}

// ResetActions resets all changes to the "actions" field.
func (m *MessageMutation) ResetActions() {
	m.actions = nil
	delete(m.clearedFields, message.FieldActions)
}

// SetMetadata sets the "metadata" field.
func (m *MessageMutation) SetMetadata(v *v1.Metadata) {
	m.metadata = &v
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *MessageMutation) Metadata() (r *v1.Metadata, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMetadata(ctx context.Context) (v *v1.Metadata, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *MessageMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[message.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *MessageMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[message.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *MessageMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, message.FieldMetadata)
}

// SetOverrides sets the "overrides" field.
func (m *MessageMutation) SetOverrides(b []byte) {
	m.overrides = &b
}

// Overrides returns the value of the "overrides" field in the mutation.
func (m *MessageMutation) Overrides() (r []byte, exists bool) {
	v := m.overrides
	if v == nil {
		return
	}
	return *v, true
}

// OldOverrides returns the old "overrides" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldOverrides(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOverrides is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOverrides requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverrides: %w", err)
	}
	return oldValue.Overrides, nil
}

// ClearOverrides clears the value of the "overrides" field.
func (m *MessageMutation) ClearOverrides() {
	m.overrides = nil
	m.clearedFields[message.FieldOverrides] = struct{}{}
}

// OverridesCleared returns if the "overrides" field was cleared in this mutation.
func (m *MessageMutation) OverridesCleared() bool {
	_, ok := m.clearedFields[message.FieldOverrides]
	return ok
}

// ResetOverrides resets all changes to the "overrides" field.
func (m *MessageMutation) ResetOverrides() {
	m.overrides = nil
	delete(m.clearedFields, message.FieldOverrides)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *MessageMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *MessageMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *MessageMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *MessageMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *MessageMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *MessageMutation) SetChannelID(id uint64) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *MessageMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared returns if the "channel" edge to the Channel entity was cleared.
func (m *MessageMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *MessageMutation) ChannelID() (id uint64, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) ChannelIDs() (ids []uint64) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *MessageMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// SetParentID sets the "parent" edge to the Message entity by id.
func (m *MessageMutation) SetParentID(id uint64) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Message entity.
func (m *MessageMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared returns if the "parent" edge to the Message entity was cleared.
func (m *MessageMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *MessageMutation) ParentID() (id uint64, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *MessageMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddReplyIDs adds the "replies" edge to the Message entity by ids.
func (m *MessageMutation) AddReplyIDs(ids ...uint64) {
	if m.replies == nil {
		m.replies = make(map[uint64]struct{})
	}
	for i := range ids {
		m.replies[ids[i]] = struct{}{}
	}
}

// ClearReplies clears the "replies" edge to the Message entity.
func (m *MessageMutation) ClearReplies() {
	m.clearedreplies = true
}

// RepliesCleared returns if the "replies" edge to the Message entity was cleared.
func (m *MessageMutation) RepliesCleared() bool {
	return m.clearedreplies
}

// RemoveReplyIDs removes the "replies" edge to the Message entity by IDs.
func (m *MessageMutation) RemoveReplyIDs(ids ...uint64) {
	if m.removedreplies == nil {
		m.removedreplies = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedreplies[ids[i]] = struct{}{}
	}
}

// RemovedReplies returns the removed IDs of the "replies" edge to the Message entity.
func (m *MessageMutation) RemovedRepliesIDs() (ids []uint64) {
	for id := range m.removedreplies {
		ids = append(ids, id)
	}
	return
}

// RepliesIDs returns the "replies" edge IDs in the mutation.
func (m *MessageMutation) RepliesIDs() (ids []uint64) {
	for id := range m.replies {
		ids = append(ids, id)
	}
	return
}

// ResetReplies resets all changes to the "replies" edge.
func (m *MessageMutation) ResetReplies() {
	m.replies = nil
	m.clearedreplies = false
	m.removedreplies = nil
}

// SetTextmessageID sets the "textmessage" edge to the TextMessage entity by id.
func (m *MessageMutation) SetTextmessageID(id int) {
	m.textmessage = &id
}

// ClearTextmessage clears the "textmessage" edge to the TextMessage entity.
func (m *MessageMutation) ClearTextmessage() {
	m.clearedtextmessage = true
}

// TextmessageCleared returns if the "textmessage" edge to the TextMessage entity was cleared.
func (m *MessageMutation) TextmessageCleared() bool {
	return m.clearedtextmessage
}

// TextmessageID returns the "textmessage" edge ID in the mutation.
func (m *MessageMutation) TextmessageID() (id int, exists bool) {
	if m.textmessage != nil {
		return *m.textmessage, true
	}
	return
}

// TextmessageIDs returns the "textmessage" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TextmessageID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) TextmessageIDs() (ids []int) {
	if id := m.textmessage; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTextmessage resets all changes to the "textmessage" edge.
func (m *MessageMutation) ResetTextmessage() {
	m.textmessage = nil
	m.clearedtextmessage = false
}

// SetFilemessageID sets the "filemessage" edge to the FileMessage entity by id.
func (m *MessageMutation) SetFilemessageID(id int) {
	m.filemessage = &id
}

// ClearFilemessage clears the "filemessage" edge to the FileMessage entity.
func (m *MessageMutation) ClearFilemessage() {
	m.clearedfilemessage = true
}

// FilemessageCleared returns if the "filemessage" edge to the FileMessage entity was cleared.
func (m *MessageMutation) FilemessageCleared() bool {
	return m.clearedfilemessage
}

// FilemessageID returns the "filemessage" edge ID in the mutation.
func (m *MessageMutation) FilemessageID() (id int, exists bool) {
	if m.filemessage != nil {
		return *m.filemessage, true
	}
	return
}

// FilemessageIDs returns the "filemessage" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FilemessageID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) FilemessageIDs() (ids []int) {
	if id := m.filemessage; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFilemessage resets all changes to the "filemessage" edge.
func (m *MessageMutation) ResetFilemessage() {
	m.filemessage = nil
	m.clearedfilemessage = false
}

// SetEmbedmessageID sets the "embedmessage" edge to the EmbedMessage entity by id.
func (m *MessageMutation) SetEmbedmessageID(id int) {
	m.embedmessage = &id
}

// ClearEmbedmessage clears the "embedmessage" edge to the EmbedMessage entity.
func (m *MessageMutation) ClearEmbedmessage() {
	m.clearedembedmessage = true
}

// EmbedmessageCleared returns if the "embedmessage" edge to the EmbedMessage entity was cleared.
func (m *MessageMutation) EmbedmessageCleared() bool {
	return m.clearedembedmessage
}

// EmbedmessageID returns the "embedmessage" edge ID in the mutation.
func (m *MessageMutation) EmbedmessageID() (id int, exists bool) {
	if m.embedmessage != nil {
		return *m.embedmessage, true
	}
	return
}

// EmbedmessageIDs returns the "embedmessage" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmbedmessageID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) EmbedmessageIDs() (ids []int) {
	if id := m.embedmessage; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmbedmessage resets all changes to the "embedmessage" edge.
func (m *MessageMutation) ResetEmbedmessage() {
	m.embedmessage = nil
	m.clearedembedmessage = false
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.createdat != nil {
		fields = append(fields, message.FieldCreatedat)
	}
	if m.editedat != nil {
		fields = append(fields, message.FieldEditedat)
	}
	if m.actions != nil {
		fields = append(fields, message.FieldActions)
	}
	if m.metadata != nil {
		fields = append(fields, message.FieldMetadata)
	}
	if m.overrides != nil {
		fields = append(fields, message.FieldOverrides)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldCreatedat:
		return m.Createdat()
	case message.FieldEditedat:
		return m.Editedat()
	case message.FieldActions:
		return m.Actions()
	case message.FieldMetadata:
		return m.Metadata()
	case message.FieldOverrides:
		return m.Overrides()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldCreatedat:
		return m.OldCreatedat(ctx)
	case message.FieldEditedat:
		return m.OldEditedat(ctx)
	case message.FieldActions:
		return m.OldActions(ctx)
	case message.FieldMetadata:
		return m.OldMetadata(ctx)
	case message.FieldOverrides:
		return m.OldOverrides(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldCreatedat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedat(v)
		return nil
	case message.FieldEditedat:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEditedat(v)
		return nil
	case message.FieldActions:
		v, ok := value.([]*v1.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActions(v)
		return nil
	case message.FieldMetadata:
		v, ok := value.(*v1.Metadata)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case message.FieldOverrides:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverrides(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldEditedat) {
		fields = append(fields, message.FieldEditedat)
	}
	if m.FieldCleared(message.FieldActions) {
		fields = append(fields, message.FieldActions)
	}
	if m.FieldCleared(message.FieldMetadata) {
		fields = append(fields, message.FieldMetadata)
	}
	if m.FieldCleared(message.FieldOverrides) {
		fields = append(fields, message.FieldOverrides)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldEditedat:
		m.ClearEditedat()
		return nil
	case message.FieldActions:
		m.ClearActions()
		return nil
	case message.FieldMetadata:
		m.ClearMetadata()
		return nil
	case message.FieldOverrides:
		m.ClearOverrides()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldCreatedat:
		m.ResetCreatedat()
		return nil
	case message.FieldEditedat:
		m.ResetEditedat()
		return nil
	case message.FieldActions:
		m.ResetActions()
		return nil
	case message.FieldMetadata:
		m.ResetMetadata()
		return nil
	case message.FieldOverrides:
		m.ResetOverrides()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.user != nil {
		edges = append(edges, message.EdgeUser)
	}
	if m.channel != nil {
		edges = append(edges, message.EdgeChannel)
	}
	if m.parent != nil {
		edges = append(edges, message.EdgeParent)
	}
	if m.replies != nil {
		edges = append(edges, message.EdgeReplies)
	}
	if m.textmessage != nil {
		edges = append(edges, message.EdgeTextmessage)
	}
	if m.filemessage != nil {
		edges = append(edges, message.EdgeFilemessage)
	}
	if m.embedmessage != nil {
		edges = append(edges, message.EdgeEmbedmessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.replies))
		for id := range m.replies {
			ids = append(ids, id)
		}
		return ids
	case message.EdgeTextmessage:
		if id := m.textmessage; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeFilemessage:
		if id := m.filemessage; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeEmbedmessage:
		if id := m.embedmessage; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedreplies != nil {
		edges = append(edges, message.EdgeReplies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.removedreplies))
		for id := range m.removedreplies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.cleareduser {
		edges = append(edges, message.EdgeUser)
	}
	if m.clearedchannel {
		edges = append(edges, message.EdgeChannel)
	}
	if m.clearedparent {
		edges = append(edges, message.EdgeParent)
	}
	if m.clearedreplies {
		edges = append(edges, message.EdgeReplies)
	}
	if m.clearedtextmessage {
		edges = append(edges, message.EdgeTextmessage)
	}
	if m.clearedfilemessage {
		edges = append(edges, message.EdgeFilemessage)
	}
	if m.clearedembedmessage {
		edges = append(edges, message.EdgeEmbedmessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeUser:
		return m.cleareduser
	case message.EdgeChannel:
		return m.clearedchannel
	case message.EdgeParent:
		return m.clearedparent
	case message.EdgeReplies:
		return m.clearedreplies
	case message.EdgeTextmessage:
		return m.clearedtextmessage
	case message.EdgeFilemessage:
		return m.clearedfilemessage
	case message.EdgeEmbedmessage:
		return m.clearedembedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeUser:
		m.ClearUser()
		return nil
	case message.EdgeChannel:
		m.ClearChannel()
		return nil
	case message.EdgeParent:
		m.ClearParent()
		return nil
	case message.EdgeTextmessage:
		m.ClearTextmessage()
		return nil
	case message.EdgeFilemessage:
		m.ClearFilemessage()
		return nil
	case message.EdgeEmbedmessage:
		m.ClearEmbedmessage()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeUser:
		m.ResetUser()
		return nil
	case message.EdgeChannel:
		m.ResetChannel()
		return nil
	case message.EdgeParent:
		m.ResetParent()
		return nil
	case message.EdgeReplies:
		m.ResetReplies()
		return nil
	case message.EdgeTextmessage:
		m.ResetTextmessage()
		return nil
	case message.EdgeFilemessage:
		m.ResetFilemessage()
		return nil
	case message.EdgeEmbedmessage:
		m.ResetEmbedmessage()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	clearedFields map[string]struct{}
	role          *uint64
	clearedrole   bool
	done          bool
	oldValue      func(context.Context) (*Permission, error)
	predicates    []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id uint64) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PermissionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoleID sets the "role" edge to the Role entity by id.
func (m *PermissionMutation) SetRoleID(id uint64) {
	m.role = &id
}

// ClearRole clears the "role" edge to the Role entity.
func (m *PermissionMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the "role" edge to the Role entity was cleared.
func (m *PermissionMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleID returns the "role" edge ID in the mutation.
func (m *PermissionMutation) RoleID() (id uint64, exists bool) {
	if m.role != nil {
		return *m.role, true
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *PermissionMutation) RoleIDs() (ids []uint64) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *PermissionMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.role != nil {
		edges = append(edges, permission.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrole {
		edges = append(edges, permission.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case permission.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	switch name {
	case permission.EdgeRole:
		m.ClearRole()
		return nil
	}
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	switch name {
	case permission.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown Permission edge %s", name)
}

// ProfileMutation represents an operation that mutates the Profile nodes in the graph.
type ProfileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	status        *int16
	addstatus     *int16
	avatar        *string
	is_bot        *bool
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Profile, error)
	predicates    []predicate.Profile
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// profileOption allows management of the mutation configuration using functional options.
type profileOption func(*ProfileMutation)

// newProfileMutation creates new mutation for the Profile entity.
func newProfileMutation(c config, op Op, opts ...profileOption) *ProfileMutation {
	m := &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfileID sets the ID field of the mutation.
func withProfileID(id int) profileOption {
	return func(m *ProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Profile
		)
		m.oldValue = func(ctx context.Context) (*Profile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfile sets the old Profile of the mutation.
func withProfile(node *Profile) profileOption {
	return func(m *ProfileMutation) {
		m.oldValue = func(context.Context) (*Profile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *ProfileMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ProfileMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *ProfileMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[profile.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *ProfileMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[profile.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *ProfileMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, profile.FieldUsername)
}

// SetStatus sets the "status" field.
func (m *ProfileMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ProfileMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ProfileMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ProfileMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *ProfileMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[profile.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *ProfileMutation) StatusCleared() bool {
	_, ok := m.clearedFields[profile.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *ProfileMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, profile.FieldStatus)
}

// SetAvatar sets the "avatar" field.
func (m *ProfileMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *ProfileMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *ProfileMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[profile.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *ProfileMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[profile.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *ProfileMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, profile.FieldAvatar)
}

// SetIsBot sets the "is_bot" field.
func (m *ProfileMutation) SetIsBot(b bool) {
	m.is_bot = &b
}

// IsBot returns the value of the "is_bot" field in the mutation.
func (m *ProfileMutation) IsBot() (r bool, exists bool) {
	v := m.is_bot
	if v == nil {
		return
	}
	return *v, true
}

// OldIsBot returns the old "is_bot" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldIsBot(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsBot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsBot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsBot: %w", err)
	}
	return oldValue.IsBot, nil
}

// ResetIsBot resets all changes to the "is_bot" field.
func (m *ProfileMutation) ResetIsBot() {
	m.is_bot = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ProfileMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *ProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ProfileMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProfileMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, profile.FieldUsername)
	}
	if m.status != nil {
		fields = append(fields, profile.FieldStatus)
	}
	if m.avatar != nil {
		fields = append(fields, profile.FieldAvatar)
	}
	if m.is_bot != nil {
		fields = append(fields, profile.FieldIsBot)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldUsername:
		return m.Username()
	case profile.FieldStatus:
		return m.Status()
	case profile.FieldAvatar:
		return m.Avatar()
	case profile.FieldIsBot:
		return m.IsBot()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profile.FieldUsername:
		return m.OldUsername(ctx)
	case profile.FieldStatus:
		return m.OldStatus(ctx)
	case profile.FieldAvatar:
		return m.OldAvatar(ctx)
	case profile.FieldIsBot:
		return m.OldIsBot(ctx)
	}
	return nil, fmt.Errorf("unknown Profile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case profile.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case profile.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case profile.FieldIsBot:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsBot(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfileMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, profile.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profile.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profile.FieldUsername) {
		fields = append(fields, profile.FieldUsername)
	}
	if m.FieldCleared(profile.FieldStatus) {
		fields = append(fields, profile.FieldStatus)
	}
	if m.FieldCleared(profile.FieldAvatar) {
		fields = append(fields, profile.FieldAvatar)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	switch name {
	case profile.FieldUsername:
		m.ClearUsername()
		return nil
	case profile.FieldStatus:
		m.ClearStatus()
		return nil
	case profile.FieldAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldUsername:
		m.ResetUsername()
		return nil
	case profile.FieldStatus:
		m.ResetStatus()
		return nil
	case profile.FieldAvatar:
		m.ResetAvatar()
		return nil
	case profile.FieldIsBot:
		m.ResetIsBot()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, profile.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, profile.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case profile.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	case profile.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	name              *string
	color             *int
	addcolor          *int
	hoist             *bool
	pingable          *bool
	position          *string
	clearedFields     map[string]struct{}
	members           map[uint64]struct{}
	removedmembers    map[uint64]struct{}
	clearedmembers    bool
	permission        map[uint64]struct{}
	removedpermission map[uint64]struct{}
	clearedpermission bool
	done              bool
	oldValue          func(context.Context) (*Role, error)
	predicates        []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id uint64) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RoleMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// SetColor sets the "color" field.
func (m *RoleMutation) SetColor(i int) {
	m.color = &i
	m.addcolor = nil
}

// Color returns the value of the "color" field in the mutation.
func (m *RoleMutation) Color() (r int, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldColor(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// AddColor adds i to the "color" field.
func (m *RoleMutation) AddColor(i int) {
	if m.addcolor != nil {
		*m.addcolor += i
	} else {
		m.addcolor = &i
	}
}

// AddedColor returns the value that was added to the "color" field in this mutation.
func (m *RoleMutation) AddedColor() (r int, exists bool) {
	v := m.addcolor
	if v == nil {
		return
	}
	return *v, true
}

// ResetColor resets all changes to the "color" field.
func (m *RoleMutation) ResetColor() {
	m.color = nil
	m.addcolor = nil
}

// SetHoist sets the "hoist" field.
func (m *RoleMutation) SetHoist(b bool) {
	m.hoist = &b
}

// Hoist returns the value of the "hoist" field in the mutation.
func (m *RoleMutation) Hoist() (r bool, exists bool) {
	v := m.hoist
	if v == nil {
		return
	}
	return *v, true
}

// OldHoist returns the old "hoist" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldHoist(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHoist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHoist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHoist: %w", err)
	}
	return oldValue.Hoist, nil
}

// ResetHoist resets all changes to the "hoist" field.
func (m *RoleMutation) ResetHoist() {
	m.hoist = nil
}

// SetPingable sets the "pingable" field.
func (m *RoleMutation) SetPingable(b bool) {
	m.pingable = &b
}

// Pingable returns the value of the "pingable" field in the mutation.
func (m *RoleMutation) Pingable() (r bool, exists bool) {
	v := m.pingable
	if v == nil {
		return
	}
	return *v, true
}

// OldPingable returns the old "pingable" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldPingable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPingable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPingable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPingable: %w", err)
	}
	return oldValue.Pingable, nil
}

// ResetPingable resets all changes to the "pingable" field.
func (m *RoleMutation) ResetPingable() {
	m.pingable = nil
}

// SetPosition sets the "position" field.
func (m *RoleMutation) SetPosition(s string) {
	m.position = &s
}

// Position returns the value of the "position" field in the mutation.
func (m *RoleMutation) Position() (r string, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldPosition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *RoleMutation) ResetPosition() {
	m.position = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *RoleMutation) AddMemberIDs(ids ...uint64) {
	if m.members == nil {
		m.members = make(map[uint64]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *RoleMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared returns if the "members" edge to the User entity was cleared.
func (m *RoleMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *RoleMutation) RemoveMemberIDs(ids ...uint64) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *RoleMutation) RemovedMembersIDs() (ids []uint64) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *RoleMutation) MembersIDs() (ids []uint64) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *RoleMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddPermissionIDs adds the "permission" edge to the Permission entity by ids.
func (m *RoleMutation) AddPermissionIDs(ids ...uint64) {
	if m.permission == nil {
		m.permission = make(map[uint64]struct{})
	}
	for i := range ids {
		m.permission[ids[i]] = struct{}{}
	}
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (m *RoleMutation) ClearPermission() {
	m.clearedpermission = true
}

// PermissionCleared returns if the "permission" edge to the Permission entity was cleared.
func (m *RoleMutation) PermissionCleared() bool {
	return m.clearedpermission
}

// RemovePermissionIDs removes the "permission" edge to the Permission entity by IDs.
func (m *RoleMutation) RemovePermissionIDs(ids ...uint64) {
	if m.removedpermission == nil {
		m.removedpermission = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedpermission[ids[i]] = struct{}{}
	}
}

// RemovedPermission returns the removed IDs of the "permission" edge to the Permission entity.
func (m *RoleMutation) RemovedPermissionIDs() (ids []uint64) {
	for id := range m.removedpermission {
		ids = append(ids, id)
	}
	return
}

// PermissionIDs returns the "permission" edge IDs in the mutation.
func (m *RoleMutation) PermissionIDs() (ids []uint64) {
	for id := range m.permission {
		ids = append(ids, id)
	}
	return
}

// ResetPermission resets all changes to the "permission" edge.
func (m *RoleMutation) ResetPermission() {
	m.permission = nil
	m.clearedpermission = false
	m.removedpermission = nil
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	if m.color != nil {
		fields = append(fields, role.FieldColor)
	}
	if m.hoist != nil {
		fields = append(fields, role.FieldHoist)
	}
	if m.pingable != nil {
		fields = append(fields, role.FieldPingable)
	}
	if m.position != nil {
		fields = append(fields, role.FieldPosition)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldName:
		return m.Name()
	case role.FieldColor:
		return m.Color()
	case role.FieldHoist:
		return m.Hoist()
	case role.FieldPingable:
		return m.Pingable()
	case role.FieldPosition:
		return m.Position()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldName:
		return m.OldName(ctx)
	case role.FieldColor:
		return m.OldColor(ctx)
	case role.FieldHoist:
		return m.OldHoist(ctx)
	case role.FieldPingable:
		return m.OldPingable(ctx)
	case role.FieldPosition:
		return m.OldPosition(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case role.FieldColor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case role.FieldHoist:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHoist(v)
		return nil
	case role.FieldPingable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPingable(v)
		return nil
	case role.FieldPosition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	var fields []string
	if m.addcolor != nil {
		fields = append(fields, role.FieldColor)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case role.FieldColor:
		return m.AddedColor()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case role.FieldColor:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddColor(v)
		return nil
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldName:
		m.ResetName()
		return nil
	case role.FieldColor:
		m.ResetColor()
		return nil
	case role.FieldHoist:
		m.ResetHoist()
		return nil
	case role.FieldPingable:
		m.ResetPingable()
		return nil
	case role.FieldPosition:
		m.ResetPosition()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.members != nil {
		edges = append(edges, role.EdgeMembers)
	}
	if m.permission != nil {
		edges = append(edges, role.EdgePermission)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermission:
		ids := make([]ent.Value, 0, len(m.permission))
		for id := range m.permission {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmembers != nil {
		edges = append(edges, role.EdgeMembers)
	}
	if m.removedpermission != nil {
		edges = append(edges, role.EdgePermission)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermission:
		ids := make([]ent.Value, 0, len(m.removedpermission))
		for id := range m.removedpermission {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmembers {
		edges = append(edges, role.EdgeMembers)
	}
	if m.clearedpermission {
		edges = append(edges, role.EdgePermission)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeMembers:
		return m.clearedmembers
	case role.EdgePermission:
		return m.clearedpermission
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeMembers:
		m.ResetMembers()
		return nil
	case role.EdgePermission:
		m.ResetPermission()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	sessionid     *string
	expires       *time.Time
	clearedFields map[string]struct{}
	user          *uint64
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSessionid sets the "sessionid" field.
func (m *SessionMutation) SetSessionid(s string) {
	m.sessionid = &s
}

// Sessionid returns the value of the "sessionid" field in the mutation.
func (m *SessionMutation) Sessionid() (r string, exists bool) {
	v := m.sessionid
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionid returns the old "sessionid" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSessionid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSessionid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSessionid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionid: %w", err)
	}
	return oldValue.Sessionid, nil
}

// ResetSessionid resets all changes to the "sessionid" field.
func (m *SessionMutation) ResetSessionid() {
	m.sessionid = nil
}

// SetExpires sets the "expires" field.
func (m *SessionMutation) SetExpires(t time.Time) {
	m.expires = &t
}

// Expires returns the value of the "expires" field in the mutation.
func (m *SessionMutation) Expires() (r time.Time, exists bool) {
	v := m.expires
	if v == nil {
		return
	}
	return *v, true
}

// OldExpires returns the old "expires" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpires(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExpires is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExpires requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpires: %w", err)
	}
	return oldValue.Expires, nil
}

// ResetExpires resets all changes to the "expires" field.
func (m *SessionMutation) ResetExpires() {
	m.expires = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id uint64) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id uint64, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []uint64) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.sessionid != nil {
		fields = append(fields, session.FieldSessionid)
	}
	if m.expires != nil {
		fields = append(fields, session.FieldExpires)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldSessionid:
		return m.Sessionid()
	case session.FieldExpires:
		return m.Expires()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldSessionid:
		return m.OldSessionid(ctx)
	case session.FieldExpires:
		return m.OldExpires(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldSessionid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionid(v)
		return nil
	case session.FieldExpires:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpires(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldSessionid:
		m.ResetSessionid()
		return nil
	case session.FieldExpires:
		m.ResetExpires()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// TextMessageMutation represents an operation that mutates the TextMessage nodes in the graph.
type TextMessageMutation struct {
	config
	op             Op
	typ            string
	id             *int
	content        *string
	clearedFields  map[string]struct{}
	message        *uint64
	clearedmessage bool
	done           bool
	oldValue       func(context.Context) (*TextMessage, error)
	predicates     []predicate.TextMessage
}

var _ ent.Mutation = (*TextMessageMutation)(nil)

// textmessageOption allows management of the mutation configuration using functional options.
type textmessageOption func(*TextMessageMutation)

// newTextMessageMutation creates new mutation for the TextMessage entity.
func newTextMessageMutation(c config, op Op, opts ...textmessageOption) *TextMessageMutation {
	m := &TextMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeTextMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTextMessageID sets the ID field of the mutation.
func withTextMessageID(id int) textmessageOption {
	return func(m *TextMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *TextMessage
		)
		m.oldValue = func(ctx context.Context) (*TextMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TextMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTextMessage sets the old TextMessage of the mutation.
func withTextMessage(node *TextMessage) textmessageOption {
	return func(m *TextMessageMutation) {
		m.oldValue = func(context.Context) (*TextMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TextMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TextMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *TextMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContent sets the "content" field.
func (m *TextMessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TextMessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the TextMessage entity.
// If the TextMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TextMessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TextMessageMutation) ResetContent() {
	m.content = nil
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *TextMessageMutation) SetMessageID(id uint64) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *TextMessageMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *TextMessageMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *TextMessageMutation) MessageID() (id uint64, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *TextMessageMutation) MessageIDs() (ids []uint64) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *TextMessageMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// Op returns the operation name.
func (m *TextMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TextMessage).
func (m *TextMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TextMessageMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.content != nil {
		fields = append(fields, textmessage.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TextMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case textmessage.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TextMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case textmessage.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown TextMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TextMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case textmessage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown TextMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TextMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TextMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TextMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TextMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TextMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TextMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TextMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TextMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TextMessageMutation) ResetField(name string) error {
	switch name {
	case textmessage.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown TextMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TextMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.message != nil {
		edges = append(edges, textmessage.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TextMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case textmessage.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TextMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TextMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TextMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessage {
		edges = append(edges, textmessage.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TextMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case textmessage.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TextMessageMutation) ClearEdge(name string) error {
	switch name {
	case textmessage.EdgeMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown TextMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TextMessageMutation) ResetEdge(name string) error {
	switch name {
	case textmessage.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown TextMessage edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	clearedFields       map[string]struct{}
	local_user          *int
	clearedlocal_user   bool
	foreign_user        *int
	clearedforeign_user bool
	profile             *int
	clearedprofile      bool
	sessions            map[int]struct{}
	removedsessions     map[int]struct{}
	clearedsessions     bool
	message             map[uint64]struct{}
	removedmessage      map[uint64]struct{}
	clearedmessage      bool
	guild               map[uint64]struct{}
	removedguild        map[uint64]struct{}
	clearedguild        bool
	emotepack           map[uint64]struct{}
	removedemotepack    map[uint64]struct{}
	clearedemotepack    bool
	createdpacks        map[uint64]struct{}
	removedcreatedpacks map[uint64]struct{}
	clearedcreatedpacks bool
	role                map[uint64]struct{}
	removedrole         map[uint64]struct{}
	clearedrole         bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("entgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLocalUserID sets the "local_user" edge to the LocalUser entity by id.
func (m *UserMutation) SetLocalUserID(id int) {
	m.local_user = &id
}

// ClearLocalUser clears the "local_user" edge to the LocalUser entity.
func (m *UserMutation) ClearLocalUser() {
	m.clearedlocal_user = true
}

// LocalUserCleared returns if the "local_user" edge to the LocalUser entity was cleared.
func (m *UserMutation) LocalUserCleared() bool {
	return m.clearedlocal_user
}

// LocalUserID returns the "local_user" edge ID in the mutation.
func (m *UserMutation) LocalUserID() (id int, exists bool) {
	if m.local_user != nil {
		return *m.local_user, true
	}
	return
}

// LocalUserIDs returns the "local_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LocalUserID instead. It exists only for internal usage by the builders.
func (m *UserMutation) LocalUserIDs() (ids []int) {
	if id := m.local_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLocalUser resets all changes to the "local_user" edge.
func (m *UserMutation) ResetLocalUser() {
	m.local_user = nil
	m.clearedlocal_user = false
}

// SetForeignUserID sets the "foreign_user" edge to the ForeignUser entity by id.
func (m *UserMutation) SetForeignUserID(id int) {
	m.foreign_user = &id
}

// ClearForeignUser clears the "foreign_user" edge to the ForeignUser entity.
func (m *UserMutation) ClearForeignUser() {
	m.clearedforeign_user = true
}

// ForeignUserCleared returns if the "foreign_user" edge to the ForeignUser entity was cleared.
func (m *UserMutation) ForeignUserCleared() bool {
	return m.clearedforeign_user
}

// ForeignUserID returns the "foreign_user" edge ID in the mutation.
func (m *UserMutation) ForeignUserID() (id int, exists bool) {
	if m.foreign_user != nil {
		return *m.foreign_user, true
	}
	return
}

// ForeignUserIDs returns the "foreign_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ForeignUserID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ForeignUserIDs() (ids []int) {
	if id := m.foreign_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetForeignUser resets all changes to the "foreign_user" edge.
func (m *UserMutation) ResetForeignUser() {
	m.foreign_user = nil
	m.clearedforeign_user = false
}

// SetProfileID sets the "profile" edge to the Profile entity by id.
func (m *UserMutation) SetProfileID(id int) {
	m.profile = &id
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (m *UserMutation) ClearProfile() {
	m.clearedprofile = true
}

// ProfileCleared returns if the "profile" edge to the Profile entity was cleared.
func (m *UserMutation) ProfileCleared() bool {
	return m.clearedprofile
}

// ProfileID returns the "profile" edge ID in the mutation.
func (m *UserMutation) ProfileID() (id int, exists bool) {
	if m.profile != nil {
		return *m.profile, true
	}
	return
}

// ProfileIDs returns the "profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProfileIDs() (ids []int) {
	if id := m.profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile resets all changes to the "profile" edge.
func (m *UserMutation) ResetProfile() {
	m.profile = nil
	m.clearedprofile = false
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared returns if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddMessageIDs adds the "message" edge to the Message entity by ids.
func (m *UserMutation) AddMessageIDs(ids ...uint64) {
	if m.message == nil {
		m.message = make(map[uint64]struct{})
	}
	for i := range ids {
		m.message[ids[i]] = struct{}{}
	}
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *UserMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared returns if the "message" edge to the Message entity was cleared.
func (m *UserMutation) MessageCleared() bool {
	return m.clearedmessage
}

// RemoveMessageIDs removes the "message" edge to the Message entity by IDs.
func (m *UserMutation) RemoveMessageIDs(ids ...uint64) {
	if m.removedmessage == nil {
		m.removedmessage = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedmessage[ids[i]] = struct{}{}
	}
}

// RemovedMessage returns the removed IDs of the "message" edge to the Message entity.
func (m *UserMutation) RemovedMessageIDs() (ids []uint64) {
	for id := range m.removedmessage {
		ids = append(ids, id)
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
func (m *UserMutation) MessageIDs() (ids []uint64) {
	for id := range m.message {
		ids = append(ids, id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *UserMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
	m.removedmessage = nil
}

// AddGuildIDs adds the "guild" edge to the Guild entity by ids.
func (m *UserMutation) AddGuildIDs(ids ...uint64) {
	if m.guild == nil {
		m.guild = make(map[uint64]struct{})
	}
	for i := range ids {
		m.guild[ids[i]] = struct{}{}
	}
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *UserMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared returns if the "guild" edge to the Guild entity was cleared.
func (m *UserMutation) GuildCleared() bool {
	return m.clearedguild
}

// RemoveGuildIDs removes the "guild" edge to the Guild entity by IDs.
func (m *UserMutation) RemoveGuildIDs(ids ...uint64) {
	if m.removedguild == nil {
		m.removedguild = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedguild[ids[i]] = struct{}{}
	}
}

// RemovedGuild returns the removed IDs of the "guild" edge to the Guild entity.
func (m *UserMutation) RemovedGuildIDs() (ids []uint64) {
	for id := range m.removedguild {
		ids = append(ids, id)
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
func (m *UserMutation) GuildIDs() (ids []uint64) {
	for id := range m.guild {
		ids = append(ids, id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *UserMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
	m.removedguild = nil
}

// AddEmotepackIDs adds the "emotepack" edge to the EmotePack entity by ids.
func (m *UserMutation) AddEmotepackIDs(ids ...uint64) {
	if m.emotepack == nil {
		m.emotepack = make(map[uint64]struct{})
	}
	for i := range ids {
		m.emotepack[ids[i]] = struct{}{}
	}
}

// ClearEmotepack clears the "emotepack" edge to the EmotePack entity.
func (m *UserMutation) ClearEmotepack() {
	m.clearedemotepack = true
}

// EmotepackCleared returns if the "emotepack" edge to the EmotePack entity was cleared.
func (m *UserMutation) EmotepackCleared() bool {
	return m.clearedemotepack
}

// RemoveEmotepackIDs removes the "emotepack" edge to the EmotePack entity by IDs.
func (m *UserMutation) RemoveEmotepackIDs(ids ...uint64) {
	if m.removedemotepack == nil {
		m.removedemotepack = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedemotepack[ids[i]] = struct{}{}
	}
}

// RemovedEmotepack returns the removed IDs of the "emotepack" edge to the EmotePack entity.
func (m *UserMutation) RemovedEmotepackIDs() (ids []uint64) {
	for id := range m.removedemotepack {
		ids = append(ids, id)
	}
	return
}

// EmotepackIDs returns the "emotepack" edge IDs in the mutation.
func (m *UserMutation) EmotepackIDs() (ids []uint64) {
	for id := range m.emotepack {
		ids = append(ids, id)
	}
	return
}

// ResetEmotepack resets all changes to the "emotepack" edge.
func (m *UserMutation) ResetEmotepack() {
	m.emotepack = nil
	m.clearedemotepack = false
	m.removedemotepack = nil
}

// AddCreatedpackIDs adds the "createdpacks" edge to the EmotePack entity by ids.
func (m *UserMutation) AddCreatedpackIDs(ids ...uint64) {
	if m.createdpacks == nil {
		m.createdpacks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.createdpacks[ids[i]] = struct{}{}
	}
}

// ClearCreatedpacks clears the "createdpacks" edge to the EmotePack entity.
func (m *UserMutation) ClearCreatedpacks() {
	m.clearedcreatedpacks = true
}

// CreatedpacksCleared returns if the "createdpacks" edge to the EmotePack entity was cleared.
func (m *UserMutation) CreatedpacksCleared() bool {
	return m.clearedcreatedpacks
}

// RemoveCreatedpackIDs removes the "createdpacks" edge to the EmotePack entity by IDs.
func (m *UserMutation) RemoveCreatedpackIDs(ids ...uint64) {
	if m.removedcreatedpacks == nil {
		m.removedcreatedpacks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedcreatedpacks[ids[i]] = struct{}{}
	}
}

// RemovedCreatedpacks returns the removed IDs of the "createdpacks" edge to the EmotePack entity.
func (m *UserMutation) RemovedCreatedpacksIDs() (ids []uint64) {
	for id := range m.removedcreatedpacks {
		ids = append(ids, id)
	}
	return
}

// CreatedpacksIDs returns the "createdpacks" edge IDs in the mutation.
func (m *UserMutation) CreatedpacksIDs() (ids []uint64) {
	for id := range m.createdpacks {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedpacks resets all changes to the "createdpacks" edge.
func (m *UserMutation) ResetCreatedpacks() {
	m.createdpacks = nil
	m.clearedcreatedpacks = false
	m.removedcreatedpacks = nil
}

// AddRoleIDs adds the "role" edge to the Role entity by ids.
func (m *UserMutation) AddRoleIDs(ids ...uint64) {
	if m.role == nil {
		m.role = make(map[uint64]struct{})
	}
	for i := range ids {
		m.role[ids[i]] = struct{}{}
	}
}

// ClearRole clears the "role" edge to the Role entity.
func (m *UserMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the "role" edge to the Role entity was cleared.
func (m *UserMutation) RoleCleared() bool {
	return m.clearedrole
}

// RemoveRoleIDs removes the "role" edge to the Role entity by IDs.
func (m *UserMutation) RemoveRoleIDs(ids ...uint64) {
	if m.removedrole == nil {
		m.removedrole = make(map[uint64]struct{})
	}
	for i := range ids {
		m.removedrole[ids[i]] = struct{}{}
	}
}

// RemovedRole returns the removed IDs of the "role" edge to the Role entity.
func (m *UserMutation) RemovedRoleIDs() (ids []uint64) {
	for id := range m.removedrole {
		ids = append(ids, id)
	}
	return
}

// RoleIDs returns the "role" edge IDs in the mutation.
func (m *UserMutation) RoleIDs() (ids []uint64) {
	for id := range m.role {
		ids = append(ids, id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
	m.removedrole = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 9)
	if m.local_user != nil {
		edges = append(edges, user.EdgeLocalUser)
	}
	if m.foreign_user != nil {
		edges = append(edges, user.EdgeForeignUser)
	}
	if m.profile != nil {
		edges = append(edges, user.EdgeProfile)
	}
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.message != nil {
		edges = append(edges, user.EdgeMessage)
	}
	if m.guild != nil {
		edges = append(edges, user.EdgeGuild)
	}
	if m.emotepack != nil {
		edges = append(edges, user.EdgeEmotepack)
	}
	if m.createdpacks != nil {
		edges = append(edges, user.EdgeCreatedpacks)
	}
	if m.role != nil {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLocalUser:
		if id := m.local_user; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeForeignUser:
		if id := m.foreign_user; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeProfile:
		if id := m.profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.message))
		for id := range m.message {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGuild:
		ids := make([]ent.Value, 0, len(m.guild))
		for id := range m.guild {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmotepack:
		ids := make([]ent.Value, 0, len(m.emotepack))
		for id := range m.emotepack {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedpacks:
		ids := make([]ent.Value, 0, len(m.createdpacks))
		for id := range m.createdpacks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRole:
		ids := make([]ent.Value, 0, len(m.role))
		for id := range m.role {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 9)
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedmessage != nil {
		edges = append(edges, user.EdgeMessage)
	}
	if m.removedguild != nil {
		edges = append(edges, user.EdgeGuild)
	}
	if m.removedemotepack != nil {
		edges = append(edges, user.EdgeEmotepack)
	}
	if m.removedcreatedpacks != nil {
		edges = append(edges, user.EdgeCreatedpacks)
	}
	if m.removedrole != nil {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessage:
		ids := make([]ent.Value, 0, len(m.removedmessage))
		for id := range m.removedmessage {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGuild:
		ids := make([]ent.Value, 0, len(m.removedguild))
		for id := range m.removedguild {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmotepack:
		ids := make([]ent.Value, 0, len(m.removedemotepack))
		for id := range m.removedemotepack {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedpacks:
		ids := make([]ent.Value, 0, len(m.removedcreatedpacks))
		for id := range m.removedcreatedpacks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRole:
		ids := make([]ent.Value, 0, len(m.removedrole))
		for id := range m.removedrole {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 9)
	if m.clearedlocal_user {
		edges = append(edges, user.EdgeLocalUser)
	}
	if m.clearedforeign_user {
		edges = append(edges, user.EdgeForeignUser)
	}
	if m.clearedprofile {
		edges = append(edges, user.EdgeProfile)
	}
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedmessage {
		edges = append(edges, user.EdgeMessage)
	}
	if m.clearedguild {
		edges = append(edges, user.EdgeGuild)
	}
	if m.clearedemotepack {
		edges = append(edges, user.EdgeEmotepack)
	}
	if m.clearedcreatedpacks {
		edges = append(edges, user.EdgeCreatedpacks)
	}
	if m.clearedrole {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeLocalUser:
		return m.clearedlocal_user
	case user.EdgeForeignUser:
		return m.clearedforeign_user
	case user.EdgeProfile:
		return m.clearedprofile
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeMessage:
		return m.clearedmessage
	case user.EdgeGuild:
		return m.clearedguild
	case user.EdgeEmotepack:
		return m.clearedemotepack
	case user.EdgeCreatedpacks:
		return m.clearedcreatedpacks
	case user.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeLocalUser:
		m.ClearLocalUser()
		return nil
	case user.EdgeForeignUser:
		m.ClearForeignUser()
		return nil
	case user.EdgeProfile:
		m.ClearProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeLocalUser:
		m.ResetLocalUser()
		return nil
	case user.EdgeForeignUser:
		m.ResetForeignUser()
		return nil
	case user.EdgeProfile:
		m.ResetProfile()
		return nil
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeMessage:
		m.ResetMessage()
		return nil
	case user.EdgeGuild:
		m.ResetGuild()
		return nil
	case user.EdgeEmotepack:
		m.ResetEmotepack()
		return nil
	case user.EdgeCreatedpacks:
		m.ResetCreatedpacks()
		return nil
	case user.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
