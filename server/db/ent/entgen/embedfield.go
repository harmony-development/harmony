// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedfield"
	"github.com/harmony-development/legato/server/db/ent/entgen/embedmessage"
)

// EmbedField is the model entity for the EmbedField schema.
type EmbedField struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Subtitle holds the value of the "subtitle" field.
	Subtitle string `json:"subtitle,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Presentation holds the value of the "presentation" field.
	Presentation int8 `json:"presentation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmbedFieldQuery when eager-loading is set.
	Edges                     EmbedFieldEdges `json:"edges"`
	embed_message_embed_field *int
}

// EmbedFieldEdges holds the relations/edges for other nodes in the graph.
type EmbedFieldEdges struct {
	// EmbedAction holds the value of the embed_action edge.
	EmbedAction []*EmbedAction `json:"embed_action,omitempty"`
	// EmbedMessage holds the value of the embed_message edge.
	EmbedMessage *EmbedMessage `json:"embed_message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EmbedActionOrErr returns the EmbedAction value or an error if the edge
// was not loaded in eager-loading.
func (e EmbedFieldEdges) EmbedActionOrErr() ([]*EmbedAction, error) {
	if e.loadedTypes[0] {
		return e.EmbedAction, nil
	}
	return nil, &NotLoadedError{edge: "embed_action"}
}

// EmbedMessageOrErr returns the EmbedMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmbedFieldEdges) EmbedMessageOrErr() (*EmbedMessage, error) {
	if e.loadedTypes[1] {
		if e.EmbedMessage == nil {
			// The edge embed_message was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: embedmessage.Label}
		}
		return e.EmbedMessage, nil
	}
	return nil, &NotLoadedError{edge: "embed_message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmbedField) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case embedfield.FieldID, embedfield.FieldPresentation:
			values[i] = &sql.NullInt64{}
		case embedfield.FieldTitle, embedfield.FieldSubtitle, embedfield.FieldBody, embedfield.FieldImageURL:
			values[i] = &sql.NullString{}
		case embedfield.ForeignKeys[0]: // embed_message_embed_field
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EmbedField", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmbedField fields.
func (ef *EmbedField) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case embedfield.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ef.ID = int(value.Int64)
		case embedfield.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ef.Title = value.String
			}
		case embedfield.FieldSubtitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subtitle", values[i])
			} else if value.Valid {
				ef.Subtitle = value.String
			}
		case embedfield.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				ef.Body = value.String
			}
		case embedfield.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				ef.ImageURL = value.String
			}
		case embedfield.FieldPresentation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field presentation", values[i])
			} else if value.Valid {
				ef.Presentation = int8(value.Int64)
			}
		case embedfield.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field embed_message_embed_field", value)
			} else if value.Valid {
				ef.embed_message_embed_field = new(int)
				*ef.embed_message_embed_field = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEmbedAction queries the "embed_action" edge of the EmbedField entity.
func (ef *EmbedField) QueryEmbedAction() *EmbedActionQuery {
	return (&EmbedFieldClient{config: ef.config}).QueryEmbedAction(ef)
}

// QueryEmbedMessage queries the "embed_message" edge of the EmbedField entity.
func (ef *EmbedField) QueryEmbedMessage() *EmbedMessageQuery {
	return (&EmbedFieldClient{config: ef.config}).QueryEmbedMessage(ef)
}

// Update returns a builder for updating this EmbedField.
// Note that you need to call EmbedField.Unwrap() before calling this method if this EmbedField
// was returned from a transaction, and the transaction was committed or rolled back.
func (ef *EmbedField) Update() *EmbedFieldUpdateOne {
	return (&EmbedFieldClient{config: ef.config}).UpdateOne(ef)
}

// Unwrap unwraps the EmbedField entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ef *EmbedField) Unwrap() *EmbedField {
	tx, ok := ef.config.driver.(*txDriver)
	if !ok {
		panic("entgen: EmbedField is not a transactional entity")
	}
	ef.config.driver = tx.drv
	return ef
}

// String implements the fmt.Stringer.
func (ef *EmbedField) String() string {
	var builder strings.Builder
	builder.WriteString("EmbedField(")
	builder.WriteString(fmt.Sprintf("id=%v", ef.ID))
	builder.WriteString(", title=")
	builder.WriteString(ef.Title)
	builder.WriteString(", subtitle=")
	builder.WriteString(ef.Subtitle)
	builder.WriteString(", body=")
	builder.WriteString(ef.Body)
	builder.WriteString(", image_url=")
	builder.WriteString(ef.ImageURL)
	builder.WriteString(", presentation=")
	builder.WriteString(fmt.Sprintf("%v", ef.Presentation))
	builder.WriteByte(')')
	return builder.String()
}

// EmbedFields is a parsable slice of EmbedField.
type EmbedFields []*EmbedField

func (ef EmbedFields) config(cfg config) {
	for _i := range ef {
		ef[_i].config = cfg
	}
}
